if (typeof _yuitest_coverage == "undefined"){
    _yuitest_coverage = {};
    _yuitest_coverline = function(src, line){
        var coverage = _yuitest_coverage[src];
        if (!coverage.lines[line]){
            coverage.calledLines++;
        }
        coverage.lines[line]++;
    };
    _yuitest_coverfunc = function(src, name, line){
        var coverage = _yuitest_coverage[src],
            funcId = name + ":" + line;
        if (!coverage.functions[funcId]){
            coverage.calledFunctions++;
        }
        coverage.functions[funcId]++;
    };
}
_yuitest_coverage["build/gallery-io-multiresponse/gallery-io-multiresponse.js"] = {
    lines: {},
    functions: {},
    coveredLines: 0,
    calledLines: 0,
    coveredFunctions: 0,
    calledFunctions: 0,
    path: "build/gallery-io-multiresponse/gallery-io-multiresponse.js",
    code: []
};
_yuitest_coverage["build/gallery-io-multiresponse/gallery-io-multiresponse.js"].code=["YUI.add('gallery-io-multiresponse', function (Y, NAME) {","","/**"," * <p>Extends the IO base class to enable multiple responses using an"," * iframe as the transport medium.</p>"," * "," * @module gallery-io-multiresponse"," */","","/**"," * <p>Extends the IO base class to enable multiple responses using an"," * iframe as the transport medium.  Each response fires the response event."," * The only events that are fired are the start and end events.</p>"," * "," * <p>All the YUI 3 IO features are supported, so the request can be sent"," * as either GET (for simple query args) or POST (for anything, even file"," * uploads).  The module uses an iframe to send the request and includes a"," * callback parameter.  (So you cannot include a parameter named"," * <q>callback</q>.)  For each response, the server must send a script"," * block invoking the callback, similar to JSONP.  Unlike JSONP, however,"," * requests can only be made to your own server because the callback will"," * reference <code>window.parent</code>.  In order to trigger script"," * parsing in all browsers, the first chunk of data that the server writes"," * to the connection must be at least 1024 bytes, and it must be part of"," * the body, so you will need to explicitly send an empty head.</p>"," * "," * <p>Due to the way that the request data is parsed, it is not safe to"," * send JSON-encoded data using the standard YUI 3 IO methods.  However, if"," * you define <code>json</code> in the configuration passed to"," * <code>Y.io()</code>, then the data will be passed to the server under"," * the <code>json</code> parameter.  (If you pass an object, it will be"," * serialized with <code>Y.JSON.stringify()</code>.)"," * "," * <p>To keep the iframe after it has finished loading, set"," * <code>debug:true</code> in the configuration passed to"," * <code>Y.io()</code>.</p>"," * "," * @class io~multiresponse"," */","","var L = Y.Lang,","    w = Y.config.win,","    d = Y.config.doc,","    _std = (d.documentMode && d.documentMode >= 8),","    _d = decodeURIComponent;","","/**"," * Creates the iframe used in file upload transactions, and binds the"," * response event handler."," *"," * @method _iframe"," * @private"," * @static"," * @param {object} o Transaction object generated by _iframe()."," * @param {object} c Configuration object passed to YUI.io()."," * @return {void}"," */","function _iframe(o, c, io) {","    var i = Y.Node.create('<iframe id=\"io-multi-response-' + o.id + '\" name=\"io-multi-response-' + o.id + '\" />');","        i._node.style.position = 'absolute';","        i._node.style.top = '-1000px';","        i._node.style.left = '-1000px';","","    Y.one('body').appendChild(i);","    // Bind the onload handler to the iframe to detect the file upload response.","    Y.on(\"load\", function() { io._multi_complete(o, c); }, '#io-multi-response-' + o.id);","}","","/**"," * Creates a temporary form, if the caller doesn't provide one."," *"," * @method _form"," * @private"," * @static"," * @param {object} c Configuration object passed to YUI.io()."," * @return {string} form id"," */","function _form(c) {","    var id = Y.guid('io-multi-response-form-'),","        f = Y.Node.create('<form id=\"' + id + '\" name=\"' + id + '\" />');","        f._node.style.position = 'absolute';","        f._node.style.top = '-1000px';","        f._node.style.left = '-1000px';","","    Y.one('body').appendChild(f);","    return id;","}","","Y.mix(Y.IO.prototype, {","    /**","     * Adds JSON encoded data to the form.","     * ","     * @method _addJSON","     * @private","     * @static","     * @param {object} f HTML form object.","     * @param {string|object} s The JSON data or object to serialize.","     * @return {array} created fields.","     */","    _addJSON: function(f, s) {","        if (!Y.Lang.isString(s)) {","            s = Y.JSON.stringify(s);","        }","","        var el  = d.createElement('input');","        el.type = 'hidden';","        el.name = 'json';","        el.value = s;","        f.appendChild(el);","","        return el;","    },","","    /**","     * Sets the appropriate attributes and values to the HTML form, in","     * preparation of a file upload transaction.","     * ","     * @method _multi_setAttrs","     * @private","     * @static","     * @param {object} f HTML form object.","     * @param {object} id The Transaction ID.","     * @param {object} uri Qualified path to transaction resource.","     * @param {string} method POST or GET.","     * @return {void}","     */","    _multi_setAttrs: function(f, id, uri, method) {","        f.setAttribute('action', uri);","        f.setAttribute('method', method || 'POST');","        f.setAttribute('target', 'io-multi-response-' + id );","        f.setAttribute(Y.UA.ie && !_std ? 'encoding' : 'enctype', 'multipart/form-data');","    },","","    /**","     * Starts timeout count if the configuration object has a defined","     * timeout property.","     *","     * @method _multi_startTimeout","     * @private","     * @static","     * @param {object} o Transaction object generated by _iframe().","     * @param {object} c Configuration object passed to YUI.io().","     * @return {void}","     */","    _multi_startTimeout: function(o, c) {","        var io = this;","","        io._timeout[o.id] = w.setTimeout(","            function() {","                o.status = 0;","                o.statusText = 'timeout';","                io.end(o, c);","            }, c.timeout);","    },","","    // reuse _clearTimeout()","","    /**","     * Destroy the iframe and temp form, if any.","     * ","     * @method _multi_destroy","     * @private","     * @static","     * @param {number} id Transaction id.","     * @param {object} c Configuration object for the transaction.","     * @return {void}","     */","    _multi_destroy: function(id, c) {","        if (!c.debug) {","            Y.Event.purgeElement('#io-multi-response-' + id, false);","            Y.one('body').removeChild(Y.one('#io-multi-response-' + id));","        }","","        if (c.form.id.indexOf('io-multi-response-form-') === 0) {","            Y.one('body').removeChild(Y.one('#' + c.form.id));","        }","    },","","    /**","     * Bound to the iframe's Load event and processes the response data.","     * ","     * @method _multi_complete","     * @private","     * @static","     * @param {o} o The transaction object","     * @param {object} c Configuration object for the transaction.","     * @return {void}","     */","    _multi_complete: function(o, c) {","        var io = this;","","        if (c.timeout) {","            io._clearTimeout(o.id);","        }","","        io.end(o, c);","        // The transaction is complete, so call _multi_destroy to remove","        // the event listener bound to the iframe, and then","        // destroy the iframe.","        w.setTimeout( function() { io._multi_destroy(o.id, c); }, 0);","    },","","    /**","     * Uploads HTML form data, inclusive of files/attachments, using the","     * iframe created in _iframe to facilitate the transaction.","     * ","     * @method _multi_send","     * @private","     * @static","     * @param {o} o The transaction object","     * @param {object} uri Qualified path to transaction resource.","     * @param {object} c Configuration object for the transaction.","     * @return {void}","     */","    _multi_send: function(o, uri, c) {","        var io = this,","            f = (typeof c.form.id === 'string') ? d.getElementById(c.form.id) : c.form.id,","            // Track original HTML form attribute values.","            attr = {","                method: f.getAttribute('method'),","                action: f.getAttribute('action'),","                target: f.getAttribute('target')","            },","            fields = [];","","        // Initialize the HTML form properties in case they are","        // not defined in the HTML form.","        io._multi_setAttrs(f, o.id, uri, c.method);","        if (c.data) {","            fields = io._addData(f, c.data);","        }","        if (c.json) {","            fields.push(io._addJSON(f, c.json));","        }","","        // Start polling if a callback is present and the timeout","        // property has been defined.","        if (c.timeout) {","            io._multi_startTimeout(o, c);","        }","","        // Start file upload.","        f.submit();","        io.start(o, c);","        if (c.data) {","            io._removeData(f, fields);","        }","        // Restore HTML form attributes to their original values.","        io._resetAttrs(f, attr);","","        return {","            id: o.id,","            abort: function() {","                o.status = 0;","                o.statusText = 'abort';","                if (Y.one('#io-multi-response-' + o.id)) {","                    io._multi_destroy(o.id, c);","                    io.end(o, c);","                }","                else {","                    return false;","                }","            },","            isInProgress: function() {","                return Y.one('#io-multi-response-' + o.id) ? true : false;","            },","            io: io","        };","    }","});","","var orig_init = Y.IO.prototype._init;","","Y.IO.prototype._init = function(c) {","    orig_init.apply(this, arguments);","","    this.publish('io:response', Y.merge({ broadcast: 1 }, c));","    this.publish('io-trn:response', c);","};","","var orig_upload = Y.IO.prototype.upload;","","/* @param {object} o - transaction object."," * @param {string} uri - qualified path to transaction resource."," * @param {object} c - configuration object for the transaction."," * @return object"," */","Y.IO.prototype.upload = function(o, uri, c) {","    if (!c.multiresponse) {","        return orig_upload.apply(this, arguments);","    }","","    var io = this;","    YUI.Env.io_multi_response_callback[ o.id ] = function(data) {","        if (!data) {","            Y.error('Callback ' + o.id + ' invoked without data.', null, 'io');","            return;","        }","","        // reset timeout","        if (c.timeout) {","            io._clearTimeout(o.id);","            io._multi_startTimeout(o, c);","        }","","        if (c.on && c.on.response) {","            o.c = data;","            io._evt('response', o, c);","        }","    };","","    var callback_value = encodeURIComponent('window.parent.YUI.Env.io_multi_response_callback[' + o.id + ']');","    var callback_arg   = 'callback=' + callback_value;","    if (!c.data) {","        c.data = callback_arg;","    }","    else if (L.isObject(c.data)) {","        c.data.callback = callback_value;","    }","    else {","        c.data = c.data + '&' + callback_arg;","    }","","    if (c.form && !c.form.id) {","        delete c.form;","    }","","    _iframe(o, c, io);","    return io._multi_send(o, uri, c);","};","","if (!YUI.Env.io_multi_response_callback)","{","    YUI.Env.io_multi_response_callback = [];","}","","var orig_io = Y.io;","","/* @param {string} uri - qualified path to transaction resource."," * @param {object} c - configuration object for the transaction."," * @return object"," */","Y.io = function(uri, c) {","    if (c.multiresponse && !c.form) {","        c.form = {","            id:     _form(c),","            upload: true","        };","    }","    else if (c.multiresponse && !c.form.upload) {","        c.form.upload = true;","    }","","    return orig_io.call(this, uri, c);","};","","Y.mix(Y.io, orig_io);","","","}, '@VERSION@', {\"requires\": [\"io-upload-iframe\"], \"optional\": [\"json-stringify\"]});"];
_yuitest_coverage["build/gallery-io-multiresponse/gallery-io-multiresponse.js"].lines = {"1":0,"41":0,"58":0,"59":0,"60":0,"61":0,"62":0,"64":0,"66":0,"78":0,"79":0,"81":0,"82":0,"83":0,"85":0,"86":0,"89":0,"101":0,"102":0,"105":0,"106":0,"107":0,"108":0,"109":0,"111":0,"128":0,"129":0,"130":0,"131":0,"146":0,"148":0,"150":0,"151":0,"152":0,"169":0,"170":0,"171":0,"174":0,"175":0,"190":0,"192":0,"193":0,"196":0,"200":0,"216":0,"228":0,"229":0,"230":0,"232":0,"233":0,"238":0,"239":0,"243":0,"244":0,"245":0,"246":0,"249":0,"251":0,"254":0,"255":0,"256":0,"257":0,"258":0,"261":0,"265":0,"272":0,"274":0,"275":0,"277":0,"278":0,"281":0,"288":0,"289":0,"290":0,"293":0,"294":0,"295":0,"296":0,"297":0,"301":0,"302":0,"303":0,"306":0,"307":0,"308":0,"312":0,"313":0,"314":0,"315":0,"317":0,"318":0,"321":0,"324":0,"325":0,"328":0,"329":0,"332":0,"334":0,"337":0,"343":0,"344":0,"345":0,"350":0,"351":0,"354":0,"357":0};
_yuitest_coverage["build/gallery-io-multiresponse/gallery-io-multiresponse.js"].functions = {"(anonymous 2):66":0,"_iframe:58":0,"_form:78":0,"_addJSON:100":0,"_multi_setAttrs:127":0,"(anonymous 3):149":0,"_multi_startTimeout:145":0,"_multi_destroy:168":0,"(anonymous 4):200":0,"_multi_complete:189":0,"abort:253":0,"isInProgress:264":0,"_multi_send:215":0,"_init:274":0,"]:294":0,"upload:288":0,"io:343":0,"(anonymous 1):1":0};
_yuitest_coverage["build/gallery-io-multiresponse/gallery-io-multiresponse.js"].coveredLines = 106;
_yuitest_coverage["build/gallery-io-multiresponse/gallery-io-multiresponse.js"].coveredFunctions = 18;
_yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 1);
YUI.add('gallery-io-multiresponse', function (Y, NAME) {

/**
 * <p>Extends the IO base class to enable multiple responses using an
 * iframe as the transport medium.</p>
 * 
 * @module gallery-io-multiresponse
 */

/**
 * <p>Extends the IO base class to enable multiple responses using an
 * iframe as the transport medium.  Each response fires the response event.
 * The only events that are fired are the start and end events.</p>
 * 
 * <p>All the YUI 3 IO features are supported, so the request can be sent
 * as either GET (for simple query args) or POST (for anything, even file
 * uploads).  The module uses an iframe to send the request and includes a
 * callback parameter.  (So you cannot include a parameter named
 * <q>callback</q>.)  For each response, the server must send a script
 * block invoking the callback, similar to JSONP.  Unlike JSONP, however,
 * requests can only be made to your own server because the callback will
 * reference <code>window.parent</code>.  In order to trigger script
 * parsing in all browsers, the first chunk of data that the server writes
 * to the connection must be at least 1024 bytes, and it must be part of
 * the body, so you will need to explicitly send an empty head.</p>
 * 
 * <p>Due to the way that the request data is parsed, it is not safe to
 * send JSON-encoded data using the standard YUI 3 IO methods.  However, if
 * you define <code>json</code> in the configuration passed to
 * <code>Y.io()</code>, then the data will be passed to the server under
 * the <code>json</code> parameter.  (If you pass an object, it will be
 * serialized with <code>Y.JSON.stringify()</code>.)
 * 
 * <p>To keep the iframe after it has finished loading, set
 * <code>debug:true</code> in the configuration passed to
 * <code>Y.io()</code>.</p>
 * 
 * @class io~multiresponse
 */

_yuitest_coverfunc("build/gallery-io-multiresponse/gallery-io-multiresponse.js", "(anonymous 1)", 1);
_yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 41);
var L = Y.Lang,
    w = Y.config.win,
    d = Y.config.doc,
    _std = (d.documentMode && d.documentMode >= 8),
    _d = decodeURIComponent;

/**
 * Creates the iframe used in file upload transactions, and binds the
 * response event handler.
 *
 * @method _iframe
 * @private
 * @static
 * @param {object} o Transaction object generated by _iframe().
 * @param {object} c Configuration object passed to YUI.io().
 * @return {void}
 */
_yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 58);
function _iframe(o, c, io) {
    _yuitest_coverfunc("build/gallery-io-multiresponse/gallery-io-multiresponse.js", "_iframe", 58);
_yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 59);
var i = Y.Node.create('<iframe id="io-multi-response-' + o.id + '" name="io-multi-response-' + o.id + '" />');
        _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 60);
i._node.style.position = 'absolute';
        _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 61);
i._node.style.top = '-1000px';
        _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 62);
i._node.style.left = '-1000px';

    _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 64);
Y.one('body').appendChild(i);
    // Bind the onload handler to the iframe to detect the file upload response.
    _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 66);
Y.on("load", function() { _yuitest_coverfunc("build/gallery-io-multiresponse/gallery-io-multiresponse.js", "(anonymous 2)", 66);
io._multi_complete(o, c); }, '#io-multi-response-' + o.id);
}

/**
 * Creates a temporary form, if the caller doesn't provide one.
 *
 * @method _form
 * @private
 * @static
 * @param {object} c Configuration object passed to YUI.io().
 * @return {string} form id
 */
_yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 78);
function _form(c) {
    _yuitest_coverfunc("build/gallery-io-multiresponse/gallery-io-multiresponse.js", "_form", 78);
_yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 79);
var id = Y.guid('io-multi-response-form-'),
        f = Y.Node.create('<form id="' + id + '" name="' + id + '" />');
        _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 81);
f._node.style.position = 'absolute';
        _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 82);
f._node.style.top = '-1000px';
        _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 83);
f._node.style.left = '-1000px';

    _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 85);
Y.one('body').appendChild(f);
    _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 86);
return id;
}

_yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 89);
Y.mix(Y.IO.prototype, {
    /**
     * Adds JSON encoded data to the form.
     * 
     * @method _addJSON
     * @private
     * @static
     * @param {object} f HTML form object.
     * @param {string|object} s The JSON data or object to serialize.
     * @return {array} created fields.
     */
    _addJSON: function(f, s) {
        _yuitest_coverfunc("build/gallery-io-multiresponse/gallery-io-multiresponse.js", "_addJSON", 100);
_yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 101);
if (!Y.Lang.isString(s)) {
            _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 102);
s = Y.JSON.stringify(s);
        }

        _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 105);
var el  = d.createElement('input');
        _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 106);
el.type = 'hidden';
        _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 107);
el.name = 'json';
        _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 108);
el.value = s;
        _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 109);
f.appendChild(el);

        _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 111);
return el;
    },

    /**
     * Sets the appropriate attributes and values to the HTML form, in
     * preparation of a file upload transaction.
     * 
     * @method _multi_setAttrs
     * @private
     * @static
     * @param {object} f HTML form object.
     * @param {object} id The Transaction ID.
     * @param {object} uri Qualified path to transaction resource.
     * @param {string} method POST or GET.
     * @return {void}
     */
    _multi_setAttrs: function(f, id, uri, method) {
        _yuitest_coverfunc("build/gallery-io-multiresponse/gallery-io-multiresponse.js", "_multi_setAttrs", 127);
_yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 128);
f.setAttribute('action', uri);
        _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 129);
f.setAttribute('method', method || 'POST');
        _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 130);
f.setAttribute('target', 'io-multi-response-' + id );
        _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 131);
f.setAttribute(Y.UA.ie && !_std ? 'encoding' : 'enctype', 'multipart/form-data');
    },

    /**
     * Starts timeout count if the configuration object has a defined
     * timeout property.
     *
     * @method _multi_startTimeout
     * @private
     * @static
     * @param {object} o Transaction object generated by _iframe().
     * @param {object} c Configuration object passed to YUI.io().
     * @return {void}
     */
    _multi_startTimeout: function(o, c) {
        _yuitest_coverfunc("build/gallery-io-multiresponse/gallery-io-multiresponse.js", "_multi_startTimeout", 145);
_yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 146);
var io = this;

        _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 148);
io._timeout[o.id] = w.setTimeout(
            function() {
                _yuitest_coverfunc("build/gallery-io-multiresponse/gallery-io-multiresponse.js", "(anonymous 3)", 149);
_yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 150);
o.status = 0;
                _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 151);
o.statusText = 'timeout';
                _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 152);
io.end(o, c);
            }, c.timeout);
    },

    // reuse _clearTimeout()

    /**
     * Destroy the iframe and temp form, if any.
     * 
     * @method _multi_destroy
     * @private
     * @static
     * @param {number} id Transaction id.
     * @param {object} c Configuration object for the transaction.
     * @return {void}
     */
    _multi_destroy: function(id, c) {
        _yuitest_coverfunc("build/gallery-io-multiresponse/gallery-io-multiresponse.js", "_multi_destroy", 168);
_yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 169);
if (!c.debug) {
            _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 170);
Y.Event.purgeElement('#io-multi-response-' + id, false);
            _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 171);
Y.one('body').removeChild(Y.one('#io-multi-response-' + id));
        }

        _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 174);
if (c.form.id.indexOf('io-multi-response-form-') === 0) {
            _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 175);
Y.one('body').removeChild(Y.one('#' + c.form.id));
        }
    },

    /**
     * Bound to the iframe's Load event and processes the response data.
     * 
     * @method _multi_complete
     * @private
     * @static
     * @param {o} o The transaction object
     * @param {object} c Configuration object for the transaction.
     * @return {void}
     */
    _multi_complete: function(o, c) {
        _yuitest_coverfunc("build/gallery-io-multiresponse/gallery-io-multiresponse.js", "_multi_complete", 189);
_yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 190);
var io = this;

        _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 192);
if (c.timeout) {
            _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 193);
io._clearTimeout(o.id);
        }

        _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 196);
io.end(o, c);
        // The transaction is complete, so call _multi_destroy to remove
        // the event listener bound to the iframe, and then
        // destroy the iframe.
        _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 200);
w.setTimeout( function() { _yuitest_coverfunc("build/gallery-io-multiresponse/gallery-io-multiresponse.js", "(anonymous 4)", 200);
io._multi_destroy(o.id, c); }, 0);
    },

    /**
     * Uploads HTML form data, inclusive of files/attachments, using the
     * iframe created in _iframe to facilitate the transaction.
     * 
     * @method _multi_send
     * @private
     * @static
     * @param {o} o The transaction object
     * @param {object} uri Qualified path to transaction resource.
     * @param {object} c Configuration object for the transaction.
     * @return {void}
     */
    _multi_send: function(o, uri, c) {
        _yuitest_coverfunc("build/gallery-io-multiresponse/gallery-io-multiresponse.js", "_multi_send", 215);
_yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 216);
var io = this,
            f = (typeof c.form.id === 'string') ? d.getElementById(c.form.id) : c.form.id,
            // Track original HTML form attribute values.
            attr = {
                method: f.getAttribute('method'),
                action: f.getAttribute('action'),
                target: f.getAttribute('target')
            },
            fields = [];

        // Initialize the HTML form properties in case they are
        // not defined in the HTML form.
        _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 228);
io._multi_setAttrs(f, o.id, uri, c.method);
        _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 229);
if (c.data) {
            _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 230);
fields = io._addData(f, c.data);
        }
        _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 232);
if (c.json) {
            _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 233);
fields.push(io._addJSON(f, c.json));
        }

        // Start polling if a callback is present and the timeout
        // property has been defined.
        _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 238);
if (c.timeout) {
            _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 239);
io._multi_startTimeout(o, c);
        }

        // Start file upload.
        _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 243);
f.submit();
        _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 244);
io.start(o, c);
        _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 245);
if (c.data) {
            _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 246);
io._removeData(f, fields);
        }
        // Restore HTML form attributes to their original values.
        _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 249);
io._resetAttrs(f, attr);

        _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 251);
return {
            id: o.id,
            abort: function() {
                _yuitest_coverfunc("build/gallery-io-multiresponse/gallery-io-multiresponse.js", "abort", 253);
_yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 254);
o.status = 0;
                _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 255);
o.statusText = 'abort';
                _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 256);
if (Y.one('#io-multi-response-' + o.id)) {
                    _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 257);
io._multi_destroy(o.id, c);
                    _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 258);
io.end(o, c);
                }
                else {
                    _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 261);
return false;
                }
            },
            isInProgress: function() {
                _yuitest_coverfunc("build/gallery-io-multiresponse/gallery-io-multiresponse.js", "isInProgress", 264);
_yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 265);
return Y.one('#io-multi-response-' + o.id) ? true : false;
            },
            io: io
        };
    }
});

_yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 272);
var orig_init = Y.IO.prototype._init;

_yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 274);
Y.IO.prototype._init = function(c) {
    _yuitest_coverfunc("build/gallery-io-multiresponse/gallery-io-multiresponse.js", "_init", 274);
_yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 275);
orig_init.apply(this, arguments);

    _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 277);
this.publish('io:response', Y.merge({ broadcast: 1 }, c));
    _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 278);
this.publish('io-trn:response', c);
};

_yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 281);
var orig_upload = Y.IO.prototype.upload;

/* @param {object} o - transaction object.
 * @param {string} uri - qualified path to transaction resource.
 * @param {object} c - configuration object for the transaction.
 * @return object
 */
_yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 288);
Y.IO.prototype.upload = function(o, uri, c) {
    _yuitest_coverfunc("build/gallery-io-multiresponse/gallery-io-multiresponse.js", "upload", 288);
_yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 289);
if (!c.multiresponse) {
        _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 290);
return orig_upload.apply(this, arguments);
    }

    _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 293);
var io = this;
    _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 294);
YUI.Env.io_multi_response_callback[ o.id ] = function(data) {
        _yuitest_coverfunc("build/gallery-io-multiresponse/gallery-io-multiresponse.js", "]", 294);
_yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 295);
if (!data) {
            _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 296);
Y.error('Callback ' + o.id + ' invoked without data.', null, 'io');
            _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 297);
return;
        }

        // reset timeout
        _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 301);
if (c.timeout) {
            _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 302);
io._clearTimeout(o.id);
            _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 303);
io._multi_startTimeout(o, c);
        }

        _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 306);
if (c.on && c.on.response) {
            _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 307);
o.c = data;
            _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 308);
io._evt('response', o, c);
        }
    };

    _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 312);
var callback_value = encodeURIComponent('window.parent.YUI.Env.io_multi_response_callback[' + o.id + ']');
    _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 313);
var callback_arg   = 'callback=' + callback_value;
    _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 314);
if (!c.data) {
        _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 315);
c.data = callback_arg;
    }
    else {_yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 317);
if (L.isObject(c.data)) {
        _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 318);
c.data.callback = callback_value;
    }
    else {
        _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 321);
c.data = c.data + '&' + callback_arg;
    }}

    _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 324);
if (c.form && !c.form.id) {
        _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 325);
delete c.form;
    }

    _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 328);
_iframe(o, c, io);
    _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 329);
return io._multi_send(o, uri, c);
};

_yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 332);
if (!YUI.Env.io_multi_response_callback)
{
    _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 334);
YUI.Env.io_multi_response_callback = [];
}

_yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 337);
var orig_io = Y.io;

/* @param {string} uri - qualified path to transaction resource.
 * @param {object} c - configuration object for the transaction.
 * @return object
 */
_yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 343);
Y.io = function(uri, c) {
    _yuitest_coverfunc("build/gallery-io-multiresponse/gallery-io-multiresponse.js", "io", 343);
_yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 344);
if (c.multiresponse && !c.form) {
        _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 345);
c.form = {
            id:     _form(c),
            upload: true
        };
    }
    else {_yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 350);
if (c.multiresponse && !c.form.upload) {
        _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 351);
c.form.upload = true;
    }}

    _yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 354);
return orig_io.call(this, uri, c);
};

_yuitest_coverline("build/gallery-io-multiresponse/gallery-io-multiresponse.js", 357);
Y.mix(Y.io, orig_io);


}, '@VERSION@', {"requires": ["io-upload-iframe"], "optional": ["json-stringify"]});
