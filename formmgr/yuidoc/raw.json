{"majorversion": 3, "classmap": {"FormManager": {"name": "FormManager", "constructors": [{"params": [{"type": "String", "name": "form_name", "description": "  The name attribute of the HTML form."}, {"type": "Object", "name": "config", "description": "  Configuration.\n<code>status_node</code> is an optional element in which to display\noverall status.  <code>default_value_map</code> is an optional\nmapping of form element names to default values."}], "description": "<p>FormManager provides support for initializing a form, pre-validating\nuser input, and displaying messages returned by the server.</p>\n<p><strong>Required Markup Structure</strong></p>\n<p>Each element (or tighly coupled set of elements) must be contained by\nan element that has the CSS class <code>formmgr-row</code>.  Within each\nrow, validation messages are displayed inside the container with CSS\nclass <code>formmgr-message-text</code>.\n<p>When a message is displayed inside a row, the CSS class\n<code>formmgr-has{type}</code> is placed on the row container and the\ncontaining fieldset (if any), where <code>{type}</code> is the message\ntype passed to <code>displayMessage()</code>.</p>\n<p><strong>Initializing the Form</strong></p>\n<p>Default values can be either encoded in the markup or passed to the\nFormManager constructor via <code>config.default_value_map</code>.  (The\nformer method is obviously better for progressive enhancement.)</p>\n<p><code>prepareForm()</code> must be called before the form is\ndisplayed.  To initialize focus to the first element in a form, call\n<code>initFocus()</code>.  If the form is in an overlay, you can delay\nthese calls until just before showing the overlay.</p>\n<p>The default values passed to the constructor are inserted by\n<code>populateForm()</code>.  (This is automatically called by\n<code>prepareForm()</code>.)</p>\n<p><strong>Displaying Messages</strong></p>\n<p>To display a message for a single form row, call\n<code>displayMessage()</code>.  To display a message for the form in\ngeneral, call <code>displayFormMessage()</code>.  These functions can be\nused for initializing the error display when the page loads, for\ndisplaying the results of pre-validation, and for displaying the results\nof submitting a form via XHR.</p>\n<p><strong>Specifying Validations</strong></p>\n<p>The following classes can be applied to a form element for\npre-validation:</p>\n<dl>\n<dt><code>yiv-required</code></dt>\n<dd>Value must not be empty.</dd>\n<dt><code>yiv-length:[x,y]</code></dt>\n<dd>String must be at least x characters and at most y characters.\nAt least one of x and y must be specified.</dd>\n<dt><code>yiv-integer:[x,y]</code></dt>\n<dd>The integer value must be at least x and at most y.\nx and y are both optional.</dd>\n<dt><code>yiv-decimal:[x,y]</code></dt>\n<dd>The decimal value must be at least x and at most y.  Exponents are\nnot allowed.  x and y are both optional.</dd>\n</dl>\n<p>If we ever need to allow exponents, we can use yiv-float.</p>\n<p>The following functions allow additional pre-validation to be\nattached to individual form elements:</p>\n<dl>\n<dt><code>setRegex()</code></dt>\n<dd>Sets the regular expression that must match in order for the value\nto be acceptable.</dd>\n<dt><code>setFunction()</code></dt>\n<dd>Sets the function that must return true in order for the value to\nbe acceptable.  The function is called in the scope of the Form\nobject with the arguments:  the form and the element.</dd>\n</dl>\n<p><code>setErrorMessage()</code> specifies the error message to be\ndisplayed when a pre-validation check fails.  The valid error message\ntypes are:</p>\n<dl>\n<dt><code>required</code></dt>\n<dt><code>min_length</code></dt>\n<dd><code>{min}</code> and <code>{max}</code> are replaced</dd>\n<dt><code>max_length</code></dt>\n<dd><code>{min}</code> and <code>{max}</code> are replaced</dd>\n<dt><code>integer</code></dt>\n<dd><code>{min}</code> and <code>{max}</code> are replaced</dd>\n<dt><code>decimal</code></dt>\n<dd><code>{min}</code> and <code>{max}</code> are replaced</dd>\n<dt><code>regex</code></dt>\n</dl>\n<p>Functions are expected to call <code>displayMessage()</code>\ndirectly.</p>\n<p>More complex pre-validations can be added by overriding\n<code>postValidateForm()</code>, described below.</p>\n<p>Derived classes may also override the following functions:</p>\n<dl>\n<dt><code>prePrepareForm</code>(arguments passed to prepareForm)</dt>\n<dd>Called before filling in default values for the form elements.\nReturn false to cancel dialog.</dd>\n<dt><code>postPrepareForm</code>(arguments passed to prepareForm)</dt>\n<dd>Called after filling in default values for the form elements.</dd>\n<dt><code>postValidateForm</code>(form)</dt>\n<dd>Called after performing the basic pre-validations.  Returns\ntrue if the form contents are acceptable.  Reports error if there\nis a problem.</dd>\n</dl>"}], "namespace": "", "module": "gallery-formmgr", "properties": {"Y.FormManager.status_none_class": {"type": "{String}", "description": "The CSS class placed on <code>status_node</code> when there is nothing to say.", "guessedname": "status_none_class", "guessedtype": "property"}, "Y.FormManager.row_marker_class": {"type": "{String}", "description": "The CSS class which marks each row of the form.  Typically, each element\n(or a very tightly coupled set of elements) is placed in a separate row.", "guessedname": "row_marker_class", "guessedtype": "property"}, "Y.FormManager.row_status_prefix": {"type": "{String}", "description": "The prefix for all CSS classes placed on a form row when pre-validation\nfails.  The full CSS class is formed by appending the value from\n<code>Y.FormManager.status_order</code>.", "guessedname": "row_status_prefix", "guessedtype": "property"}, "Y.FormManager.status_success_class": {"type": "{String}", "description": "The CSS class placed on <code>status_node</code> when pre-validation succeeeds.", "guessedname": "status_success_class", "guessedtype": "property"}, "Y.FormManager.status_marker_class": {"type": "{String}", "description": "The CSS class which marks the container for the status message within a\nrow of the form.", "guessedname": "status_marker_class", "guessedtype": "property"}, "Y.FormManager.status_failure_class": {"type": "{String}", "description": "The CSS class placed on <code>status_node</code> when pre-validation fails.", "guessedname": "status_failure_class", "guessedtype": "property"}}, "methods": {"prepareForm": {"description": "Prepare the form for display.", "guessedname": "prepareForm", "guessedtype": "function"}, "enableForm": {"description": "Form is disabled during submission", "guessedname": "enableForm", "guessedtype": "function"}, "setFunction": {"description": "Validation control", "guessedname": "setFunction", "guessedtype": "function"}, "registerButton": {"description": "Register buttons that should be disabled during submission.", "guessedname": "registerButton", "guessedtype": "function"}, "getForm": {"description": "Access functions.", "guessedname": "getForm", "guessedtype": "function"}, "hasMessages": {"description": "Message display", "guessedname": "hasMessages", "guessedtype": "function"}, "statusTakesPrecendence": {"return": {"type": "boolean", "description": "true if <code>new_status</code> takes precedence over <code>orig_status</code>"}, "description": "Compare two status values.", "static": "", "guessedname": "statusTakesPrecendence", "guessedtype": "function", "params": [{"type": "String", "name": "orig_status", "description": "  The name of the original status value."}, {"type": "String", "name": "new_status", "description": "  The name of the new status value."}]}, "getStatusPrecedence": {"return": {"type": "int", "description": "The position in the <code>status_order</code> array."}, "description": "Get the precedence of the given status name.", "static": "", "guessedname": "getStatusPrecedence", "guessedtype": "function", "params": [{"type": "String", "name": "status", "description": "  The name of the status value."}]}, "clearForm": {"description": "Clear all values.", "guessedname": "clearForm", "guessedtype": "function"}, "isChanged": {"description": "Returns false if all form elements have their default values.", "guessedname": "isChanged", "guessedtype": "function"}, "validateForm": {"description": "Validate the form.", "guessedname": "validateForm", "guessedtype": "function"}, "populateForm": {"description": "Reset all values to their defaults.", "guessedname": "populateForm", "guessedtype": "function"}, "initFocus": {"description": "Set focus to first viable element.", "guessedname": "initFocus", "guessedtype": "function"}}, "file": "FormManager.js", "shortname": "FormManager", "configs": {"Y.FormManager.Strings": {"type": "{Object}", "static": "", "description": "<p>Map of localizable strings used by pre-validation.</p>\n<dl>\n<dt><code>validation_error</code></dt>\n<dd>Displayed in <code>status_node</code> by <code>notifyErrors()</code> when pre-validation fails.</dd>\n<dt><code>required_string</code></dt>\n<dd>Displayed when <code>yiv-required</code> fails on an input field.</dd>\n<dt><code>required_menu</code></dt>\n<dd>Displayed when <code>yiv-required</code> fails on a select element.</dd>\n<dt><code>length_too_short</code>, <code>length_too_long</code>, <code>length_out_of_range</code></dt>\n<dd>Displayed when <code>yiv-length</code> fails on an input field.</dd>\n<dt><code>integer</code>, <code>integer_too_small</code>, <code>integer_too_large</code>, <code>integer_out_of_range</code></dt>\n<dd>Displayed when <code>yiv-integer</code> fails on an input field.</dd>\n<dt><code>decimal</code>, <code>decimal_too_small</code>, <code>decimal_too_large</code>, <code>decimal_out_of_range</code></dt>\n<dd>Displayed when <code>yiv-decimal</code> fails on an input field.</dd>\n</dl>", "guessedname": "Strings", "guessedtype": "property"}, "Y.FormManager.integer_value_re": {"type": "{RegExp}", "static": "", "description": "Regular expression used to determine if a value is an integer.\nThis can be localized, e.g., allow for thousands separator.", "guessedname": "integer_value_re", "guessedtype": "property"}, "Y.FormManager.decimal_value_re": {"type": "{RegExp}", "static": "", "description": "Regular expression used to determine if a value is a decimal number.\nThis can be localized, e.g., use the correct decimal separator.", "guessedname": "decimal_value_re", "guessedtype": "property"}, "Y.FormManager.status_order": {"type": "{Array}", "static": "", "description": "<p>Names of supported status values, highest precedence first.  Default:\n<code>[ 'error', 'warn', 'success', 'info' ]</code></p>\n<p>This is static because it links to CSS rules that define the\nappearance of each status type:  .formmgr-has{status}</p>", "guessedname": "status_order", "guessedtype": "property"}}, "description": "<p>FormManager provides support for initializing a form, pre-validating\nuser input, and displaying messages returned by the server.</p>\n<p><strong>Required Markup Structure</strong></p>\n<p>Each element (or tighly coupled set of elements) must be contained by\nan element that has the CSS class <code>formmgr-row</code>.  Within each\nrow, validation messages are displayed inside the container with CSS\nclass <code>formmgr-message-text</code>.\n<p>When a message is displayed inside a row, the CSS class\n<code>formmgr-has{type}</code> is placed on the row container and the\ncontaining fieldset (if any), where <code>{type}</code> is the message\ntype passed to <code>displayMessage()</code>.</p>\n<p><strong>Initializing the Form</strong></p>\n<p>Default values can be either encoded in the markup or passed to the\nFormManager constructor via <code>config.default_value_map</code>.  (The\nformer method is obviously better for progressive enhancement.)</p>\n<p><code>prepareForm()</code> must be called before the form is\ndisplayed.  To initialize focus to the first element in a form, call\n<code>initFocus()</code>.  If the form is in an overlay, you can delay\nthese calls until just before showing the overlay.</p>\n<p>The default values passed to the constructor are inserted by\n<code>populateForm()</code>.  (This is automatically called by\n<code>prepareForm()</code>.)</p>\n<p><strong>Displaying Messages</strong></p>\n<p>To display a message for a single form row, call\n<code>displayMessage()</code>.  To display a message for the form in\ngeneral, call <code>displayFormMessage()</code>.  These functions can be\nused for initializing the error display when the page loads, for\ndisplaying the results of pre-validation, and for displaying the results\nof submitting a form via XHR.</p>\n<p><strong>Specifying Validations</strong></p>\n<p>The following classes can be applied to a form element for\npre-validation:</p>\n<dl>\n<dt><code>yiv-required</code></dt>\n<dd>Value must not be empty.</dd>\n<dt><code>yiv-length:[x,y]</code></dt>\n<dd>String must be at least x characters and at most y characters.\nAt least one of x and y must be specified.</dd>\n<dt><code>yiv-integer:[x,y]</code></dt>\n<dd>The integer value must be at least x and at most y.\nx and y are both optional.</dd>\n<dt><code>yiv-decimal:[x,y]</code></dt>\n<dd>The decimal value must be at least x and at most y.  Exponents are\nnot allowed.  x and y are both optional.</dd>\n</dl>\n<p>If we ever need to allow exponents, we can use yiv-float.</p>\n<p>The following functions allow additional pre-validation to be\nattached to individual form elements:</p>\n<dl>\n<dt><code>setRegex()</code></dt>\n<dd>Sets the regular expression that must match in order for the value\nto be acceptable.</dd>\n<dt><code>setFunction()</code></dt>\n<dd>Sets the function that must return true in order for the value to\nbe acceptable.  The function is called in the scope of the Form\nobject with the arguments:  the form and the element.</dd>\n</dl>\n<p><code>setErrorMessage()</code> specifies the error message to be\ndisplayed when a pre-validation check fails.  The valid error message\ntypes are:</p>\n<dl>\n<dt><code>required</code></dt>\n<dt><code>min_length</code></dt>\n<dd><code>{min}</code> and <code>{max}</code> are replaced</dd>\n<dt><code>max_length</code></dt>\n<dd><code>{min}</code> and <code>{max}</code> are replaced</dd>\n<dt><code>integer</code></dt>\n<dd><code>{min}</code> and <code>{max}</code> are replaced</dd>\n<dt><code>decimal</code></dt>\n<dd><code>{min}</code> and <code>{max}</code> are replaced</dd>\n<dt><code>regex</code></dt>\n</dl>\n<p>Functions are expected to call <code>displayMessage()</code>\ndirectly.</p>\n<p>More complex pre-validations can be added by overriding\n<code>postValidateForm()</code>, described below.</p>\n<p>Derived classes may also override the following functions:</p>\n<dl>\n<dt><code>prePrepareForm</code>(arguments passed to prepareForm)</dt>\n<dd>Called before filling in default values for the form elements.\nReturn false to cancel dialog.</dd>\n<dt><code>postPrepareForm</code>(arguments passed to prepareForm)</dt>\n<dd>Called after filling in default values for the form elements.</dd>\n<dt><code>postValidateForm</code>(form)</dt>\n<dd>Called after performing the basic pre-validations.  Returns\ntrue if the form contents are acceptable.  Reports error if there\nis a problem.</dd>\n</dl>"}}, "version": "1.0.0", "modules": {"gallery-formmgr": {"description": "<p>FormManager provides support for initializing a form, pre-validating\nuser input, and displaying messages returned by the server.</p>\n<p><strong>Required Markup Structure</strong></p>\n<p>Each element (or tighly coupled set of elements) must be contained by\nan element that has the CSS class <code>formmgr-row</code>.  Within each\nrow, validation messages are displayed inside the container with CSS\nclass <code>formmgr-message-text</code>.\n<p>When a message is displayed inside a row, the CSS class\n<code>formmgr-has{type}</code> is placed on the row container and the\ncontaining fieldset (if any), where <code>{type}</code> is the message\ntype passed to <code>displayMessage()</code>.</p>\n<p><strong>Initializing the Form</strong></p>\n<p>Default values can be either encoded in the markup or passed to the\nFormManager constructor via <code>config.default_value_map</code>.  (The\nformer method is obviously better for progressive enhancement.)</p>\n<p><code>prepareForm()</code> must be called before the form is\ndisplayed.  To initialize focus to the first element in a form, call\n<code>initFocus()</code>.  If the form is in an overlay, you can delay\nthese calls until just before showing the overlay.</p>\n<p>The default values passed to the constructor are inserted by\n<code>populateForm()</code>.  (This is automatically called by\n<code>prepareForm()</code>.)</p>\n<p><strong>Displaying Messages</strong></p>\n<p>To display a message for a single form row, call\n<code>displayMessage()</code>.  To display a message for the form in\ngeneral, call <code>displayFormMessage()</code>.  These functions can be\nused for initializing the error display when the page loads, for\ndisplaying the results of pre-validation, and for displaying the results\nof submitting a form via XHR.</p>\n<p><strong>Specifying Validations</strong></p>\n<p>The following classes can be applied to a form element for\npre-validation:</p>\n<dl>\n<dt><code>yiv-required</code></dt>\n<dd>Value must not be empty.</dd>\n<dt><code>yiv-length:[x,y]</code></dt>\n<dd>String must be at least x characters and at most y characters.\nAt least one of x and y must be specified.</dd>\n<dt><code>yiv-integer:[x,y]</code></dt>\n<dd>The integer value must be at least x and at most y.\nx and y are both optional.</dd>\n<dt><code>yiv-decimal:[x,y]</code></dt>\n<dd>The decimal value must be at least x and at most y.  Exponents are\nnot allowed.  x and y are both optional.</dd>\n</dl>\n<p>If we ever need to allow exponents, we can use yiv-float.</p>\n<p>The following functions allow additional pre-validation to be\nattached to individual form elements:</p>\n<dl>\n<dt><code>setRegex()</code></dt>\n<dd>Sets the regular expression that must match in order for the value\nto be acceptable.</dd>\n<dt><code>setFunction()</code></dt>\n<dd>Sets the function that must return true in order for the value to\nbe acceptable.  The function is called in the scope of the Form\nobject with the arguments:  the form and the element.</dd>\n</dl>\n<p><code>setErrorMessage()</code> specifies the error message to be\ndisplayed when a pre-validation check fails.  The valid error message\ntypes are:</p>\n<dl>\n<dt><code>required</code></dt>\n<dt><code>min_length</code></dt>\n<dd><code>{min}</code> and <code>{max}</code> are replaced</dd>\n<dt><code>max_length</code></dt>\n<dd><code>{min}</code> and <code>{max}</code> are replaced</dd>\n<dt><code>integer</code></dt>\n<dd><code>{min}</code> and <code>{max}</code> are replaced</dd>\n<dt><code>decimal</code></dt>\n<dd><code>{min}</code> and <code>{max}</code> are replaced</dd>\n<dt><code>regex</code></dt>\n</dl>\n<p>Functions are expected to call <code>displayMessage()</code>\ndirectly.</p>\n<p>More complex pre-validations can be added by overriding\n<code>postValidateForm()</code>, described below.</p>\n<p>Derived classes may also override the following functions:</p>\n<dl>\n<dt><code>prePrepareForm</code>(arguments passed to prepareForm)</dt>\n<dd>Called before filling in default values for the form elements.\nReturn false to cancel dialog.</dd>\n<dt><code>postPrepareForm</code>(arguments passed to prepareForm)</dt>\n<dd>Called after filling in default values for the form elements.</dd>\n<dt><code>postValidateForm</code>(form)</dt>\n<dd>Called after performing the basic pre-validations.  Returns\ntrue if the form contents are acceptable.  Reports error if there\nis a problem.</dd>\n</dl>", "submodules": [], "classlist": ["FormManager"], "filelist": ["FormManager.js"], "subdata": {}, "name": "gallery-formmgr"}}, "filemap": {"FormManager.js": {"classlist": ["FormManager"], "name": "FormManager.js", "module": "gallery-formmgr"}}}