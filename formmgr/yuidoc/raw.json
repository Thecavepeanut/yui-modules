{"majorversion": 3, "classmap": {"FormManager": {"name": "FormManager", "constructors": [{"params": [{"type": "String", "name": "form_name", "description": "  The name attribute of the HTML form."}, {"type": "Object", "name": "config", "description": "  Configuration.\n<code>status_node</code> is an optional element in which to display\noverall status.  <code>default_value_map</code> is an optional\nmapping of form element names to default values.  Default values\nencoded in the markup will be merged into this map, but values\npassed to the constructor will take precedence."}], "description": "<p>FormManager provides support for initializing a form, pre-validating\nuser input, and displaying messages returned by the server.</p>\n<p><strong>Required Markup Structure</strong></p>\n<p>Each element (or tighly coupled set of elements) must be contained by\nan element that has the CSS class <code>formmgr-row</code>.  Within each\nrow, validation messages are displayed inside the container with CSS\nclass <code>formmgr-message-text</code>.\n<p>When a message is displayed inside a row, the CSS class\n<code>formmgr-has{type}</code> is placed on the row container and the\ncontaining fieldset (if any), where <code>{type}</code> is the message\ntype passed to <code>displayMessage()</code>.</p>\n<p><strong>Initializing the Form</strong></p>\n<p>Default values can be either encoded in the markup or passed to the\nFormManager constructor via <code>config.default_value_map</code>.  (The\nformer method is obviously better for progressive enhancement.)  The\nvalues passed to the constructor override the values encoded in the\nmarkup.</p>\n<p><code>prepareForm()</code> must be called before the form is\ndisplayed.  To initialize focus to the first element in a form, call\n<code>initFocus()</code>.  If the form is in an overlay, you can delay\nthese calls until just before showing the overlay.</p>\n<p>The default values passed to the constructor are inserted by\n<code>populateForm()</code>.  (This is automatically called by\n<code>prepareForm()</code>.)</p>\n<p><strong>Displaying Messages</strong></p>\n<p>To display a message for a single form row, call\n<code>displayMessage()</code>.  To display a message for the form in\ngeneral, call <code>displayFormMessage()</code>.  These functions can be\nused for initializing the error display when the page loads, for\ndisplaying the results of pre-validation, and for displaying the results\nof submitting a form via XHR.</p>\n<p><strong>Specifying Validations</strong></p>\n<p>The following classes can be applied to a form element for\npre-validation:</p>\n<dl>\n<dt><code>yiv-required</code></dt>\n<dd>Value must not be empty.</dd>\n<dt><code>yiv-length:[x,y]</code></dt>\n<dd>String must be at least x characters and at most y characters.\nAt least one of x and y must be specified.</dd>\n<dt><code>yiv-integer:[x,y]</code></dt>\n<dd>The integer value must be at least x and at most y.\nx and y are both optional.</dd>\n<dt><code>yiv-decimal:[x,y]</code></dt>\n<dd>The decimal value must be at least x and at most y.  Exponents are\nnot allowed.  x and y are both optional.</dd>\n</dl>\n<p>If we ever need to allow exponents, we can use yiv-float.</p>\n<p>The following functions allow additional pre-validation to be\nattached to individual form elements:</p>\n<dl>\n<dt><code>setRegex()</code></dt>\n<dd>Sets the regular expression that must match in order for the value\nto be acceptable.</dd>\n<dt><code>setFunction()</code></dt>\n<dd>Sets the function that must return true in order for the value to\nbe acceptable.  The function is called in the scope of the Form\nobject with the arguments:  the form and the element.</dd>\n</dl>\n<p><code>setErrorMessages()</code> specifies the error message to be\ndisplayed when a pre-validation check fails.</p>\n<p>Functions are expected to call <code>displayMessage()</code>\ndirectly.</p>\n<p>More complex pre-validations can be added by overriding\n<code>postValidateForm()</code>, described below.</p>\n<p>Derived classes may also override the following functions:</p>\n<dl>\n<dt><code>prePrepareForm</code>(arguments passed to prepareForm)</dt>\n<dd>Called before filling in default values for the form elements.\nReturn false to cancel dialog.</dd>\n<dt><code>postPrepareForm</code>(arguments passed to prepareForm)</dt>\n<dd>Called after filling in default values for the form elements.</dd>\n<dt><code>postValidateForm</code>(form)</dt>\n<dd>Called after performing the basic pre-validations.  Returns\ntrue if the form contents are acceptable.  Reports error if there\nis a problem.</dd>\n</dl>"}], "namespace": "", "module": "gallery-formmgr", "properties": {"Y.FormManager.status_none_class": {"type": "{String}", "description": "The CSS class placed on <code>status_node</code> when it is empty.", "guessedname": "status_none_class", "guessedtype": "property"}, "Y.FormManager.row_marker_class": {"type": "{String}", "description": "The CSS class which marks each row of the form.  Typically, each element\n(or a very tightly coupled set of elements) is placed in a separate row.", "guessedname": "row_marker_class", "guessedtype": "property"}, "Y.FormManager.row_status_prefix": {"type": "{String}", "description": "The prefix for all CSS classes placed on a form row when pre-validation\nfails.  The full CSS class is formed by appending the value from\n<code>Y.FormManager.status_order</code>.", "guessedname": "row_status_prefix", "guessedtype": "property"}, "Y.FormManager.status_success_class": {"type": "{String}", "description": "The CSS class placed on <code>status_node</code> when\n<code>displayFormMessage()</code> is called with\n<code>error=false</code>.", "guessedname": "status_success_class", "guessedtype": "property"}, "Y.FormManager.status_marker_class": {"type": "{String}", "description": "The CSS class which marks the container for the status message within a\nrow of the form.", "guessedname": "status_marker_class", "guessedtype": "property"}, "Y.FormManager.status_failure_class": {"type": "{String}", "description": "The CSS class placed on <code>status_node</code> when\n<code>displayFormMessage()</code> is called with\n<code>error=true</code>.", "guessedname": "status_failure_class", "guessedtype": "property"}}, "methods": {"registerButton": {"params": [{"type": "String|Object", "name": "el", "description": "  The selector for the element or the element itself"}], "description": "Register a button that can be disabled.  Buttons contained within\nthe form DOM element are automatically registered.", "guessedname": "registerButton", "guessedtype": "function"}, "postValidateForm": {"return": {"type": "boolean", "description": "<code>false</code> if validation fails"}, "description": "Hook called at the end of <code>validateForm()</code>.  This is the\nbest place to put holistic validations that touch multiple form\nelements.", "guessedname": "postValidateForm", "guessedtype": "function"}, "getForm": {"return": {"type": "DOM", "description": "The form DOM element."}, "guessedname": "getForm", "guessedtype": "function"}, "hasFileInputs": {"return": {"type": "boolean", "description": "<code>true</code> if the form contains file inputs.  These require special treatment when submitting via XHR."}, "guessedname": "hasFileInputs", "guessedtype": "function"}, "Y.FormManager.validateFromCSSData": {"return": {"type": "Object} Status:\n<dl>\n<dt>keepGoing</dt>\n<dd>{Boolean} <code>true</code> if further validation should be done.</dd>\n<dt>error</dt>\n<dd>{String", "description": "The error message, if any.</dd>\n</dl>"}, "description": "Validate an input based on its CSS data.", "static": "", "guessedname": "validateFromCSSData", "guessedtype": "function", "params": [{"type": "DOM Element", "name": "e", "description": "  The field to validate."}]}, "setRegex": {"params": [{"type": "String|Object", "name": "id", "description": "  The selector for the element or the element itself"}, {"type": "String|RegExp", "name": "regex", "description": "  The regular expression to use"}, {"type": "String", "name": "flags", "description": "  If regex is a String, these are the flags used to construct a RegExp."}], "description": "<p>Set the regular expression used to validate the field value.</p>\n<p><strong>Since there is no default message for failed regular\nexpression validation, this function will complain if you have not\nalready called <code>setErrorMessages()</code> or\n<code>addErrorMessage</code> to specify an error message.</strong></p>", "guessedname": "setRegex", "guessedtype": "function"}, "enableForm": {"description": "Enable all the registered buttons.", "guessedname": "enableForm", "guessedtype": "function"}, "setErrorMessages": {"params": [{"type": "String|Object", "name": "id", "description": "  The selector for the element or the element itself"}, {"type": "Object", "name": "map", "description": "  Map of error types to error messages."}], "description": "<p>Set the error messages for a form element.  This can be used to\noverride the default messages for individual elements</p>\n<p>The valid error types are:</p>\n<dl>\n<dt><code>required</code></dt>\n<dt><code>min_length</code></dt>\n<dd><code>{min}</code> and <code>{max}</code> are replaced</dd>\n<dt><code>max_length</code></dt>\n<dd><code>{min}</code> and <code>{max}</code> are replaced</dd>\n<dt><code>integer</code></dt>\n<dd><code>{min}</code> and <code>{max}</code> are replaced</dd>\n<dt><code>decimal</code></dt>\n<dd><code>{min}</code> and <code>{max}</code> are replaced</dd>\n<dt><code>regex</code></dt>\n<dd>This <string>must</strong> be set for elements which validate with regular expressions.</dd>\n</dl>", "guessedname": "setErrorMessages", "guessedtype": "function"}, "setFormEnabled": {"params": [{"type": "boolean", "name": "enabled", "description": "  <code>true</code> to enable the form, <code>false</code> to disable the form"}], "description": "Set the enabled state all the registered buttons.", "guessedname": "setFormEnabled", "guessedtype": "function"}, "Y.FormManager.getStatusPrecedence": {"return": {"type": "int", "description": "The position in the <code>status_order</code> array."}, "description": "Get the precedence of the given status name.", "static": "", "guessedname": "getStatusPrecedence", "guessedtype": "function", "params": [{"type": "String", "name": "status", "description": "  The name of the status value."}]}, "Y.FormManager.getElementStatus": {"return": {"type": "mixed", "description": "The status (String) or <code>false</code>."}, "description": "Get the status of the given fieldset or form row.", "static": "", "guessedname": "getElementStatus", "guessedtype": "function", "params": [{"type": "String|Object", "name": "e", "description": "  The descriptor or DOM element."}]}, "setFunction": {"params": [{"type": "String|Object", "name": "id", "description": "  The selector for the element or the element itself"}, {"type": "Function|String|Object}\nThe function to call after basic validations succeed.  If this\nis a String, it is resolved in the scope of the FormManager\nobject.  If this is an object, it must be <code>{fn:,\nscope:", "name": "f", "description": " </code>.  The function will then be invoked in the\nspecified scope."}], "description": "Set the validation function for a form element.", "guessedname": "setFunction", "guessedtype": "function"}, "isFormEnabled": {"return": {"type": "boolean", "description": "<code>true</code> if form is enabled"}, "guessedname": "isFormEnabled", "guessedtype": "function"}, "Y.FormManager.cleanValues": {"return": {"type": "boolean", "description": "<code>true</code> if there are any file inputs."}, "description": "Trim leading and trailing whitespace from the specified fields.", "static": "", "guessedname": "cleanValues", "guessedtype": "function", "params": [{"type": "Array|NodeList", "name": "e", "description": "  The fields to clean."}]}, "clearForm": {"description": "Reset all values in the form to the defaults specified in the markup.", "guessedname": "clearForm", "guessedtype": "function"}, "prepareForm": {"return": {"type": "boolean", "description": "<code>true</code> if both pre & post hooks are happy"}, "description": "Prepare the form for display.", "guessedname": "prepareForm", "guessedtype": "function"}, "setDefaultValues": {"params": [{"type": "Object", "name": "default_value_map", "description": "  Mapping of form element names to values."}], "description": "Set the default values for all form elements.", "guessedname": "setDefaultValues", "guessedtype": "function"}, "Y.FormManager.statusTakesPrecendence": {"return": {"type": "boolean", "description": "<code>true</code> if <code>new_status</code> takes precedence over <code>orig_status</code>"}, "description": "Compare two status values.", "static": "", "guessedname": "statusTakesPrecendence", "guessedtype": "function", "params": [{"type": "String", "name": "orig_status", "description": "  The name of the original status value."}, {"type": "String", "name": "new_status", "description": "  The name of the new status value."}]}, "hasMessages": {"return": {"type": "boolean", "description": "<code>true</code> if there are any messages displayed, of any type"}, "guessedname": "hasMessages", "guessedtype": "function"}, "setDefaultValue": {"params": [{"type": "String", "name": "field_name", "description": "  The form element name."}, {"type": "String|Int|Float", "name": "default_value", "description": "  The default value."}], "description": "Set the default values for a single form element.", "guessedname": "setDefaultValue", "guessedtype": "function"}, "validateForm": {"description": "Validate the form.", "guessedname": "validateForm", "guessedtype": "function"}, "clearMessages": {"description": "Clear all messages in <code>status_node</code> and the form rows.", "guessedname": "clearMessages", "guessedtype": "function"}, "prePrepareForm": {"return": {"type": "boolean", "description": "<code>false</code> cancels <code>prepareForm()</code>."}, "description": "Hook called before <code>prepareForm()</code> executes.", "guessedname": "prePrepareForm", "guessedtype": "function"}, "postPrepareForm": {"return": {"type": "boolean", "description": "Return value from this function is returned by <code>prepareForm()</code>."}, "description": "Hook called after <code>prepareForm()</code> executes.", "guessedname": "postPrepareForm", "guessedtype": "function"}, "displayFormMessage": {"params": [{"type": "String", "name": "msg", "description": "  The message"}, {"type": "boolean", "name": "error", "description": "  <code>true</code> if the message is an error"}, {"type": "boolean", "name": "scroll", "description": "  <code>true</code> if <code>status_node</code> should be scrolled into view"}], "description": "Display a message in <code>status_node</code>.", "guessedname": "displayFormMessage", "guessedtype": "function"}, "hasErrors": {"return": {"type": "boolean", "description": "<code>true</code> if there are any error messages displayed"}, "guessedname": "hasErrors", "guessedtype": "function"}, "postPopulateForm": {"description": "Hook for performing additional actions after\n<code>populateForm()</code> completes.", "guessedname": "postPopulateForm", "guessedtype": "function"}, "initFocus": {"description": "Set focus to first input field.  If a page contains multiple forms,\nonly call this for one of them.", "guessedname": "initFocus", "guessedtype": "function"}, "displayMessage": {"params": [{"type": "String|Object", "name": "e", "description": "  The selector for the element or the element itself"}, {"type": "String", "name": "msg", "description": "  The message"}, {"type": "String", "name": "type", "description": "  The message type (see Y.FormManager.status_order)"}, {"type": "boolean", "name": "scroll", "description": "  (Optional) <code>true</code> if the form row should be scrolled into view"}], "description": "Display a message for the form row containing the specified element.\nThe message will only be displayed if no message with a higher\nprecedence is already visible. (see Y.FormManager.status_order)", "guessedname": "displayMessage", "guessedtype": "function"}, "getRowStatus": {"return": {"type": "mixed", "description": "The status (String) or <code>false</code>."}, "params": [{"type": "String|Object", "name": "e", "description": "  The selector for the element or the element itself"}], "description": "Get the message type displayed for the row containing the specified element.", "guessedname": "getRowStatus", "guessedtype": "function"}, "addErrorMessage": {"params": [{"type": "String|Object", "name": "id", "description": "  The selector for the element or the element itself"}, {"type": "String", "name": "error_type", "description": "  The error message type.  Refer to setErrorMessages() for details."}, {"type": "String", "name": "msg", "description": "  The error message"}], "description": "Set one particular error message for a form element.", "guessedname": "addErrorMessage", "guessedtype": "function"}, "isChanged": {"return": {"type": "boolean", "description": "<code>false</code> if all form elements have the default values passed to the constructor"}, "description": "Check if form values have been modified.", "guessedname": "isChanged", "guessedtype": "function"}, "disableForm": {"description": "Disable all the registered buttons.", "guessedname": "disableForm", "guessedtype": "function"}, "populateForm": {"description": "Reset all values in the form to the defaults passed to the constructor.", "guessedname": "populateForm", "guessedtype": "function"}, "notifyErrors": {"description": "Displays a generic message in <code>status_node</code> stating that\nthe form data failed to validate.  Override this if you want to get\nfancy.", "guessedname": "notifyErrors", "guessedtype": "function"}, "saveCurrentValuesAsDefault": {"description": "Store the current form values in <code>default_value_map</code>.", "guessedname": "saveCurrentValuesAsDefault", "guessedtype": "function"}}, "file": "FormManager.js", "shortname": "FormManager", "configs": {"Y.FormManager.Strings": {"type": "{Object}", "static": "", "description": "<p>Map of localizable strings used by pre-validation.</p>\n<dl>\n<dt>validation_error</dt>\n<dd>Displayed in <code>status_node</code> by <code>notifyErrors()</code> when pre-validation fails.</dd>\n<dt>required_string</dt>\n<dd>Displayed when <code>yiv-required</code> fails on an input field.</dd>\n<dt>required_menu</dt>\n<dd>Displayed when <code>yiv-required</code> fails on a select element.</dd>\n<dt>length_too_short, length_too_long, length_out_of_range</dt>\n<dd>Displayed when <code>yiv-length</code> fails on an input field.</dd>\n<dt>integer, integer_too_small, integer_too_large, integer_out_of_range</dt>\n<dd>Displayed when <code>yiv-integer</code> fails on an input field.</dd>\n<dt>decimal, decimal_too_small, decimal_too_large, decimal_out_of_range</dt>\n<dd>Displayed when <code>yiv-decimal</code> fails on an input field.</dd>\n</dl>", "guessedname": "Strings", "guessedtype": "property"}, "Y.FormManager.integer_value_re": {"type": "{RegExp}", "static": "", "description": "Regular expression used to determine if a value is an integer.\nThis can be localized, e.g., allow for thousands separator.", "guessedname": "integer_value_re", "guessedtype": "property"}, "Y.FormManager.decimal_value_re": {"type": "{RegExp}", "static": "", "description": "Regular expression used to determine if a value is a decimal number.\nThis can be localized, e.g., use the correct decimal separator.", "guessedname": "decimal_value_re", "guessedtype": "property"}, "Y.FormManager.status_order": {"type": "{Array}", "static": "", "description": "<p>Names of supported status values, highest precedence first.  Default:\n<code>[ 'error', 'warn', 'success', 'info' ]</code></p>\n<p>This is static because it links to CSS rules that define the\nappearance of each status type:  .formmgr-has{status}</p>", "guessedname": "status_order", "guessedtype": "property"}}, "description": "<p>FormManager provides support for initializing a form, pre-validating\nuser input, and displaying messages returned by the server.</p>\n<p><strong>Required Markup Structure</strong></p>\n<p>Each element (or tighly coupled set of elements) must be contained by\nan element that has the CSS class <code>formmgr-row</code>.  Within each\nrow, validation messages are displayed inside the container with CSS\nclass <code>formmgr-message-text</code>.\n<p>When a message is displayed inside a row, the CSS class\n<code>formmgr-has{type}</code> is placed on the row container and the\ncontaining fieldset (if any), where <code>{type}</code> is the message\ntype passed to <code>displayMessage()</code>.</p>\n<p><strong>Initializing the Form</strong></p>\n<p>Default values can be either encoded in the markup or passed to the\nFormManager constructor via <code>config.default_value_map</code>.  (The\nformer method is obviously better for progressive enhancement.)  The\nvalues passed to the constructor override the values encoded in the\nmarkup.</p>\n<p><code>prepareForm()</code> must be called before the form is\ndisplayed.  To initialize focus to the first element in a form, call\n<code>initFocus()</code>.  If the form is in an overlay, you can delay\nthese calls until just before showing the overlay.</p>\n<p>The default values passed to the constructor are inserted by\n<code>populateForm()</code>.  (This is automatically called by\n<code>prepareForm()</code>.)</p>\n<p><strong>Displaying Messages</strong></p>\n<p>To display a message for a single form row, call\n<code>displayMessage()</code>.  To display a message for the form in\ngeneral, call <code>displayFormMessage()</code>.  These functions can be\nused for initializing the error display when the page loads, for\ndisplaying the results of pre-validation, and for displaying the results\nof submitting a form via XHR.</p>\n<p><strong>Specifying Validations</strong></p>\n<p>The following classes can be applied to a form element for\npre-validation:</p>\n<dl>\n<dt><code>yiv-required</code></dt>\n<dd>Value must not be empty.</dd>\n<dt><code>yiv-length:[x,y]</code></dt>\n<dd>String must be at least x characters and at most y characters.\nAt least one of x and y must be specified.</dd>\n<dt><code>yiv-integer:[x,y]</code></dt>\n<dd>The integer value must be at least x and at most y.\nx and y are both optional.</dd>\n<dt><code>yiv-decimal:[x,y]</code></dt>\n<dd>The decimal value must be at least x and at most y.  Exponents are\nnot allowed.  x and y are both optional.</dd>\n</dl>\n<p>If we ever need to allow exponents, we can use yiv-float.</p>\n<p>The following functions allow additional pre-validation to be\nattached to individual form elements:</p>\n<dl>\n<dt><code>setRegex()</code></dt>\n<dd>Sets the regular expression that must match in order for the value\nto be acceptable.</dd>\n<dt><code>setFunction()</code></dt>\n<dd>Sets the function that must return true in order for the value to\nbe acceptable.  The function is called in the scope of the Form\nobject with the arguments:  the form and the element.</dd>\n</dl>\n<p><code>setErrorMessages()</code> specifies the error message to be\ndisplayed when a pre-validation check fails.</p>\n<p>Functions are expected to call <code>displayMessage()</code>\ndirectly.</p>\n<p>More complex pre-validations can be added by overriding\n<code>postValidateForm()</code>, described below.</p>\n<p>Derived classes may also override the following functions:</p>\n<dl>\n<dt><code>prePrepareForm</code>(arguments passed to prepareForm)</dt>\n<dd>Called before filling in default values for the form elements.\nReturn false to cancel dialog.</dd>\n<dt><code>postPrepareForm</code>(arguments passed to prepareForm)</dt>\n<dd>Called after filling in default values for the form elements.</dd>\n<dt><code>postValidateForm</code>(form)</dt>\n<dd>Called after performing the basic pre-validations.  Returns\ntrue if the form contents are acceptable.  Reports error if there\nis a problem.</dd>\n</dl>"}}, "version": "1.0.0", "modules": {"gallery-formmgr": {"description": "<p>FormManager provides support for initializing a form, pre-validating\nuser input, and displaying messages returned by the server.</p>\n<p><strong>Required Markup Structure</strong></p>\n<p>Each element (or tighly coupled set of elements) must be contained by\nan element that has the CSS class <code>formmgr-row</code>.  Within each\nrow, validation messages are displayed inside the container with CSS\nclass <code>formmgr-message-text</code>.\n<p>When a message is displayed inside a row, the CSS class\n<code>formmgr-has{type}</code> is placed on the row container and the\ncontaining fieldset (if any), where <code>{type}</code> is the message\ntype passed to <code>displayMessage()</code>.</p>\n<p><strong>Initializing the Form</strong></p>\n<p>Default values can be either encoded in the markup or passed to the\nFormManager constructor via <code>config.default_value_map</code>.  (The\nformer method is obviously better for progressive enhancement.)  The\nvalues passed to the constructor override the values encoded in the\nmarkup.</p>\n<p><code>prepareForm()</code> must be called before the form is\ndisplayed.  To initialize focus to the first element in a form, call\n<code>initFocus()</code>.  If the form is in an overlay, you can delay\nthese calls until just before showing the overlay.</p>\n<p>The default values passed to the constructor are inserted by\n<code>populateForm()</code>.  (This is automatically called by\n<code>prepareForm()</code>.)</p>\n<p><strong>Displaying Messages</strong></p>\n<p>To display a message for a single form row, call\n<code>displayMessage()</code>.  To display a message for the form in\ngeneral, call <code>displayFormMessage()</code>.  These functions can be\nused for initializing the error display when the page loads, for\ndisplaying the results of pre-validation, and for displaying the results\nof submitting a form via XHR.</p>\n<p><strong>Specifying Validations</strong></p>\n<p>The following classes can be applied to a form element for\npre-validation:</p>\n<dl>\n<dt><code>yiv-required</code></dt>\n<dd>Value must not be empty.</dd>\n<dt><code>yiv-length:[x,y]</code></dt>\n<dd>String must be at least x characters and at most y characters.\nAt least one of x and y must be specified.</dd>\n<dt><code>yiv-integer:[x,y]</code></dt>\n<dd>The integer value must be at least x and at most y.\nx and y are both optional.</dd>\n<dt><code>yiv-decimal:[x,y]</code></dt>\n<dd>The decimal value must be at least x and at most y.  Exponents are\nnot allowed.  x and y are both optional.</dd>\n</dl>\n<p>If we ever need to allow exponents, we can use yiv-float.</p>\n<p>The following functions allow additional pre-validation to be\nattached to individual form elements:</p>\n<dl>\n<dt><code>setRegex()</code></dt>\n<dd>Sets the regular expression that must match in order for the value\nto be acceptable.</dd>\n<dt><code>setFunction()</code></dt>\n<dd>Sets the function that must return true in order for the value to\nbe acceptable.  The function is called in the scope of the Form\nobject with the arguments:  the form and the element.</dd>\n</dl>\n<p><code>setErrorMessages()</code> specifies the error message to be\ndisplayed when a pre-validation check fails.</p>\n<p>Functions are expected to call <code>displayMessage()</code>\ndirectly.</p>\n<p>More complex pre-validations can be added by overriding\n<code>postValidateForm()</code>, described below.</p>\n<p>Derived classes may also override the following functions:</p>\n<dl>\n<dt><code>prePrepareForm</code>(arguments passed to prepareForm)</dt>\n<dd>Called before filling in default values for the form elements.\nReturn false to cancel dialog.</dd>\n<dt><code>postPrepareForm</code>(arguments passed to prepareForm)</dt>\n<dd>Called after filling in default values for the form elements.</dd>\n<dt><code>postValidateForm</code>(form)</dt>\n<dd>Called after performing the basic pre-validations.  Returns\ntrue if the form contents are acceptable.  Reports error if there\nis a problem.</dd>\n</dl>", "submodules": [], "classlist": ["FormManager"], "filelist": ["FormManager.js"], "subdata": {}, "name": "gallery-formmgr"}}, "filemap": {"FormManager.js": {"classlist": ["FormManager"], "name": "FormManager.js", "module": "gallery-formmgr"}}}