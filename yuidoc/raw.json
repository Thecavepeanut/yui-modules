{"majorversion": 3, "filemap": {"Sum.js": {"classlist": ["MathFunction.Sum"], "name": "Sum.js", "module": "gallery-mathcanvas"}, "Array.js": {"classlist": ["Array"], "name": "Array.js", "module": "gallery-algorithms"}, "InstanceManager.js": {"classlist": ["InstanceManager"], "name": "InstanceManager.js", "module": "gallery-instancemanager"}, "Treeble.js": {"classlist": ["Treeble"], "name": "Treeble.js", "module": "gallery-treeble"}, "PreviousPageLink.js": {"classlist": ["Paginator.ui.PreviousPageLink"], "name": "PreviousPageLink.js", "module": "gallery-paginator"}, "String.js": {"classlist": ["QueryBuilder.String"], "name": "String.js", "module": "gallery-querybuilder"}, "Variable.js": {"classlist": ["MathFunction.Variable"], "name": "Variable.js", "module": "gallery-mathcanvas"}, "FunctionWithArgs.js": {"classlist": ["MathFunction.FunctionWithArgs"], "name": "FunctionWithArgs.js", "module": "gallery-mathcanvas"}, "CSSValidation.js": {"classlist": ["FormManager"], "name": "CSSValidation.js", "module": "gallery-formmgr-css-validation"}, "RectList.js": {"classlist": ["MathCanvas.RectList"], "name": "RectList.js", "module": "gallery-mathcanvas"}, "OverlayFormPlugin.js": {"classlist": ["Plugin.OverlayForm"], "name": "OverlayFormPlugin.js", "module": "gallery-formmgr-overlay-plugin"}, "Assert.js": {"classlist": ["Assert"], "name": "Assert.js", "module": "gallery-test-extras"}, "SelectAllCheckboxGroup.js": {"classlist": ["SelectAllCheckboxGroup"], "name": "SelectAllCheckboxGroup.js", "module": "gallery-checkboxgroups"}, "Value.js": {"classlist": ["MathFunction.Value"], "name": "Value.js", "module": "gallery-mathcanvas"}, "Dimensions.js": {"classlist": ["Node~dimensions"], "name": "Dimensions.js", "module": "node"}, "ComplexNumber.js": {"classlist": ["ComplexNumber"], "name": "ComplexNumber.js", "module": "gallery-complexnumber"}, "CurrentPageReport.js": {"classlist": ["Paginator.ui.CurrentPageReport"], "name": "CurrentPageReport.js", "module": "gallery-paginator"}, "Types.js": {"classlist": ["QueryBuilder"], "name": "Types.js", "module": "gallery-querybuilder"}, "Arccosine.js": {"classlist": ["MathFunction.Arccosine"], "name": "Arccosine.js", "module": "gallery-mathcanvas"}, "Logarithm.js": {"classlist": ["MathFunction.Logarithm"], "name": "Logarithm.js", "module": "gallery-mathcanvas"}, "ValidationPageLinks.js": {"classlist": ["Paginator.ui.ValidationPageLinks"], "name": "ValidationPageLinks.js", "module": "gallery-paginator"}, "CurrentPageInput.js": {"classlist": ["Paginator.ui.CurrentPageInput"], "name": "CurrentPageInput.js", "module": "gallery-paginator"}, "AtLeastOneCheckboxGroup.js": {"classlist": ["AtLeastOneCheckboxGroup"], "name": "AtLeastOneCheckboxGroup.js", "module": "gallery-checkboxgroups"}, "MathFunction.js": {"classlist": ["MathFunction"], "name": "MathFunction.js", "module": "gallery-mathcanvas"}, "InverseHyperbolicCosine.js": {"classlist": ["MathFunction.InverseHyperbolicCosine"], "name": "InverseHyperbolicCosine.js", "module": "gallery-mathcanvas"}, "I.js": {"classlist": ["MathFunction.I"], "name": "I.js", "module": "gallery-mathcanvas"}, "Math.js": {"classlist": ["Math"], "name": "Math.js", "module": "gallery-math"}, "LastPageLink.js": {"classlist": ["Paginator.ui.LastPageLink"], "name": "LastPageLink.js", "module": "gallery-paginator"}, "MathCanvas.js": {"classlist": ["MathCanvas", "MathCanvas.Parser"], "name": "MathCanvas.js", "module": "gallery-mathcanvas"}, "Exponential.js": {"classlist": ["MathFunction.Exponential"], "name": "Exponential.js", "module": "gallery-mathcanvas"}, "InverseHyperbolicTangent.js": {"classlist": ["MathFunction.InverseHyperbolicTangent"], "name": "InverseHyperbolicTangent.js", "module": "gallery-mathcanvas"}, "Cosine.js": {"classlist": ["MathFunction.Cosine"], "name": "Cosine.js", "module": "gallery-mathcanvas"}, "ItemRangeDropdown.js": {"classlist": ["Paginator.ui.ItemRangeDropdown"], "name": "ItemRangeDropdown.js", "module": "gallery-paginator"}, "MathParser.js": {"classlist": [], "name": "MathParser.js", "module": "gallery-mathcanvas"}, "HyperbolicCosine.js": {"classlist": ["MathFunction.HyperbolicCosine"], "name": "HyperbolicCosine.js", "module": "gallery-mathcanvas"}, "NextPageLink.js": {"classlist": ["Paginator.ui.NextPageLink"], "name": "NextPageLink.js", "module": "gallery-paginator"}, "Negate.js": {"classlist": ["MathFunction.Negate"], "name": "Negate.js", "module": "gallery-mathcanvas"}, "SquareRoot.js": {"classlist": ["MathFunction.SquareRoot"], "name": "SquareRoot.js", "module": "gallery-mathcanvas"}, "Max.js": {"classlist": ["MathFunction.Max"], "name": "Max.js", "module": "gallery-mathcanvas"}, "FormManager.js": {"classlist": ["FormManager"], "name": "FormManager.js", "module": "gallery-formmgr"}, "Conjugate.js": {"classlist": ["MathFunction.Conjugate"], "name": "Conjugate.js", "module": "gallery-mathcanvas"}, "QuickEdit.js": {"classlist": ["Plugin.DataTableQuickEdit"], "name": "QuickEdit.js", "module": "gallery-quickedit"}, "Paginator.js": {"classlist": ["Paginator"], "name": "Paginator.js", "module": "gallery-paginator"}, "ArrayList.js": {"classlist": ["ArrayList"], "name": "ArrayList.js", "module": "gallery-algorithms"}, "CheckboxGroup.js": {"classlist": ["CheckboxGroup"], "name": "CheckboxGroup.js", "module": "gallery-checkboxgroups"}, "Rotate.js": {"classlist": ["MathFunction.Rotate"], "name": "Rotate.js", "module": "gallery-mathcanvas"}, "HyperbolicSine.js": {"classlist": ["MathFunction.HyperbolicSine"], "name": "HyperbolicSine.js", "module": "gallery-mathcanvas"}, "NodeList-patch.js": {"name": "NodeList-patch.js", "classlist": [], "module": "gallery-checkboxgroups", "guessedname": "Y_NodeList", "guessedtype": "property", "property": "Y_NodeList"}, "Product.js": {"classlist": ["MathFunction.Product"], "name": "Product.js", "module": "gallery-mathcanvas"}, "Accordion.js": {"classlist": ["Accordion"], "name": "Accordion.js", "module": "gallery-accordion-horiz-vert"}, "Context2d.js": {"classlist": ["Canvas.Context2d"], "name": "Context2d.js", "module": "gallery-canvas"}, "ComplexMath.js": {"classlist": ["ComplexMath"], "name": "ComplexMath.js", "module": "gallery-complexnumber"}, "Min.js": {"classlist": ["MathFunction.Min"], "name": "Min.js", "module": "gallery-mathcanvas"}, "Select.js": {"classlist": ["QueryBuilder.Select"], "name": "Select.js", "module": "gallery-querybuilder"}, "ImaginaryPart.js": {"classlist": ["MathFunction.ImaginaryPart"], "name": "ImaginaryPart.js", "module": "gallery-mathcanvas"}, "Tangent.js": {"classlist": ["MathFunction.Tangent"], "name": "Tangent.js", "module": "gallery-mathcanvas"}, "Quotient.js": {"classlist": ["MathFunction.Quotient"], "name": "Quotient.js", "module": "gallery-mathcanvas"}, "Phase.js": {"classlist": ["MathFunction.Phase"], "name": "Phase.js", "module": "gallery-mathcanvas"}, "console-test.js": {"classlist": ["Plugin.ConsoleTest"], "name": "console-test.js", "module": "gallery-console-test"}, "QueryBuilder.js": {"classlist": ["QueryBuilder"], "name": "QueryBuilder.js", "module": "gallery-querybuilder"}, "Sine.js": {"classlist": ["MathFunction.Sine"], "name": "Sine.js", "module": "gallery-mathcanvas"}, "ScrollIntoView.js": {"classlist": ["Node~scrollIntoView"], "name": "ScrollIntoView.js", "module": "node"}, "Arctangent.js": {"classlist": ["MathFunction.Arctangent"], "name": "Arctangent.js", "module": "gallery-mathcanvas"}, "Magnitude.js": {"classlist": ["MathFunction.Magnitude"], "name": "Magnitude.js", "module": "gallery-mathcanvas"}, "AtMostOneCheckboxGroup.js": {"classlist": ["AtMostOneCheckboxGroup"], "name": "AtMostOneCheckboxGroup.js", "module": "gallery-checkboxgroups"}, "RowsPerPageDropdown.js": {"classlist": ["Paginator.ui.RowsPerPageDropdown"], "name": "RowsPerPageDropdown.js", "module": "gallery-paginator"}, "EnableIfAnyCheckboxGroup.js": {"classlist": ["EnableIfAnyCheckboxGroup"], "name": "EnableIfAnyCheckboxGroup.js", "module": "gallery-checkboxgroups"}, "Optimizations.js": {"classlist": ["Node~optimizations"], "name": "Optimizations.js", "module": "node"}, "E.js": {"classlist": ["MathFunction.E"], "name": "E.js", "module": "gallery-mathcanvas"}, "FirstPageLink.js": {"classlist": ["Paginator.ui.FirstPageLink"], "name": "FirstPageLink.js", "module": "gallery-paginator"}, "NaturalLog.js": {"classlist": ["MathFunction.NaturalLog"], "name": "NaturalLog.js", "module": "gallery-mathcanvas"}, "Arcsine.js": {"classlist": ["MathFunction.Arcsine"], "name": "Arcsine.js", "module": "gallery-mathcanvas"}, "multi-response.js": {"classlist": ["io~multiresponse"], "name": "multi-response.js", "module": "io"}, "Column.js": {"classlist": ["Column"], "name": "Column.js", "module": "gallery-quickedit"}, "HyperbolicTangent.js": {"classlist": ["MathFunction.HyperbolicTangent"], "name": "HyperbolicTangent.js", "module": "gallery-mathcanvas"}, "Chipper.js": {"classlist": ["Chipper"], "name": "Chipper.js", "module": "gallery-chipper"}, "RealPart.js": {"classlist": ["MathFunction.RealPart"], "name": "RealPart.js", "module": "gallery-mathcanvas"}, "PageLinks.js": {"classlist": ["Paginator.ui.PageLinks"], "name": "PageLinks.js", "module": "gallery-paginator"}, "Arctangent2.js": {"classlist": ["MathFunction.Arctangent2"], "name": "Arctangent2.js", "module": "gallery-mathcanvas"}, "Pi.js": {"classlist": ["MathFunction.Pi"], "name": "Pi.js", "module": "gallery-mathcanvas"}, "Neon.js": {"classlist": ["Plugin.Neon"], "name": "Neon.js", "module": "gallery-neon"}, "TreebleDataSource.js": {"classlist": ["TreebleDataSource"], "name": "TreebleDataSource.js", "module": "gallery-treeble"}, "InverseHyperbolicSine.js": {"classlist": ["MathFunction.InverseHyperbolicSine"], "name": "InverseHyperbolicSine.js", "module": "gallery-mathcanvas"}, "ExpressionBuilder.js": {"classlist": ["ExpressionBuilder"], "name": "ExpressionBuilder.js", "module": "gallery-exprbuilder"}, "MultiObject.js": {"classlist": ["MultiObject"], "name": "MultiObject.js", "module": "gallery-multiobject"}}, "modules": {"gallery-accordion-horiz-vert": {"description": "<p>Class to manage an accordion, either horizontally or vertically.\nAllows either multiple open sections or only a single open section.\nProvides option to always force at lease one item to be open.</p>\n<p>An accordion can be constructed from existing markup or from strings\ncontaining HTML.  Existing markup can be provided either by setting\n<code>contentBox</code> or by specifying CSS selectors.  See the\n<code>titles</code> and <code>sections</code> attributes.</p>\n<p>When constructing from existing markup via <code>contentBox</code>,\nuse an unordered list (&lt;ul&gt;).  Each item must contain two\n&lt;div&gt;'s.  The first one is used as the section title, and the\nsecond one is used as the section content.</p>\n<p>Animation is optional.  If the anim module is not available,\nanimation is automatically turned off.</p>\n<p>When using a horizontal accordion:</p>\n<ul>\n<li>The widget's container must have a height.</li>\n<li>Each title must have both a width and height.</li>\n<li>Each section must have a width.</li>\n</ul>\n<p>IE doesn't accept zero height divs, so we use 1px height and zero\nopacity.  IE6 doesn't always render correctly with opacity set, so if\nanimation is turned off, we don't use opacity at all.</p>", "submodules": [], "classlist": ["Accordion"], "filelist": ["Accordion.js"], "subdata": {}, "name": "gallery-accordion-horiz-vert"}, "gallery-treeble": {"description": "<p>Hierarchical data source.</p>\n<p>TreebleDataSource converts a tree of DataSources into a flat list of\nvisible items.  The merged list must be paginated if the number of child\nnodes might be very large.  To turn on this feature, set\npaginateChildren:true.</p>\n<p>The tree must be immutable.  The total number of items available from\neach DataSource must remain constant.</p>", "submodules": [], "classlist": ["Treeble", "TreebleDataSource"], "filelist": ["Treeble.js", "TreebleDataSource.js"], "subdata": {}, "name": "gallery-treeble"}, "io": {"description": "<p>Extends the IO base class to enable multiple responses using an\niframe as the transport medium.</p>", "submodules": ["io-multiresponse"], "classlist": ["io~multiresponse"], "filelist": ["multi-response.js"], "subdata": {"io-multiresponse": {"name": "io~multiresponse", "description": "<p>Extends the IO base class to enable multiple responses using an\niframe as the transport medium.</p>"}}, "name": "io"}, "gallery-algorithms": {"description": "<p>Useful algorithms not provided by browsers.</p>", "submodules": [], "classlist": ["Array", "ArrayList"], "filelist": ["Array.js", "ArrayList.js"], "subdata": {}, "name": "gallery-algorithms"}, "gallery-neon": {"description": "<p>Overrides Y.Node.show() to make it look like a flickering neon\nsign.</p>", "submodules": [], "classlist": ["Plugin.Neon"], "filelist": ["Neon.js"], "subdata": {}, "name": "gallery-neon"}, "gallery-instancemanager": {"description": "<p>Stores instances of JavaScript components.  Allows a constructor or\nfactory method to be passed in place of an instance.  This enables lazy\nconstruction on demand.</p>\n<p>One use is to create a global repository of JavaScript components\nattached to DOM id's, e.g., YUI Buttons built on top of HTML\nbuttons.</p>", "submodules": [], "classlist": ["InstanceManager"], "filelist": ["InstanceManager.js"], "subdata": {}, "name": "gallery-instancemanager"}, "gallery-exprbuilder": {"description": "<p>Class which helps user to build a query expression.</p>", "submodules": [], "classlist": ["ExpressionBuilder"], "filelist": ["ExpressionBuilder.js"], "subdata": {}, "name": "gallery-exprbuilder"}, "gallery-mathcanvas": {"description": "<p>Variable value</p>", "submodules": [], "classlist": ["MathFunction.Arccosine", "MathFunction.Arcsine", "MathFunction.Arctangent", "MathFunction.Arctangent2", "MathFunction.Conjugate", "MathFunction.Cosine", "MathFunction.E", "MathFunction.Exponential", "MathFunction.FunctionWithArgs", "MathFunction.HyperbolicCosine", "MathFunction.HyperbolicSine", "MathFunction.HyperbolicTangent", "MathFunction.I", "MathFunction.ImaginaryPart", "MathFunction.InverseHyperbolicCosine", "MathFunction.InverseHyperbolicSine", "MathFunction.InverseHyperbolicTangent", "MathFunction.Logarithm", "MathFunction.Magnitude", "MathCanvas", "MathCanvas.Parser", "MathFunction", "MathFunction.Max", "MathFunction.Min", "MathFunction.NaturalLog", "MathFunction.Negate", "MathFunction.Phase", "MathFunction.Pi", "MathFunction.Product", "MathFunction.Quotient", "MathFunction.RealPart", "MathCanvas.RectList", "MathFunction.Rotate", "MathFunction.Sine", "MathFunction.SquareRoot", "MathFunction.Sum", "MathFunction.Tangent", "MathFunction.Value", "MathFunction.Variable"], "filelist": ["Arccosine.js", "Arcsine.js", "Arctangent.js", "Arctangent2.js", "Conjugate.js", "Cosine.js", "E.js", "Exponential.js", "FunctionWithArgs.js", "HyperbolicCosine.js", "HyperbolicSine.js", "HyperbolicTangent.js", "I.js", "ImaginaryPart.js", "InverseHyperbolicCosine.js", "InverseHyperbolicSine.js", "InverseHyperbolicTangent.js", "Logarithm.js", "Magnitude.js", "MathCanvas.js", "MathFunction.js", "MathParser.js", "Max.js", "Min.js", "NaturalLog.js", "Negate.js", "Phase.js", "Pi.js", "Product.js", "Quotient.js", "RealPart.js", "RectList.js", "Rotate.js", "Sine.js", "SquareRoot.js", "Sum.js", "Tangent.js", "Value.js", "Variable.js"], "subdata": {}, "name": "gallery-mathcanvas"}, "gallery-test-extras": {"description": "<p>Additional assertions for unit tests.</p>", "submodules": [], "classlist": ["Assert"], "filelist": ["Assert.js"], "subdata": {}, "name": "gallery-test-extras"}, "gallery-formmgr-overlay-plugin": {"description": "A simple plugin for Y.Overlay which attaches a Y.FormManager to the\n&lt;form&gt; inside the overlay.  Before the overlay is shown,\nprepareForm() is called to insert the default values.  (If this returns\nfalse, the overlay is not shown.)  After the overlay is shown, focus is\nset to the first field.", "submodules": [], "classlist": ["Plugin.OverlayForm"], "filelist": ["OverlayFormPlugin.js"], "subdata": {}, "name": "gallery-formmgr-overlay-plugin"}, "gallery-paginator": {"description": "Adds per-page error notification to Paginator.ui.PageLinks.", "submodules": [], "classlist": ["Paginator.ui.CurrentPageInput", "Paginator.ui.CurrentPageReport", "Paginator.ui.FirstPageLink", "Paginator.ui.ItemRangeDropdown", "Paginator.ui.LastPageLink", "Paginator.ui.NextPageLink", "Paginator.ui.PageLinks", "Paginator", "Paginator.ui.PreviousPageLink", "Paginator.ui.RowsPerPageDropdown", "Paginator.ui.ValidationPageLinks"], "filelist": ["CurrentPageInput.js", "CurrentPageReport.js", "FirstPageLink.js", "ItemRangeDropdown.js", "LastPageLink.js", "NextPageLink.js", "PageLinks.js", "Paginator.js", "PreviousPageLink.js", "RowsPerPageDropdown.js", "ValidationPageLinks.js"], "subdata": {}, "name": "gallery-paginator"}, "gallery-querybuilder": {"description": "<p>Class which allows user to build a list of query criteria, e.g., for\nsearching.  All the conditions are either AND'ed or OR'ed.  For a more\ngeneral query builder, see gallery-exprbuilder.</p>\n<p>The default package provides two data types:  String (which can also\nbe used for numbers) and Select (which provides a menu of options).  The\nplugin API allows defining additional data types, e.g., date range or\nmulti-select.  Every plugin must be registered in\n<code>Y.QueryBuilder.plugin_mapping</code>.  Plugins must implement the\nfollowing functions:</p>\n<dl>\n<dt><code>constructor(qb, config)</code></dt>\n<dd>The arguments passed to the constructor are the QueryBuilder instance\nand the <code>pluginConfig</code> set on the QueryBuilder instance.\nAt the minimum, this function should initalize form field name patterns\nusing <code>config.field_prefix</code>.</dd>\n<dt><code>create(query_index, var_config, op_list, value)</code><dt>\n<dd>This function must create the additional cells for the query row and\npopulate these cells appropriately.  (The QueryBuilder widget will\ninsert the cells into the table.)  <code>var_config</code> is the\nitem from the QueryBuilder's <code>var_list</code> that the user\nselected.  <code>op_list</code> is the item from the QueryBuilder's\n<code>operators</code> which matches the variable selected by the\nuser.  <code>value</code> is optional.  If specified, it is the\ninitial value(s) to be displayed by the plugin.</dd>\n<dt><code>postCreate(query_index, var_config, op_list, value)</code></dt>\n<dd>Optional.  If it exists, it will be called after the cells returned by\n<code>create()</code> have been inserted into the table.  The arguments\nare the same as <code>create()</code>.</dd>\n<dt><code>destroy()</code></dt>\n<dd>Destroy the plugin.  (The QueryBuilder widget will remove the cells\nand purge all events.)</dd>\n<dt><code>updateName(new_index)</code></dt>\n<dd>Update the names of the form fields managed by the plugin.</dd>\n<dt><code>set(query_index, data)</code></dt>\n<dd>Set the displayed value(s) by extracting values from data (a map)\nbased on the current names of the plugin's form fields.</dd>\n<dt><code>toDatabaseQuery()</code></dt>\n<dd>Return an array of arrays.  Each inner array contains an operation\nand a value.  The default String and Select plugins each return\na single inner array.  A date range plugin would return two inner\narrays, one for the start date and one for the end date.</dd>\n<dt><code>validate()</code></dt>\n<dd>Optional.  If additional validations are required beyond the basic\nvalidations encoded in CSS, this function should check them.  If\nthe input is not valid, call <code>displayFieldMessage()</code>\non the QueryBuilder object and return false.  Otherwise, return\ntrue.</dd>\n</dl>", "submodules": [], "classlist": ["QueryBuilder", "QueryBuilder.Select", "QueryBuilder.String"], "filelist": ["QueryBuilder.js", "Select.js", "String.js", "Types.js"], "subdata": {}, "name": "gallery-querybuilder"}, "gallery-chipper": {"description": "<p>Destroys objects asynchronously.</p>", "submodules": [], "classlist": ["Chipper"], "filelist": ["Chipper.js"], "subdata": {}, "name": "gallery-chipper"}, "gallery-quickedit": {"description": "<p>The QuickEdit plugin provides a new mode for DataTable where all\nvalues in the table can be edited simultaneously, controlled by the\ncolumn configuration.  Each editable cell contains an input field.  If\nthe user decides to save the changes, then you can extract the changed\nvalues by calling <code><i>dt</i>.qe.getChanges()</code>.</p>\n<p>For a column to be editable in QuickEdit mode, the column\nconfiguration must include <code>quickEdit</code>.  The contents of\nthis object define the column's behavior in QuickEdit mode.</p>\n<p>To move up or down within a column while in QuickEdit mode, hold down\nthe Ctrl key and press the up or down arrow.</p>\n<p>If a column should not be editable, but needs to be formatted\ndifferently in QuickEdit mode, then you must define qeFormatter in\nthe column configuration. This is simply a normal cell formatter\nfunction that will be used in QuickEdit mode.  The static functions\n<code>readonly*Formatter</code> provide examples.</p>\n<p>The following configuration can be provided as part of\nquickEdit:</p>\n<dl>\n<dt>changed</dt><dd>Optional.  The function to call with the old and new\nvalue.  Should return true if the values are different.</dd>\n<dt>formatter</dt><dd>The cell formatter which will render an\nappropriate form field: &lt;input type=\"text\"&gt;, &lt;textarea&gt;,\nor &lt;select&gt;.</dd>\n<dt>validation</dt><dd>Validation configuration for every field in\nthe column.</dd>\n</dl>\n<p>The following configuration can be provided as part of\nquickEdit.validation:</p>\n<dl>\n<dt>css</dt><dd>CSS classes encoding basic validation rules:\n<dl>\n<dt><code>yiv-required</code></dt>\n<dd>Value must not be empty.</dd>\n<dt><code>yiv-length:[x,y]</code></dt>\n<dd>String must be at least x characters and at most y characters.\nAt least one of x and y must be specified.</dd>\n<dt><code>yiv-integer:[x,y]</code></dt>\n<dd>The integer value must be at least x and at most y.\nx and y are both optional.</dd>\n<dt><code>yiv-decimal:[x,y]</code></dt>\n<dd>The decimal value must be at least x and at most y.  Exponents are\nnot allowed.  x and y are both optional.</dd>\n</dl>\n</dd>\n<dt>fn</dt><dd>A function that will be called with the DataTable as its\nscope and the cell's form element as the argument. Return true if the\nvalue is valid. Otherwise, call this.qe.displayMessage(...) to display\nan error and return false.</dd>\n<dt>msg</dt><dd>A map of types to messages that will be displayed\nwhen a basic or regex validation rule fails. The valid types are:\nrequired, min_length, max_length, integer, decimal, and regex.\nThere is no default for type regex, so you must specify a message if\nyou configure a regex validation.</dd>\n<dt>regex</dt><dd>Regular expression that the value must satisfy in\norder to be considered valid.</dd>\n</dl>", "submodules": [], "classlist": ["Column", "Plugin.DataTableQuickEdit"], "filelist": ["Column.js", "QuickEdit.js"], "subdata": {}, "name": "gallery-quickedit"}, "gallery-console-test": {"description": "<p>Adds a menu of registered unit test suites to the YUI 3 Console.</p>", "submodules": [], "classlist": ["Plugin.ConsoleTest"], "filelist": ["console-test.js"], "subdata": {}, "name": "gallery-console-test"}, "node": {"description": "<p>Only scrolls the browser if the object is not currently visible.</p>", "submodules": ["gallery-dimensions", "gallery-node-optimizations", "gallery-scrollintoview"], "classlist": ["Node~dimensions", "Node~optimizations", "Node~scrollIntoView"], "filelist": ["Dimensions.js", "Optimizations.js", "ScrollIntoView.js"], "subdata": {"gallery-node-optimizations": {"name": "Node~optimizations", "description": "Optimizations for searching DOM tree."}, "gallery-dimensions": {"name": "Node~dimensions", "description": "<p>Functions for measuring the size of a node.</p>"}, "gallery-scrollintoview": {"name": "Node~scrollIntoView", "description": "<p>Only scrolls the browser if the object is not currently visible.</p>"}}, "name": "node"}, "gallery-formmgr-css-validation": {"description": "<p>FormManager CSS Validation provides basic functionality for\npre-validating user input based on CSS classes set on form elements.</p>\n<p>The following classes can be applied to a form element for\npre-validation:</p>\n<dl>\n<dt><code>yiv-required</code></dt>\n<dd>Value must not be empty.</dd>\n<dt><code>yiv-length:[x,y]</code></dt>\n<dd>String must be at least x characters and at most y characters.\nAt least one of x and y must be specified.</dd>\n<dt><code>yiv-integer:[x,y]</code></dt>\n<dd>The integer value must be at least x and at most y.\nx and y are both optional.</dd>\n<dt><code>yiv-decimal:[x,y]</code></dt>\n<dd>The decimal value must be at least x and at most y.  Exponents are\nnot allowed.  x and y are both optional.</dd>\n</dl>\n<p>If we ever need to allow exponents, we can use yiv-float.</p>", "submodules": [], "classlist": ["FormManager"], "filelist": ["CSSValidation.js"], "subdata": {}, "name": "gallery-formmgr-css-validation"}, "gallery-checkboxgroups": {"description": "All checkboxes can be selected and a select-all checkbox is available\nto check all. This check-all box is automatically changed if any other\ncheckbox changes state.", "submodules": [], "classlist": ["AtLeastOneCheckboxGroup", "AtMostOneCheckboxGroup", "CheckboxGroup", "EnableIfAnyCheckboxGroup", "SelectAllCheckboxGroup"], "filelist": ["AtLeastOneCheckboxGroup.js", "AtMostOneCheckboxGroup.js", "CheckboxGroup.js", "EnableIfAnyCheckboxGroup.js", "NodeList-patch.js", "SelectAllCheckboxGroup.js"], "subdata": {}, "name": "gallery-checkboxgroups"}, "gallery-complexnumber": {"description": "<p>Class for representing a complex number.</p>", "submodules": [], "classlist": ["ComplexMath", "ComplexNumber"], "filelist": ["ComplexMath.js", "ComplexNumber.js"], "subdata": {}, "name": "gallery-complexnumber"}, "gallery-canvas": {"description": "<p>Wrapper for a canvas 2d context.  It exposes the exact same api as\nthe native 2d context, plus some extras, documented below.  Just like\nY.Node, use get() and set() to modify attributes.</p>", "submodules": [], "classlist": ["Canvas.Context2d"], "filelist": ["Context2d.js"], "subdata": {}, "name": "gallery-canvas"}, "gallery-formmgr": {"description": "<p>FormManager provides support for initializing a form, pre-validating\nuser input, and displaying messages returned by the server.</p>\n<p>Also see the documentation for gallery-formmgr-css-validation.</p>\n<p><strong>Required Markup Structure</strong></p>\n<p>Each element (or tighly coupled set of elements) must be contained by\nan element that has the CSS class <code>formmgr-row</code>.  Within each\nrow, validation messages are displayed inside the container with CSS\nclass <code>formmgr-message-text</code>.\n<p>When a message is displayed inside a row, the CSS class\n<code>formmgr-has{type}</code> is placed on the row container and the\ncontaining fieldset (if any), where <code>{type}</code> is the message\ntype passed to <code>displayMessage()</code>.</p>\n<p><strong>Initializing the Form</strong></p>\n<p>Default values can be either encoded in the markup or passed to the\nFormManager constructor via <code>config.default_value_map</code>.  (The\nformer method is obviously better for progressive enhancement.)  The\nvalues passed to the constructor override the values encoded in the\nmarkup.</p>\n<p><code>prepareForm()</code> must be called before the form is\ndisplayed.  To initialize focus to the first element in a form, call\n<code>initFocus()</code>.  If the form is in an overlay, you can delay\nthese calls until just before showing the overlay.</p>\n<p>The default values passed to the constructor are inserted by\n<code>populateForm()</code>.  (This is automatically called by\n<code>prepareForm()</code>.)</p>\n<p><strong>Displaying Messages</strong></p>\n<p>To display a message for a single form row, call\n<code>displayMessage()</code>.  To display a message for the form in\ngeneral, call <code>displayFormMessage()</code>.  These functions can be\nused for initializing the error display when the page loads, for\ndisplaying the results of pre-validation, and for displaying the results\nof submitting a form via XHR.</p>\n<p><strong>Specifying Validations</strong></p>\n<p>The following classes can be applied to a form element for\npre-validation:</p>\n<dl>\n<dt><code>yiv-required</code></dt>\n<dd>Value must not be empty.</dd>\n<dt><code>yiv-length:[x,y]</code></dt>\n<dd>String must be at least x characters and at most y characters.\nAt least one of x and y must be specified.</dd>\n<dt><code>yiv-integer:[x,y]</code></dt>\n<dd>The integer value must be at least x and at most y.\nx and y are both optional.</dd>\n<dt><code>yiv-decimal:[x,y]</code></dt>\n<dd>The decimal value must be at least x and at most y.  Exponents are\nnot allowed.  x and y are both optional.</dd>\n</dl>\n<p>If we ever need to allow exponents, we can use yiv-float.</p>\n<p>The following functions allow additional pre-validation to be\nattached to individual form elements:</p>\n<dl>\n<dt><code>setRegex()</code></dt>\n<dd>Sets the regular expression that must match in order for the value\nto be acceptable.</dd>\n<dt><code>setFunction()</code></dt>\n<dd>Sets the function that must return true in order for the value to\nbe acceptable.  The function is called in the scope of the Form\nobject with the arguments:  the form and the element.</dd>\n</dl>\n<p><code>setErrorMessages()</code> specifies the error message to be\ndisplayed when a pre-validation check fails.</p>\n<p>Functions are expected to call <code>displayMessage()</code>\ndirectly.</p>\n<p>More complex pre-validations can be added by overriding\n<code>postValidateForm()</code>, described below.</p>\n<p>Validation normally strips leading and trailing whitespace from every\nvalue.  If you have a special case where this should not be done, add\nthe CSS class <code>yiv-no-trim</code> to the input field.</p>\n<p>Derived classes may also override the following functions:</p>\n<dl>\n<dt><code>prePrepareForm</code>(arguments passed to prepareForm)</dt>\n<dd>Called before filling in default values for the form elements.\nReturn false to cancel dialog.</dd>\n<dt><code>postPrepareForm</code>(arguments passed to prepareForm)</dt>\n<dd>Called after filling in default values for the form elements.</dd>\n<dt><code>postValidateForm</code>(form)</dt>\n<dd>Called after performing the basic pre-validations.  Returns\ntrue if the form contents are acceptable.  Reports error if there\nis a problem.</dd>\n</dl>", "submodules": [], "classlist": ["FormManager"], "filelist": ["FormManager.js"], "subdata": {}, "name": "gallery-formmgr"}, "gallery-math": {"description": "<p>Augments built-in JavaScript Math namespace with additional\nmathematical functions.</p>", "submodules": [], "classlist": ["Math"], "filelist": ["Math.js"], "subdata": {}, "name": "gallery-math"}, "gallery-multiobject": {"description": "<p>MultiObject exposes exactly the same API as each individual object,\nboth functions and events, and the state of all the objects is kept in\nsync.  The objects must maintain all state via\nY.Attribute.<p>\n<p>MultiObject is similar to Y.ArrayList, except:</p>\n<ul>\n<li>All objects must be of the same type, since MultiObject is supposed\nto behave exactly like any single object.</li>\n<li>MultiObject automatically delegates all methods.</li>\n<li>By default, MultiObject returns the result from the first object\nin the list, not an array of results.</li>\n<li>MultiObject propagates all events.</li>\n</ul>\n<p>Internally, MultiObject delegates all methods by name, so it supports\nY.Do.before, Y.Do.after, etc.</p>\n<p>To avoid shadowing potential function names, we inherit from\nY.EventTarget and use multi_ as the prefix for our own functions.</p>", "submodules": [], "classlist": ["MultiObject"], "filelist": ["MultiObject.js"], "subdata": {}, "name": "gallery-multiobject"}}, "classmap": {"Paginator.ui.NextPageLink": {"properties": {"current": {"guessedname": "current", "type": "HTMLElement", "description": "Currently placed HTMLElement node", "private": "", "guessedtype": "property"}, "span": {"guessedname": "span", "type": "HTMLElement", "description": "Span node (inactive link)", "private": "", "guessedtype": "property"}, "link": {"guessedname": "link", "type": "HTMLElement", "description": "Link node", "private": "", "guessedtype": "property"}}, "name": "Paginator.ui.NextPageLink", "constructors": [{"params": [{"type": "Pagintor", "name": "p", "description": "  Paginator instance to attach to"}], "description": "ui Component to generate the link to jump to the next page."}], "namespace": "", "module": "gallery-paginator", "events": {"nextPageLinkClassChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nextPageLinkClassChange", "description": "Fires when the value for the configuration attribute 'nextPageLinkClass' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "nextPageLinkLabelChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nextPageLinkLabelChange", "description": "Fires when the value for the configuration attribute 'nextPageLinkLabel' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "NextPageLink", "methods": {"onClick": {"params": [{"type": "DOMEvent", "name": "e", "description": "  The click event"}], "description": "Listener for the link's onclick event.  Passes to setPage method.", "guessedname": "onClick", "guessedtype": "function"}, "destroy": {"private": "", "description": "Removes the link/span node and clears event listeners", "guessedname": "destroy", "guessedtype": "function"}, "rebuild": {"params": [{"type": "CustomEvent", "name": "e", "description": "  The calling change event"}], "description": "Rebuild the markup.", "guessedname": "rebuild", "guessedtype": "function"}, "update": {"params": [{"type": "CustomEvent", "name": "e", "description": "  The calling change event"}], "description": "Swap the link and span nodes if appropriate.", "guessedname": "update", "guessedtype": "function"}, "render": {"return": {"type": "HTMLElement", "description": ""}, "params": [{"type": "string", "name": "id_base", "description": "  used to create unique ids for generated nodes"}], "description": "Generate the nodes and return the appropriate node given the current\npagination state.", "guessedname": "render", "guessedtype": "function"}}, "file": "NextPageLink.js", "guessedtype": "function", "shortname": "Paginator.ui.NextPageLink", "configs": {"nextPageLinkLabel": {"default": "'next &gt;'", "description": "Used as innerHTML for the next page link/span.", "guessedname": "nextPageLinkLabel", "guessedtype": "property"}, "nextPageLinkClass": {"default": "'yui-paginator-next'", "description": "CSS class assigned to the link/span", "guessedname": "nextPageLinkClass", "guessedtype": "property"}}, "description": "ui Component to generate the link to jump to the next page."}, "Paginator.ui.FirstPageLink": {"properties": {"current": {"guessedname": "current", "type": "HTMLElement", "description": "The currently placed HTMLElement node", "private": "", "guessedtype": "property"}, "span": {"guessedname": "span", "type": "HTMLElement", "description": "Span node (inactive link)", "private": "", "guessedtype": "property"}, "link": {"guessedname": "link", "type": "HTMLElement", "description": "Link node", "private": "", "guessedtype": "property"}}, "name": "Paginator.ui.FirstPageLink", "constructors": [{"params": [{"type": "Pagintor", "name": "p", "description": "  Paginator instance to attach to"}], "description": "ui Component to generate the link to jump to the first page."}], "namespace": "", "module": "gallery-paginator", "events": {"firstPageLinkLabelChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "firstPageLinkLabelChange", "description": "Fires when the value for the configuration attribute 'firstPageLinkLabel' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "firstPageLinkClassChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "firstPageLinkClassChange", "description": "Fires when the value for the configuration attribute 'firstPageLinkClass' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "FirstPageLink", "methods": {"onClick": {"params": [{"type": "DOMEvent", "name": "e", "description": "  The click event"}], "description": "Listener for the link's onclick event.  Pass new value to setPage method.", "guessedname": "onClick", "guessedtype": "function"}, "destroy": {"private": "", "description": "Removes the link/span node and clears event listeners.", "guessedname": "destroy", "guessedtype": "function"}, "rebuild": {"params": [{"type": "CustomEvent", "name": "e", "description": "  The calling change event"}], "description": "Rebuild the markup.", "guessedname": "rebuild", "guessedtype": "function"}, "update": {"params": [{"type": "CustomEvent", "name": "e", "description": "  The calling change event"}], "description": "Swap the link and span nodes if appropriate.", "guessedname": "update", "guessedtype": "function"}, "render": {"return": {"type": "HTMLElement", "description": ""}, "params": [{"type": "string", "name": "id_base", "description": "  used to create unique ids for generated nodes"}], "description": "Generate the nodes and return the appropriate node given the current\npagination state.", "guessedname": "render", "guessedtype": "function"}}, "file": "FirstPageLink.js", "guessedtype": "function", "shortname": "Paginator.ui.FirstPageLink", "configs": {"firstPageLinkLabel": {"default": "'&lt;&lt; first'", "description": "Used as innerHTML for the first page link/span.", "guessedname": "firstPageLinkLabel", "guessedtype": "property"}, "firstPageLinkClass": {"default": "'yui-paginator-first'", "description": "CSS class assigned to the link/span", "guessedname": "firstPageLinkClass", "guessedtype": "property"}}, "description": "ui Component to generate the link to jump to the first page."}, "Node~optimizations": {"name": "Node~optimizations", "namespace": "", "module": "node", "guessedname": "class_name_re", "methods": {"getAncestorByTagName": {"return": {"type": "Node", "description": ""}, "params": [{"type": "String", "name": "tag_name", "description": "  tag name to search for"}, {"type": "Boolean", "name": "test_self", "description": "  pass true to include the element itself in the scan"}], "description": "<p>Searches for an ancestor by tag name.  This is significantly faster\nthan using Y.node.ancestor('tagname').</p>", "guessedname": "getAncestorByTagName", "guessedtype": "function"}, "getAncestorByClassName": {"return": {"type": "Node", "description": ""}, "params": [{"type": "String|Regexp", "name": "class_name", "description": "  class to search for"}, {"type": "Boolean", "name": "test_self", "description": "  pass true to include the element itself in the scan"}], "description": "<p>Searches for an ancestor by class name.  This is significantly faster\nthan using Y.node.ancestor('.classname'), and it accepts a regular\nexpression.</p>", "guessedname": "getAncestorByClassName", "guessedtype": "function"}, "ancestor": {"return": {"type": "Node", "description": ""}, "params": [{"type": "String|Function", "name": "fn", "description": "  selector string or boolean method for testing elements"}, {"type": "Boolean", "name": "test_self", "description": "  pass true to include the element itself in the scan"}], "description": "<p>Patch to speed up search for a single class name or single tag name.\nTo use a regular expression, call getAncestorByClassName().</p>", "guessedname": "orig_ancestor", "guessedtype": "property"}, "all": {"return": {"type": "Node", "description": ""}, "params": [{"type": "String|Function", "name": "fn", "description": "  selector string or boolean method for testing elements"}, {"type": "Boolean", "name": "test_self", "description": "  pass true to include the element itself in the scan"}], "description": "<p>Patch to speed up search for a single class name or single tag name.\nTo use a regular expression, call getElementsByClassName().</p>", "guessedname": "orig_all", "guessedtype": "property"}, "getElementsByClassName": {"return": {"type": "NodeList", "description": ""}, "params": [{"type": "String|Regexp", "name": "class_name", "description": "  class to search for"}, {"type": "String", "name": "tag_name", "description": "  optional tag name to filter by"}], "description": "<p>Searches for descendants by class name.  Unlike Y.all(), this\nfunction accepts a regular expression.</p>", "guessedname": "getElementsByClassName", "guessedtype": "function"}}, "file": "Optimizations.js", "guessedtype": "property", "shortname": "Node~optimizations", "description": "Optimizations for searching DOM tree."}, "Paginator.ui.LastPageLink": {"properties": {"current": {"guessedname": "current", "type": "HTMLElement", "description": "Currently placed HTMLElement node", "private": "", "guessedtype": "property"}, "span": {"guessedname": "span", "type": "HTMLElement", "description": "Span node (inactive link)", "private": "", "guessedtype": "property"}, "link": {"guessedname": "link", "type": "HTMLElement", "description": "Link HTMLElement node", "private": "", "guessedtype": "property"}, "na": {"guessedname": "na", "type": "HTMLElement", "description": "Empty place holder node for when the last page link is inappropriate to\ndisplay in any form (unlimited paging).", "private": "", "guessedtype": "property"}}, "name": "Paginator.ui.LastPageLink", "constructors": [{"params": [{"type": "Pagintor", "name": "p", "description": "  Paginator instance to attach to"}], "description": "ui Component to generate the link to jump to the last page."}], "namespace": "", "module": "gallery-paginator", "events": {"lastPageLinkClassChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "lastPageLinkClassChange", "description": "Fires when the value for the configuration attribute 'lastPageLinkClass' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "lastPageLinkLabelChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "lastPageLinkLabelChange", "description": "Fires when the value for the configuration attribute 'lastPageLinkLabel' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "LastPageLink", "methods": {"onClick": {"params": [{"type": "DOMEvent", "name": "e", "description": "  The click event"}], "description": "Listener for the link's onclick event.  Passes to setPage method.", "guessedname": "onClick", "guessedtype": "function"}, "destroy": {"private": "", "description": "Removes the link/span node and clears event listeners", "guessedname": "destroy", "guessedtype": "function"}, "rebuild": {"params": [{"type": "CustomEvent", "name": "e", "description": "  The calling change event (ignored)"}], "description": "Rebuild the markup.", "guessedname": "rebuild", "guessedtype": "function"}, "update": {"params": [{"type": "CustomEvent", "name": "e", "description": "  The calling change event (ignored)"}], "description": "Swap the link, span, and na nodes if appropriate.", "guessedname": "update", "guessedtype": "function"}, "render": {"return": {"type": "HTMLElement", "description": ""}, "params": [{"type": "string", "name": "id_base", "description": "  used to create unique ids for generated nodes"}], "description": "Generate the nodes and return the appropriate node given the current\npagination state.", "guessedname": "render", "guessedtype": "function"}}, "file": "LastPageLink.js", "guessedtype": "function", "shortname": "Paginator.ui.LastPageLink", "configs": {"lastPageLinkClass": {"default": "'yui-paginator-last'", "description": "CSS class assigned to the link/span", "guessedname": "lastPageLinkClass", "guessedtype": "property"}, "lastPageLinkLabel": {"default": "'last &gt;&gt;'", "description": "Used as innerHTML for the last page link/span.", "guessedname": "lastPageLinkLabel", "guessedtype": "property"}}, "description": "ui Component to generate the link to jump to the last page."}, "NodeList": {"shortname": "NodeList", "namespace": "", "name": "NodeList", "methods": {"slice": {"return": {"type": "NodeList", "description": "A new NodeList comprised of this NodeList joined with the input."}, "params": [{"type": "Number", "name": "begin", "description": " Zero-based index at which to begin extraction.\nAs a negative index, start indicates an offset from the end of the sequence. slice(-2) extracts the second-to-last element and the last element in the sequence."}, {"type": "Number", "name": "end", "description": " Zero-based index at which to end extraction. slice extracts up to but not including end.\nslice(1,4) extracts the second element through the fourth element (elements indexed 1, 2, and 3).\nAs a negative index, end indicates an offset from the end of the sequence. slice(2,-1) extracts the third element through the second-to-last element in the sequence.\nIf end is omitted, slice extracts to the end of the sequence."}], "description": "Returns a new NodeList comprising the Nodes in the given range."}, "shift": {"return": {"type": "Node", "description": "The first item in the NodeList."}, "description": "Removes the first item from the NodeList and returns it."}, "unshift": {"params": [{"type": "Node | DOMNode", "name": "nodeN", "description": " One or more nodes to add to the NodeList."}], "description": "Adds the given Node(s) to the beginning of the NodeList."}, "pop": {"return": {"type": "Node", "description": "The last item in the NodeList."}, "description": "Removes the first last from the NodeList and returns it."}, "splice": {"return": {"type": "NodeList", "description": "The element(s) removed."}, "params": [{"type": "Number", "name": "index", "description": " Index at which to start changing the array. If negative, will begin that many elements from the end."}, {"type": "Number", "name": "howMany", "description": " An integer indicating the number of old array elements to remove. If howMany is 0, no elements are removed. In this case, you should specify at least one new element. If no howMany parameter is specified (second syntax above, which is a SpiderMonkey extension), all elements after index are removed.\n{Node | DOMNode| element1, ..., elementN \nThe elements to add to the array. If you don't specify any elements, splice simply removes elements from the array."}], "description": "Changes the content of the NodeList, adding new elements while removing old elements."}, "push": {"params": [{"type": "Node | DOMNode", "name": "nodeN", "description": " One or more nodes to add to the end of the NodeList."}], "description": "Adds the given Node(s) to the end of the NodeList."}, "concat": {"return": {"type": "NodeList", "description": "A new NodeList comprised of this NodeList joined with the input."}, "params": [{"type": "NodeList | Array", "name": "valueN", "description": " Arrays/NodeLists and/or values to\nconcatenate to the resulting NodeList"}], "description": "Returns a new NodeList combining the given NodeList(s)"}}}, "ComplexMath": {"name": "ComplexMath", "namespace": "", "module": "gallery-complexnumber", "methods": {"divide": {"return": {"type": "number", "description": "v1/v2"}, "params": [{"type": "number", "name": "v1", "description": ""}, {"type": "number", "name": "v2", "description": ""}], "guessedname": "divide", "guessedtype": "function"}, "pow": {"return": {"type": "number", "description": "value raised to the exponent"}, "params": [{"type": "number", "name": "v", "description": "  value"}, {"type": "number", "name": "e", "description": "  exponent"}], "guessedname": "pow", "guessedtype": "function"}, "conjugate": {"return": {"type": "number", "description": "complex conjugate of the argument"}, "params": [{"type": "number", "name": "v", "description": ""}], "guessedname": "conjugate", "guessedtype": "function"}, "cosh": {"return": {"type": "number", "description": "hyperbolic cosine of the argument"}, "params": [{"type": "number", "name": "v", "description": ""}], "guessedname": "cosh", "guessedtype": "function"}, "phase": {"return": {"type": "number", "description": "phase of the argument"}, "params": [{"type": "number", "name": "v", "description": ""}], "guessedname": "phase", "guessedtype": "function"}, "acosh": {"return": {"type": "number", "description": "inverse hyperbolic cosine of the argument"}, "params": [{"type": "number", "name": "v", "description": ""}], "guessedname": "acosh", "guessedtype": "function"}, "isComplexNumber": {"return": {"type": "boolean", "description": "true if the argument is a ComplexNumber"}, "guessedname": "isComplexNumber", "guessedtype": "function"}, "tan": {"return": {"type": "number", "description": "tangent of the argument"}, "params": [{"type": "number", "name": "v", "description": ""}], "guessedname": "tan", "guessedtype": "function"}, "log": {"return": {"type": "number", "description": "natural logarithm of the argument"}, "params": [{"type": "number", "name": "v", "description": ""}], "guessedname": "log", "guessedtype": "function"}, "atanh": {"return": {"type": "number", "description": "inverse hyperbolic tangent of the argument"}, "params": [{"type": "number", "name": "v", "description": ""}], "guessedname": "atanh", "guessedtype": "function"}, "negative": {"return": {"type": "number", "description": "negative of the argument"}, "params": [{"type": "number", "name": "v", "description": ""}], "guessedname": "negative", "guessedtype": "function"}, "sqrt": {"return": {"type": "number", "description": "square root of the argument"}, "params": [{"type": "number", "name": "v", "description": ""}], "guessedname": "sqrt", "guessedtype": "function"}, "add": {"return": {"type": "number", "description": "sum of all the arguments (either passed separately or as an array)"}, "guessedname": "add", "guessedtype": "function"}, "abs": {"return": {"type": "number", "description": "absolute value (magnitude) of the argument"}, "params": [{"type": "number", "name": "v", "description": ""}], "guessedname": "abs", "guessedtype": "function"}, "sin": {"return": {"type": "number", "description": "sine of the argument"}, "params": [{"type": "number", "name": "v", "description": ""}], "guessedname": "sin", "guessedtype": "function"}, "asinh": {"return": {"type": "number", "description": "inverse hyperbolic sine of the argument"}, "params": [{"type": "number", "name": "v", "description": ""}], "guessedname": "asinh", "guessedtype": "function"}, "cos": {"return": {"type": "number", "description": "cosine of the argument"}, "params": [{"type": "number", "name": "v", "description": ""}], "guessedname": "cos", "guessedtype": "function"}, "sinh": {"return": {"type": "number", "description": "hyperbolic sine of the argument"}, "params": [{"type": "number", "name": "v", "description": ""}], "guessedname": "sinh", "guessedtype": "function"}, "multiply": {"return": {"type": "number", "description": "product of all the arguments (either passed separately or as an array)"}, "guessedname": "multiply", "guessedtype": "function"}, "subtract": {"return": {"type": "number", "description": "v1-v2"}, "params": [{"type": "number", "name": "v1", "description": ""}, {"type": "number", "name": "v2", "description": ""}], "guessedname": "subtract", "guessedtype": "function"}, "parallel": {"return": {"type": "number", "description": "net value of N impedances in parallel (either passed separately or as an array)"}, "guessedname": "parallel", "guessedtype": "function"}, "addReciprocals": {"return": {"type": "number", "description": "sum of the reciprocals of all the arguments (either passed separately or as an array)"}, "guessedname": "addReciprocals", "guessedtype": "function"}, "rotate": {"return": {"type": "number", "description": "phase of the argument"}, "params": [{"type": "number", "name": "v", "description": ""}, {"type": "number", "name": "a", "description": "  angle in radians"}], "guessedname": "rotate", "guessedtype": "function"}, "tanh": {"return": {"type": "number", "description": "hyperbolic tangent of the argument"}, "params": [{"type": "number", "name": "v", "description": ""}], "guessedname": "tanh", "guessedtype": "function"}, "exp": {"return": {"type": "number", "description": "e raised to the argument"}, "params": [{"type": "number", "name": "v", "description": ""}], "guessedname": "exp", "guessedtype": "function"}}, "file": "ComplexMath.js", "shortname": "ComplexMath", "properties": {"I": {"description": "Square root of -1.", "guessedname": "I", "guessedtype": "property"}, "ZERO": {"description": "Zero.", "guessedname": "ZERO", "guessedtype": "property"}}, "description": "<p>This collection of functions provides the complex number equivalent\nof the built-in JavaScript Math namespace, along with the basic\narithmetic operations (since JavaScript does not support operator\noverloading).</p>"}, "Accordion": {"name": "Accordion", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Widget configuration"}], "description": "<p>Class to manage an accordion, either horizontally or vertically.\nAllows either multiple open sections or only a single open section.\nProvides option to always force at lease one item to be open.</p>\n<p>An accordion can be constructed from existing markup or from strings\ncontaining HTML.  Existing markup can be provided either by setting\n<code>contentBox</code> or by specifying CSS selectors.  See the\n<code>titles</code> and <code>sections</code> attributes.</p>\n<p>When constructing from existing markup via <code>contentBox</code>,\nuse an unordered list (&lt;ul&gt;).  Each item must contain two\n&lt;div&gt;'s.  The first one is used as the section title, and the\nsecond one is used as the section content.</p>\n<p>Animation is optional.  If the anim module is not available,\nanimation is automatically turned off.</p>\n<p>When using a horizontal accordion:</p>\n<ul>\n<li>The widget's container must have a height.</li>\n<li>Each title must have both a width and height.</li>\n<li>Each section must have a width.</li>\n</ul>\n<p>IE doesn't accept zero height divs, so we use 1px height and zero\nopacity.  IE6 doesn't always render correctly with opacity set, so if\nanimation is turned off, we don't use opacity at all.</p>"}], "namespace": "", "module": "gallery-accordion-horiz-vert", "events": {"insert": {"params": [{"type": "int", "name": "index", "description": "  the insertion index"}, {"type": "int", "name": "size", "description": "  the final size of the section title, after animation (if any)"}], "description": "Fires after a section is inserted."}, "beforeInsert": {"params": [{"type": "int", "name": "index", "description": "  the insertion index"}], "description": "Fires before a section is inserted."}, "beforeRemove": {"params": [{"type": "int", "name": "index", "description": "  the section index"}], "description": "Fires before a section is removed."}, "remove": {"params": [{"type": "int", "name": "index", "description": "  the section index"}], "description": "Fires after a section is removed."}, "beforeClose": {"params": [{"type": "int", "name": "index", "description": "  the section index"}], "description": "Fires before a section is closed."}, "beforeOpen": {"params": [{"type": "int", "name": "index", "description": "  the section index"}], "description": "Fires before a section is opened."}, "close": {"params": [{"type": "int", "name": "index", "description": "  the section index"}], "description": "Fires after a section is closed.", "guessedname": "open_class", "guessedtype": "property"}, "open": {"params": [{"type": "int", "name": "index", "description": "  the section index"}], "description": "Fires after a section is opened."}}, "methods": {"allSectionsClosed": {"return": {"type": "boolean", "description": "<code>true</code> if all sections are closed"}, "guessedname": "allSectionsClosed", "guessedtype": "function"}, "findSection": {"return": {"type": "int", "description": "the index of the containing section, or -1 if not found"}, "params": [{"type": "String|Node", "name": "any", "description": " element inside the section or title"}], "guessedname": "findSection", "guessedtype": "function"}, "getSection": {"return": {"type": "Node", "description": "the container for the section content"}, "params": [{"type": "int", "name": "index", "description": "  the section index"}], "guessedname": "getSection", "guessedtype": "function"}, "setSection": {"params": [{"type": "int", "name": "index", "description": "  the section index"}, {"type": "String|Node", "name": "content", "description": "  the section content"}], "description": "Sets the contents of the specified section.", "guessedname": "setSection", "guessedtype": "function"}, "appendSection": {"params": [{"type": "String|Node", "name": "title", "description": "  the section title content"}, {"type": "String|Node", "name": "content", "description": "  the section content"}], "description": "Appends the section to the accordion.", "guessedname": "appendSection", "guessedtype": "function"}, "setTitle": {"params": [{"type": "int", "name": "index", "description": "  the section index"}, {"type": "String|Node", "name": "title", "description": "  the title content"}], "description": "Sets the contents of the specified section title.", "guessedname": "setTitle", "guessedtype": "function"}, "prependSection": {"params": [{"type": "String|Node", "name": "title", "description": "  the section title content"}, {"type": "String|Node", "name": "content", "description": "  the section content"}], "description": "Prepends the section to the accordion.", "guessedname": "prependSection", "guessedtype": "function"}, "isSectionOpen": {"return": {"type": "boolean", "description": "<code>true</code> if the section is open"}, "guessedname": "isSectionOpen", "guessedtype": "function"}, "closeSection": {"params": [{"type": "int", "name": "index", "description": "  the section index"}], "description": "Close the specified section.", "guessedname": "closeSection", "guessedtype": "function"}, "openSection": {"params": [{"type": "int", "name": "index", "description": "  the section index"}], "description": "Open the specified section.", "guessedname": "openSection", "guessedtype": "function"}, "getSectionCount": {"return": {"type": "int", "description": "total number of sections"}, "guessedname": "getSectionCount", "guessedtype": "function"}, "openAllSections": {"description": "Open all sections, if possible.", "guessedname": "openAllSections", "guessedtype": "function"}, "toggleSection": {"params": [{"type": "int", "name": "index", "description": "  the section index"}], "description": "Show/hide the section content.", "guessedname": "toggleSection", "guessedtype": "function"}, "getTitle": {"return": {"type": "Node", "description": "the container for the section title"}, "params": [{"type": "int", "name": "index", "description": "  the section index"}], "guessedname": "getTitle", "guessedtype": "function"}, "closeAllSections": {"description": "Close all sections, if possible.", "guessedname": "closeAllSections", "guessedtype": "function"}, "removeSection": {"params": [{"type": "int", "name": "index", "description": "  the section index"}], "description": "Removes the specified section.", "guessedname": "removeSection", "guessedtype": "function"}, "insertSection": {"params": [{"type": "int", "name": "index", "description": "  the insertion index"}, {"type": "String|Node", "name": "title", "description": "  the section title content"}, {"type": "String|Node", "name": "content", "description": "  the section content"}], "description": "Inserts the section into the accordion at the specified location.", "guessedname": "insertSection", "guessedtype": "function"}, "_getClip": {"return": {"type": "Node", "description": "the clipping container for the section content"}, "protected": "", "params": [{"type": "int", "name": "index", "description": "  the section index"}], "guessedname": "_getClip", "guessedtype": "function"}, "allSectionsOpen": {"return": {"type": "boolean", "description": "<code>true</code> if all sections are open"}, "guessedname": "allSectionsOpen", "guessedtype": "function"}}, "file": "Accordion.js", "shortname": "Accordion", "configs": {"allowMultipleOpen": {"default": "false", "type": "{boolean}", "description": "Whether or not to allow multiple sections to be open at the same\ntime.  If not, at most one section at a time will be open.", "guessedname": "allowMultipleOpen", "guessedtype": "property"}, "animateEasing": {"default": "whatever Y.Anim default is", "type": "{function}", "description": "Easing applied to all animations.", "guessedname": "animateEasing", "guessedtype": "property"}, "replaceTitleContainer": {"default": "true", "type": "{boolean}", "description": "Whether or not to replace the default title container node, when the\nsupplied title is a node.  (If the supplied title is markup, it is\nalways inserted inside the default title container.)", "guessedname": "replaceTitleContainer", "guessedtype": "property"}, "titles": {"guessedtype": "property", "type": "{String|Array}", "description": "A CSS selector for locating nodes, an array of nodes, or an array\nof strings containing markup.  This is used to define the initial\nset of section titles.", "guessedname": "titles", "writeonce": ""}, "animateRender": {"default": "false", "type": "{boolean}", "description": "Whether or not to animate the initial rendering of the widget.", "guessedname": "animateRender", "guessedtype": "property"}, "animateDuration": {"default": "whatever Y.Anim default is", "type": "{int}", "description": "Duration of all animations.", "guessedname": "animateDuration", "guessedtype": "property"}, "replaceSectionContainer": {"default": "true", "type": "{boolean}", "description": "Whether or not to replace the default section container node, when\nthe supplied title is a node.  (If the supplied content is markup,\nit is always inserted inside the default section container.)", "guessedname": "replaceSectionContainer", "guessedtype": "property"}, "horizontal": {"description": "Whether or not the accordion is horizontal.", "writeonce": "", "default": "false", "guessedname": "horizontal", "guessedtype": "property", "type": "{boolean}"}, "animateOpenClose": {"default": "true", "type": "{boolean}", "description": "Whether or not to animate opening and closing of sections.", "guessedname": "animateOpenClose", "guessedtype": "property"}, "sections": {"guessedtype": "property", "type": "{String|Array}", "description": "A CSS selector for locating nodes, an array of nodes, or an array\nof strings containing markup.  This is used to define the initial\nset of section contents.", "guessedname": "sections", "writeonce": ""}, "animateInsertRemove": {"default": "true", "type": "{boolean}", "description": "Whether or not to animate insertion and removal of sections.", "guessedname": "animateInsertRemove", "guessedtype": "property"}, "allowAllClosed": {"default": "false", "type": "{boolean}", "description": "Whether or not to allow all sections to be closed at the same time.\nIf not, at least one section will always be open.", "guessedname": "allowAllClosed", "guessedtype": "property"}}, "description": "<p>Class to manage an accordion, either horizontally or vertically.\nAllows either multiple open sections or only a single open section.\nProvides option to always force at lease one item to be open.</p>\n<p>An accordion can be constructed from existing markup or from strings\ncontaining HTML.  Existing markup can be provided either by setting\n<code>contentBox</code> or by specifying CSS selectors.  See the\n<code>titles</code> and <code>sections</code> attributes.</p>\n<p>When constructing from existing markup via <code>contentBox</code>,\nuse an unordered list (&lt;ul&gt;).  Each item must contain two\n&lt;div&gt;'s.  The first one is used as the section title, and the\nsecond one is used as the section content.</p>\n<p>Animation is optional.  If the anim module is not available,\nanimation is automatically turned off.</p>\n<p>When using a horizontal accordion:</p>\n<ul>\n<li>The widget's container must have a height.</li>\n<li>Each title must have both a width and height.</li>\n<li>Each section must have a width.</li>\n</ul>\n<p>IE doesn't accept zero height divs, so we use 1px height and zero\nopacity.  IE6 doesn't always render correctly with opacity set, so if\nanimation is turned off, we don't use opacity at all.</p>"}, "MathFunction.InverseHyperbolicCosine": {"name": "MathFunction.InverseHyperbolicCosine", "constructors": [{"params": [{"type": "MathFunction", "name": "f", "description": ""}], "description": "<p>Inverse hyperbolic cosine.</p>"}], "namespace": "MathFunction", "module": "gallery-mathcanvas", "extends": "MathFunction.FunctionWithArgs", "superclass": "MathFunction.FunctionWithArgs", "file": "InverseHyperbolicCosine.js", "shortname": "InverseHyperbolicCosine", "description": "<p>Inverse hyperbolic cosine.</p>"}, "Paginator.ui.PreviousPageLink": {"properties": {"current": {"guessedname": "current", "type": "HTMLElement", "description": "Currently placed HTMLElement node", "private": "", "guessedtype": "property"}, "span": {"guessedname": "span", "type": "HTMLElement", "description": "Span node (inactive link)", "private": "", "guessedtype": "property"}, "link": {"guessedname": "link", "type": "HTMLElement", "description": "Link node", "private": "", "guessedtype": "property"}}, "name": "Paginator.ui.PreviousPageLink", "constructors": [{"params": [{"type": "Pagintor", "name": "p", "description": "  Paginator instance to attach to"}], "description": "ui Component to generate the link to jump to the previous page."}], "namespace": "", "module": "gallery-paginator", "events": {"previousPageLinkClassChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "previousPageLinkClassChange", "description": "Fires when the value for the configuration attribute 'previousPageLinkClass' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "previousPageLinkLabelChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "previousPageLinkLabelChange", "description": "Fires when the value for the configuration attribute 'previousPageLinkLabel' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "PreviousPageLink", "methods": {"onClick": {"params": [{"type": "DOMEvent", "name": "e", "description": "  The click event"}], "description": "Listener for the link's onclick event.  Passes to setPage method.", "guessedname": "onClick", "guessedtype": "function"}, "destroy": {"private": "", "description": "Removes the link/span node and clears event listeners", "guessedname": "destroy", "guessedtype": "function"}, "update": {"params": [{"type": "CustomEvent", "name": "e", "description": "  The calling change event"}], "description": "Swap the link and span nodes if appropriate.", "guessedname": "update", "guessedtype": "function"}, "render": {"return": {"type": "HTMLElement", "description": ""}, "params": [{"type": "string", "name": "id_base", "description": "  used to create unique ids for generated nodes"}], "description": "Generate the nodes and return the appropriate node given the current\npagination state.", "guessedname": "render", "guessedtype": "function"}}, "file": "PreviousPageLink.js", "guessedtype": "function", "shortname": "Paginator.ui.PreviousPageLink", "configs": {"previousPageLinkLabel": {"default": "'&lt; prev'", "description": "Used as innerHTML for the previous page link/span.", "guessedname": "previousPageLinkLabel", "guessedtype": "property"}, "previousPageLinkClass": {"default": "'yui-paginator-previous'", "description": "CSS class assigned to the link/span", "guessedname": "previousPageLinkClass", "guessedtype": "property"}}, "description": "ui Component to generate the link to jump to the previous page."}, "MathFunction.Pi": {"name": "MathFunction.Pi", "constructors": [{"description": "<p>Pi</p>"}], "namespace": "MathFunction", "module": "gallery-mathcanvas", "extends": "MathFunction", "superclass": "MathFunction", "file": "Pi.js", "shortname": "Pi", "description": "<p>Pi</p>"}, "MathFunction.Arccosine": {"name": "MathFunction.Arccosine", "constructors": [{"params": [{"type": "MathFunction", "name": "f", "description": ""}], "description": "<p>Inverse trigonometric cosine.</p>"}], "namespace": "MathFunction", "module": "gallery-mathcanvas", "extends": "MathFunction.FunctionWithArgs", "superclass": "MathFunction.FunctionWithArgs", "file": "Arccosine.js", "shortname": "Arccosine", "description": "<p>Inverse trigonometric cosine.</p>"}, "MathCanvas": {"name": "MathCanvas", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Widget configuration"}], "description": "<p>Displays an arithmetical expression the way you would write it on\npaper.</p>"}], "namespace": "", "module": "gallery-mathcanvas", "extends": "Widget", "superclass": "Widget", "file": "MathCanvas.js", "shortname": "MathCanvas", "configs": {"minWidth": {"type": "{Integer}", "description": "The minimum width of the canvas.  If the expression is wider, the\nwidth will increase to fit.", "guessedname": "minWidth", "guessedtype": "property"}, "minHeight": {"type": "{Integer}", "description": "The minimum height of the canvas.  If the expression is taller, the\nheight will increase to fit.", "guessedname": "minHeight", "guessedtype": "property"}, "fontName": {"type": "{String}", "description": "The font name to use.", "guessedname": "fontName", "guessedtype": "property"}, "fontSize": {"type": "{number}", "description": "The font size to use, in em's.", "guessedname": "fontSize", "guessedtype": "property"}, "func": {"type": "{Y.MathFunction|String}", "description": "The function to display.", "guessedname": "func", "guessedtype": "property"}}, "description": "<p>Displays an arithmetical expression the way you would write it on\npaper.</p>"}, "MathFunction.Value": {"name": "MathFunction.Value", "constructors": [{"params": [{"type": "number", "name": "value", "description": ""}], "description": "<p>Constant value</p>"}], "namespace": "MathFunction", "module": "gallery-mathcanvas", "extends": "MathFunction", "superclass": "MathFunction", "file": "Value.js", "shortname": "Value", "description": "<p>Constant value</p>"}, "Paginator.ui.ValidationPageLinks": {"name": "Paginator.ui.ValidationPageLinks", "constructors": [{"params": [{"type": "Pagintor", "name": "p", "description": "  Paginator instance to attach to"}], "description": "Adds per-page error notification to Paginator.ui.PageLinks."}], "namespace": "", "module": "gallery-paginator", "events": {"pageStatusChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "pageStatusChange", "description": "Fires when the value for the configuration attribute 'pageStatus' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "ValidationPageLinks", "file": "ValidationPageLinks.js", "guessedtype": "function", "shortname": "Paginator.ui.ValidationPageLinks", "configs": {"pageStatus": {"description": "Array of status strings for each page.  If the status value for a page\nis not empty, it is used to build a CSS class for the page:\nyui3-has&lt;status&gt;", "guessedname": "pageStatus", "guessedtype": "property"}}, "description": "Adds per-page error notification to Paginator.ui.PageLinks."}, "MathFunction.Logarithm": {"name": "MathFunction.Logarithm", "constructors": [{"params": [{"type": "MathFunction", "name": "b", "description": "  base"}, {"type": "MathFunction", "name": "v", "description": "  value"}], "description": "<p>Logarithm.</p>"}], "namespace": "MathFunction", "module": "gallery-mathcanvas", "extends": "MathFunction.FunctionWithArgs", "superclass": "MathFunction.FunctionWithArgs", "file": "Logarithm.js", "shortname": "Logarithm", "description": "<p>Logarithm.</p>"}, "MultiObject": {"name": "MultiObject", "constructors": [{"params": [{"type": "Array", "name": "items", "description": "  initial set of items"}, {"type": "Object", "name": "config", "description": "  configuration\n<dl>\n<dt>return_all_results</dt>\n<dd>Default: false.  If this is true, then all delegated functions\nwill return an array of results instead of the result from the\nprimary item.  Note that functions which return \"undefined\" or\nthe item itself always cause the MultiObject to be returned,\nto support chaining.</dd>\n<dt>primary_item_index</dt>\n<dd>Default: 0.  When return_all_results=false, this is the index of\nthe item which generates the return result for all delegated\nfunctions.</dd>\n</dl>"}], "description": "<p>MultiObject exposes exactly the same API as each individual object,\nboth functions and events, and the state of all the objects is kept in\nsync.  The objects must maintain all state via\nY.Attribute.<p>\n<p>MultiObject is similar to Y.ArrayList, except:</p>\n<ul>\n<li>All objects must be of the same type, since MultiObject is supposed\nto behave exactly like any single object.</li>\n<li>MultiObject automatically delegates all methods.</li>\n<li>By default, MultiObject returns the result from the first object\nin the list, not an array of results.</li>\n<li>MultiObject propagates all events.</li>\n</ul>\n<p>Internally, MultiObject delegates all methods by name, so it supports\nY.Do.before, Y.Do.after, etc.</p>\n<p>To avoid shadowing potential function names, we inherit from\nY.EventTarget and use multi_ as the prefix for our own functions.</p>"}], "namespace": "", "module": "gallery-multiobject", "methods": {"multi_get_primary_item_index": {"return": {"type": "", "description": "the index of the primary item"}, "guessedname": "multi_get_primary_item_index", "guessedtype": "function"}, "multi_set_primary_item_index": {"params": [{"type": "int", "name": "index", "description": "  the index of the primary item"}], "guessedname": "multi_set_primary_item_index", "guessedtype": "function"}, "multi_destroy": {"description": "Destroys the MultiObject, but not the individual objects.\n<code>destroy()</code> is, of course, delegated.", "guessedname": "multi_destroy", "guessedtype": "function"}, "multi_get_return_all_results": {"return": {"type": "", "description": "true if all results will be returned by delegated functions"}, "guessedname": "multi_get_return_all_results", "guessedtype": "function"}, "multi_get_all": {"return": {"type": "Array", "description": "results from delegating the named function"}, "params": [{"type": "String", "name": "f", "description": "  name of the function to invoke"}, {"type": "mixed", "name": "arg*", "description": "  0..n arguments to pass to the function"}], "description": "Return an array of all the individual results from calling the\nspecified function.  This is only useful if return_all_results=false.", "guessedname": "multi_get_all", "guessedtype": "function"}, "multi_set_return_all_results": {"params": [{"type": "boolean", "name": "all", "description": "  true if delegated functions should return all results"}], "guessedname": "multi_set_return_all_results", "guessedtype": "function"}}, "extends": "EventTarget", "superclass": "EventTarget", "file": "MultiObject.js", "shortname": "MultiObject", "description": "<p>MultiObject exposes exactly the same API as each individual object,\nboth functions and events, and the state of all the objects is kept in\nsync.  The objects must maintain all state via\nY.Attribute.<p>\n<p>MultiObject is similar to Y.ArrayList, except:</p>\n<ul>\n<li>All objects must be of the same type, since MultiObject is supposed\nto behave exactly like any single object.</li>\n<li>MultiObject automatically delegates all methods.</li>\n<li>By default, MultiObject returns the result from the first object\nin the list, not an array of results.</li>\n<li>MultiObject propagates all events.</li>\n</ul>\n<p>Internally, MultiObject delegates all methods by name, so it supports\nY.Do.before, Y.Do.after, etc.</p>\n<p>To avoid shadowing potential function names, we inherit from\nY.EventTarget and use multi_ as the prefix for our own functions.</p>"}, "MathCanvas.RectList": {"name": "MathCanvas.RectList", "constructors": [{"description": "<p>Manages all the bounding rectangles for an expression.</p>\n<p>Each item contains rect (top,left,bottom,right), midline,\nfont_size(%), func.</p>"}], "namespace": "MathCanvas", "module": "gallery-mathcanvas", "methods": {"findIndex": {"return": {"type": "", "description": "index of item for specified MathFunction, or -1 if not found"}, "params": [{"type": "MathFunction", "name": "f", "description": "  search target"}], "guessedname": "findIndex", "guessedtype": "function"}, "find": {"return": {"type": "", "description": "data for specified MathFunction, or null if not found"}, "params": [{"type": "MathFunction", "name": "f", "description": "  search target"}], "guessedname": "find", "guessedtype": "function"}, "get": {"return": {"type": "", "description": "item at index"}, "params": [{"type": "int", "name": "index", "description": ""}], "guessedname": "get", "guessedtype": "function"}, "cover": {"return": {"type": "", "description": "rectangle convering both input arguments"}, "static": "", "params": [{"type": "Rect", "name": "r1", "description": "  rectangle"}, {"type": "Rect", "name": "r2", "description": "  rectangle"}], "guessedname": "cover", "guessedtype": "function"}, "xcenter": {"return": {"type": "", "description": "horizontal center"}, "static": "", "params": [{"type": "Rect", "name": "r", "description": "  rectangle"}], "guessedname": "xcenter", "guessedtype": "function"}, "setMidline": {"params": [{"type": "int", "name": "index", "description": ""}, {"type": "int", "name": "y", "description": "  midline"}], "description": "Set the midline of the specified rectangle.", "guessedname": "setMidline", "guessedtype": "function"}, "height": {"return": {"type": "", "description": "height"}, "static": "", "params": [{"type": "Rect", "name": "r", "description": "  rectangle"}], "guessedname": "height", "guessedtype": "function"}, "width": {"return": {"type": "", "description": "width"}, "static": "", "params": [{"type": "Rect", "name": "r", "description": "  rectangle"}], "guessedname": "width", "guessedtype": "function"}, "add": {"return": {"type": "", "description": "index of inserted item"}, "params": [{"type": "Rect", "name": "r", "description": ""}, {"type": "int", "name": "midline", "description": ""}, {"type": "int", "name": "font_size", "description": "  percentage"}, {"type": "MathFunction", "name": "func", "description": ""}], "guessedname": "add", "guessedtype": "function"}, "getBounds": {"return": {"type": "", "description": "the bounding rect of all the rects in the list"}, "guessedname": "getBounds", "guessedtype": "function"}, "shift": {"params": [{"type": "int", "name": "index", "description": ""}, {"type": "int", "name": "dx", "description": "  horizontal shift"}, {"type": "int", "name": "dy", "description": "  vertical shift"}], "description": "Shift the specified rect and all rects inside it.", "guessedname": "shift", "guessedtype": "function"}, "ycenter": {"return": {"type": "", "description": "vertical center"}, "static": "", "params": [{"type": "Rect", "name": "r", "description": "  rectangle"}], "guessedname": "ycenter", "guessedtype": "function"}}, "file": "RectList.js", "shortname": "RectList", "description": "<p>Manages all the bounding rectangles for an expression.</p>\n<p>Each item contains rect (top,left,bottom,right), midline,\nfont_size(%), func.</p>"}, "MathFunction.Arctangent": {"name": "MathFunction.Arctangent", "constructors": [{"params": [{"type": "MathFunction", "name": "f", "description": ""}], "description": "<p>Inverse trigonometric cosine.</p>"}], "namespace": "MathFunction", "module": "gallery-mathcanvas", "extends": "MathFunction.FunctionWithArgs", "superclass": "MathFunction.FunctionWithArgs", "file": "Arctangent.js", "shortname": "Arctangent", "description": "<p>Inverse trigonometric cosine.</p>"}, "io~multiresponse": {"name": "io~multiresponse", "namespace": "", "module": "io", "guessedname": "w", "methods": {"_create": {"return": {"type": "void", "description": ""}, "static": "", "params": [{"type": "object", "name": "o", "description": " Transaction object generated by _create()."}, {"type": "object", "name": "c", "description": " Configuration object passed to YUI.io()."}], "description": "Creates the iframe used in file upload\ntransactions, and binds the response event handler.", "private": ""}, "_startTimeout": {"return": {"type": "void", "description": ""}, "static": "", "params": [{"type": "object", "name": "o", "description": " Transaction object generated by _create()."}, {"type": "object", "name": "c", "description": " Configuration object passed to YUI.io()."}], "description": "Starts timeout count if the configuration object\nhas a defined timeout property.", "private": ""}, "_addData": {"return": {"type": "array", "description": "Array of created fields."}, "static": "", "params": [{"type": "object", "name": "f", "description": " HTML form object."}, {"type": "string", "name": "s", "description": " The key-value POST data."}], "description": "Parses the POST data object and creates hidden form elements\nfor each key-value, and appends them to the HTML form object.", "private": ""}, "_send": {"return": {"type": "void", "description": ""}, "static": "", "params": [{"type": "o", "name": "o", "description": " The transaction object"}, {"type": "object", "name": "uri", "description": " Qualified path to transaction resource."}, {"type": "object", "name": "c", "description": " Configuration object for the transaction."}], "description": "Uploads HTML form data, inclusive of files/attachments,\nusing the iframe created in _create to facilitate the transaction.", "private": ""}, "_clearTimeout": {"return": {"type": "void", "description": ""}, "static": "", "params": [{"type": "number", "name": "id", "description": " - Transaction ID."}], "description": "Clears the timeout interval started by _startTimeout().", "private": ""}, "_handle": {"return": {"type": "void", "description": ""}, "static": "", "params": [{"type": "o", "name": "o", "description": " The transaction object"}, {"type": "object", "name": "c", "description": " Configuration object for the transaction."}], "description": "Bound to the iframe's Load event and processes\nthe response data.", "private": ""}, "_addJSON": {"return": {"type": "array", "description": "created fields."}, "static": "", "params": [{"type": "object", "name": "f", "description": " HTML form object."}, {"type": "string|object", "name": "s", "description": " The JSON data or object to serialize."}], "description": "Adds JSON encoded data to the form.", "private": ""}, "_resetAttrs": {"return": {"type": "void", "description": ""}, "static": "", "params": [{"type": "object", "name": "f", "description": " HTML form object."}, {"type": "object", "name": "a", "description": " Object of original attributes."}], "description": "Reset the HTML form attributes to their original values.", "private": ""}, "_createForm": {"return": {"type": "string", "description": "form id"}, "static": "", "params": [{"type": "object", "name": "c", "description": " Configuration object passed to YUI.io()."}], "description": "Creates a temporary form, if the caller doesn't provide one.", "private": ""}, "_destroy": {"return": {"type": "void", "description": ""}, "static": "", "params": [{"type": "number", "name": "id", "description": " Transaction id."}, {"type": "object", "name": "c", "description": " Configuration object for the transaction."}], "description": "Destroy the iframe and temp form, if any.", "private": ""}, "_removeData": {"return": {"type": "void", "description": ""}, "static": "", "params": [{"type": "object", "name": "f", "description": " HTML form object."}, {"type": "object", "name": "o", "description": " HTML form fields created from configuration.data."}], "description": "Removes the custom fields created to pass additional POST\ndata, along with the HTML form fields.", "private": ""}, "_tE": {"return": {"type": "void", "description": ""}, "static": "", "params": [{"type": "string", "name": "e", "description": " - event to be published"}, {"type": "object", "name": "c", "description": " - configuration data subset for event subscription."}], "description": "Method for creating and subscribing transaction events.", "private": ""}, "_setAttrs": {"return": {"type": "void", "description": ""}, "static": "", "params": [{"type": "object", "name": "f", "description": " HTML form object."}, {"type": "object", "name": "id", "description": " The Transaction ID."}, {"type": "object", "name": "uri", "description": " Qualified path to transaction resource."}, {"type": "string", "name": "method", "description": " POST or GET."}], "description": "Sets the appropriate attributes and values to the HTML\nform, in preparation of a file upload transaction.", "private": ""}}, "file": "multi-response.js", "guessedtype": "property", "shortname": "io~multiresponse", "description": "<p>Extends the IO base class to enable multiple responses using an\niframe as the transport medium.  Each response fires the response event.\nThe only events that are fired are the start and end events.</p>\n<p>All the YUI 3 IO features are supported, so the request can be sent\nas either GET (for simple query args) or POST (for anything, even file\nuploads).  The module uses an iframe to send the request and includes a\ncallback parameter.  (So you cannot include a parameter named\n<q>callback</q>.)  For each response, the server must send a script\nblock invoking the callback, similar to JSONP.  Unlike JSONP, however,\nrequests can only be made to your own server because the callback will\nreference <code>window.parent</code>.  In order to trigger script\nparsing in all browsers, the first chunk of data that the server writes\nto the connection must be at least 1024 bytes, and it must be part of\nthe body, so you will need to explicitly send an empty head.</p>\n<p>Due to the way that the request data is parsed, it is not safe to\nsend JSON-encoded data using the standard YUI 3 IO methods.  However, if\nyou define <code>json</code> in the configuration passed to\n<code>Y.io()</code>, then the data will be passed to the server under\nthe <code>json</code> parameter.  (If you pass an object, it will be\nserialized with <code>Y.JSON.stringify()</code>.)\n<p>To keep the iframe after it has finished loading, set\n<code>debug:true</code> in the configuration passed to\n<code>Y.io()</code>.</p>"}, "MathFunction.Cosine": {"name": "MathFunction.Cosine", "constructors": [{"params": [{"type": "MathFunction", "name": "f", "description": ""}], "description": "<p>Trigonometric cosine.</p>"}], "namespace": "MathFunction", "module": "gallery-mathcanvas", "extends": "MathFunction.FunctionWithArgs", "superclass": "MathFunction.FunctionWithArgs", "file": "Cosine.js", "shortname": "Cosine", "description": "<p>Trigonometric cosine.</p>"}, "Paginator.ui.RowsPerPageDropdown": {"properties": {"all": {"protected": "", "type": "HTMLElement", "description": "option node for the optional All value", "guessedname": "all", "guessedtype": "property"}, "select": {"guessedname": "select", "type": "HTMLElement", "description": "select node", "private": "", "guessedtype": "property"}}, "name": "Paginator.ui.RowsPerPageDropdown", "constructors": [{"params": [{"type": "Pagintor", "name": "p", "description": "  Paginator instance to attach to"}], "description": "ui Component to generate the rows-per-page dropdown"}], "namespace": "", "module": "gallery-paginator", "events": {"rowsPerPageDropdownClassChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "rowsPerPageDropdownClassChange", "description": "Fires when the value for the configuration attribute 'rowsPerPageDropdownClass' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "rowsPerPageOptionsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "rowsPerPageOptionsChange", "description": "Fires when the value for the configuration attribute 'rowsPerPageOptions' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "rowsPerPageDropdownTitleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "rowsPerPageDropdownTitleChange", "description": "Fires when the value for the configuration attribute 'rowsPerPageDropdownTitle' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "RowsPerPageDropdown", "methods": {"render": {"return": {"type": "HTMLElement", "description": ""}, "params": [{"type": "string", "name": "id_base", "description": "  used to create unique ids for generated nodes"}], "description": "Generate the select and option nodes and returns the select node.", "guessedname": "render", "guessedtype": "function"}, "rebuild": {"description": "(Re)generate the select options.", "guessedname": "rebuild", "guessedtype": "function"}, "update": {"params": [{"type": "CustomEvent", "name": "e", "description": "  The calling change event"}], "description": "Select the appropriate option if changed.", "guessedname": "update", "guessedtype": "function"}, "destroy": {"private": "", "description": "Removes the select node and clears event listeners", "guessedname": "destroy", "guessedtype": "function"}, "onChange": {"params": [{"type": "DOMEvent", "name": "e", "description": "  The change event"}], "description": "Listener for the select's onchange event.  Sent to setRowsPerPage method.", "guessedname": "onChange", "guessedtype": "function"}, "_handleTotalRecordsChange": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  attribute change event"}], "description": "Updates the all option value (and Paginator's rowsPerPage attribute if\nnecessary) in response to a change in the Paginator's totalRecords.", "guessedname": "_handleTotalRecordsChange", "guessedtype": "function"}}, "file": "RowsPerPageDropdown.js", "guessedtype": "function", "shortname": "Paginator.ui.RowsPerPageDropdown", "configs": {"rowsPerPageDropdownTitle": {"default": "'Rows per page'", "description": "CSS class assigned to the select node", "guessedname": "rowsPerPageDropdownTitle", "guessedtype": "property"}, "rowsPerPageDropdownClass": {"default": "'yui-paginator-rpp-options'", "description": "CSS class assigned to the select node", "guessedname": "rowsPerPageDropdownClass", "guessedtype": "property"}, "rowsPerPageOptions": {"default": "[]", "description": "Array of available rows-per-page sizes.  Converted into select options.\nArray values may be positive integers or object literals in the form<br>\n{ value : NUMBER, text : STRING }", "guessedname": "rowsPerPageOptions", "guessedtype": "property"}}, "description": "ui Component to generate the rows-per-page dropdown"}, "FormManager": {"name": "FormManager", "constructors": [{"params": [{"type": "String", "name": "form_name", "description": "  The name attribute of the HTML form."}, {"type": "Object", "name": "config", "description": "  Configuration.\n<code>status_node</code> is an optional element in which to display\noverall status.  <code>default_value_map</code> is an optional\nmapping of form element names to default values.  Default values\nencoded in the markup will be merged into this map, but values\npassed to the constructor will take precedence."}], "description": "<p>FormManager provides support for initializing a form, pre-validating\nuser input, and displaying messages returned by the server.</p>\n<p>Also see the documentation for gallery-formmgr-css-validation.</p>\n<p><strong>Required Markup Structure</strong></p>\n<p>Each element (or tighly coupled set of elements) must be contained by\nan element that has the CSS class <code>formmgr-row</code>.  Within each\nrow, validation messages are displayed inside the container with CSS\nclass <code>formmgr-message-text</code>.\n<p>When a message is displayed inside a row, the CSS class\n<code>formmgr-has{type}</code> is placed on the row container and the\ncontaining fieldset (if any), where <code>{type}</code> is the message\ntype passed to <code>displayMessage()</code>.</p>\n<p><strong>Initializing the Form</strong></p>\n<p>Default values can be either encoded in the markup or passed to the\nFormManager constructor via <code>config.default_value_map</code>.  (The\nformer method is obviously better for progressive enhancement.)  The\nvalues passed to the constructor override the values encoded in the\nmarkup.</p>\n<p><code>prepareForm()</code> must be called before the form is\ndisplayed.  To initialize focus to the first element in a form, call\n<code>initFocus()</code>.  If the form is in an overlay, you can delay\nthese calls until just before showing the overlay.</p>\n<p>The default values passed to the constructor are inserted by\n<code>populateForm()</code>.  (This is automatically called by\n<code>prepareForm()</code>.)</p>\n<p><strong>Displaying Messages</strong></p>\n<p>To display a message for a single form row, call\n<code>displayMessage()</code>.  To display a message for the form in\ngeneral, call <code>displayFormMessage()</code>.  These functions can be\nused for initializing the error display when the page loads, for\ndisplaying the results of pre-validation, and for displaying the results\nof submitting a form via XHR.</p>\n<p><strong>Specifying Validations</strong></p>\n<p>The following classes can be applied to a form element for\npre-validation:</p>\n<dl>\n<dt><code>yiv-required</code></dt>\n<dd>Value must not be empty.</dd>\n<dt><code>yiv-length:[x,y]</code></dt>\n<dd>String must be at least x characters and at most y characters.\nAt least one of x and y must be specified.</dd>\n<dt><code>yiv-integer:[x,y]</code></dt>\n<dd>The integer value must be at least x and at most y.\nx and y are both optional.</dd>\n<dt><code>yiv-decimal:[x,y]</code></dt>\n<dd>The decimal value must be at least x and at most y.  Exponents are\nnot allowed.  x and y are both optional.</dd>\n</dl>\n<p>If we ever need to allow exponents, we can use yiv-float.</p>\n<p>The following functions allow additional pre-validation to be\nattached to individual form elements:</p>\n<dl>\n<dt><code>setRegex()</code></dt>\n<dd>Sets the regular expression that must match in order for the value\nto be acceptable.</dd>\n<dt><code>setFunction()</code></dt>\n<dd>Sets the function that must return true in order for the value to\nbe acceptable.  The function is called in the scope of the Form\nobject with the arguments:  the form and the element.</dd>\n</dl>\n<p><code>setErrorMessages()</code> specifies the error message to be\ndisplayed when a pre-validation check fails.</p>\n<p>Functions are expected to call <code>displayMessage()</code>\ndirectly.</p>\n<p>More complex pre-validations can be added by overriding\n<code>postValidateForm()</code>, described below.</p>\n<p>Validation normally strips leading and trailing whitespace from every\nvalue.  If you have a special case where this should not be done, add\nthe CSS class <code>yiv-no-trim</code> to the input field.</p>\n<p>Derived classes may also override the following functions:</p>\n<dl>\n<dt><code>prePrepareForm</code>(arguments passed to prepareForm)</dt>\n<dd>Called before filling in default values for the form elements.\nReturn false to cancel dialog.</dd>\n<dt><code>postPrepareForm</code>(arguments passed to prepareForm)</dt>\n<dd>Called after filling in default values for the form elements.</dd>\n<dt><code>postValidateForm</code>(form)</dt>\n<dd>Called after performing the basic pre-validations.  Returns\ntrue if the form contents are acceptable.  Reports error if there\nis a problem.</dd>\n</dl>"}], "namespace": "", "module": "gallery-formmgr-css-validation", "configs": {"Y.FormManager.status_order": {"type": "{Array}", "static": "", "description": "<p>Names of supported status values, highest precedence first.  Default:\n<code>[ 'error', 'warn', 'success', 'info' ]</code></p>\n<p>This is static because it links to CSS rules that define the\nappearance of each status type:  .formmgr-has{status}</p>", "guessedname": "status_order", "guessedtype": "property"}}, "methods": {"registerButton": {"params": [{"type": "String|Object", "name": "el", "description": "  The selector for the element or the element itself"}], "description": "Register an object that can be disabled.  The object must support\nthe set('disabled', ...) API.  (The exception is DOM nodes, since\nthey are automatically wrapped in Y.Node.)  Buttons contained within\nthe form DOM element are automatically registered.", "guessedname": "registerButton", "guessedtype": "function"}, "postValidateForm": {"return": {"type": "boolean", "description": "<code>false</code> if validation fails"}, "description": "Hook called at the end of <code>validateForm()</code>.  This is the\nbest place to put holistic validations that touch multiple form\nelements.", "guessedname": "postValidateForm", "guessedtype": "function"}, "getForm": {"return": {"type": "DOM", "description": "The form DOM element."}, "guessedname": "getForm", "guessedtype": "function"}, "hasFileInputs": {"return": {"type": "boolean", "description": "<code>true</code> if the form contains file inputs.  These require special treatment when submitting via XHR."}, "guessedname": "hasFileInputs", "guessedtype": "function"}, "setRegex": {"params": [{"type": "String|Object", "name": "id", "description": "  The selector for the element or the element itself"}, {"type": "String|RegExp", "name": "regex", "description": "  The regular expression to use"}, {"type": "String", "name": "flags", "description": "  If regex is a String, these are the flags used to construct a RegExp."}], "description": "<p>Set the regular expression used to validate the field value.</p>\n<p><strong>Since there is no default message for failed regular\nexpression validation, this function will complain if you have not\nalready called <code>setErrorMessages()</code> or\n<code>addErrorMessage</code> to specify an error message.</strong></p>", "guessedname": "setRegex", "guessedtype": "function"}, "enableForm": {"description": "Enable all the registered buttons.", "guessedname": "enableForm", "guessedtype": "function"}, "setErrorMessages": {"params": [{"type": "String|Object", "name": "id", "description": "  The selector for the element or the element itself"}, {"type": "Object", "name": "map", "description": "  Map of error types to error messages."}], "description": "<p>Set the error messages for a form element.  This can be used to\noverride the default messages for individual elements</p>\n<p>The valid error types are:</p>\n<dl>\n<dt><code>required</code></dt>\n<dt><code>min_length</code></dt>\n<dd><code>{min}</code> and <code>{max}</code> are replaced</dd>\n<dt><code>max_length</code></dt>\n<dd><code>{min}</code> and <code>{max}</code> are replaced</dd>\n<dt><code>integer</code></dt>\n<dd><code>{min}</code> and <code>{max}</code> are replaced</dd>\n<dt><code>decimal</code></dt>\n<dd><code>{min}</code> and <code>{max}</code> are replaced</dd>\n<dt><code>regex</code></dt>\n<dd>This <string>must</strong> be set for elements which validate with regular expressions.</dd>\n</dl>", "guessedname": "setErrorMessages", "guessedtype": "function"}, "getElementStatus": {"return": {"type": "mixed", "description": "The status (String) or <code>false</code>."}, "description": "Get the status of the given fieldset or form row.", "static": "", "guessedname": "getElementStatus", "guessedtype": "function", "params": [{"type": "String|Object", "name": "e", "description": "  The descriptor or DOM element."}]}, "setFormEnabled": {"params": [{"type": "boolean", "name": "enabled", "description": "  <code>true</code> to enable the form, <code>false</code> to disable the form"}], "description": "Set the enabled state all the registered buttons.", "guessedname": "setFormEnabled", "guessedtype": "function"}, "setFunction": {"params": [{"type": "String|Object", "name": "id", "description": "  The selector for the element or the element itself"}, {"type": "Function|String|Object}\nThe function to call after basic validations succeed.  If this\nis a String, it is resolved in the scope of the FormManager\nobject.  If this is an object, it must be <code>{fn:,\nscope:", "name": "f", "description": " </code>.  The function will then be invoked in the\nspecified scope."}], "description": "Set the validation function for a form element.", "guessedname": "setFunction", "guessedtype": "function"}, "isFormEnabled": {"return": {"type": "boolean", "description": "<code>true</code> if form is enabled"}, "guessedname": "isFormEnabled", "guessedtype": "function"}, "clearMessages": {"description": "Clear all messages in <code>status_node</code> and the form rows.", "guessedname": "clearMessages", "guessedtype": "function"}, "clearForm": {"description": "Reset all values in the form to the defaults specified in the markup.", "guessedname": "clearForm", "guessedtype": "function"}, "Y.FormManager.displayMessage": {"return": {"type": "boolean", "description": "true if the message was displayed, false if a higher precedence message was already there"}, "description": "<p>Exposed for use by Y.QueryBuilder</p>\n<p>Display a message for the form row containing the specified element.\nThe message will only be displayed if no message with a higher\nprecedence is already visible. (see Y.FormManager.status_order)</p>", "static": "", "guessedname": "displayMessage", "guessedtype": "function", "params": [{"type": "String|Object", "name": "e", "description": "  The selector for the element or the element itself"}, {"type": "String", "name": "msg", "description": "  The message"}, {"type": "String", "name": "type", "description": "  The message type (see Y.FormManager.status_order)"}, {"type": "boolean", "name": "had_messages", "description": "  (Optional) <code>true</code> if the form already has messages displayed"}, {"type": "boolean", "name": "scroll", "description": "  (Optional) <code>true</code> if the form row should be scrolled into view"}]}, "prepareForm": {"return": {"type": "boolean", "description": "<code>true</code> if both pre & post hooks are happy"}, "description": "Prepare the form for display.", "guessedname": "prepareForm", "guessedtype": "function"}, "setDefaultValues": {"params": [{"type": "Object", "name": "default_value_map", "description": "  Mapping of form element names to values."}], "description": "Set the default values for all form elements.", "guessedname": "setDefaultValues", "guessedtype": "function"}, "setStatusNode": {"params": [{"type": "String|Y.Node", "name": "node", "description": "  the node in which status should be displayed"}], "guessedname": "setStatusNode", "guessedtype": "function"}, "Y.FormManager.clearMessage": {"static": "", "params": [{"type": "Element|Node", "name": "e", "description": "  the field"}], "description": "<p>Exposed for use by Y.QueryBuilder</p>\n<p>Clear the message for the given field.</p>", "guessedname": "clearMessage", "guessedtype": "function"}, "validateFromCSSData": {"return": {"type": "Object", "description": "Status:\n<dl>\n<dt>keepGoing</dt>\n<dd>(Boolean) <code>true</code> if further validation should be done.</dd>\n<dt>error</dt>\n<dd>(String) The error message, if any.</dd>\n</dl>"}, "description": "Validate an input based on its CSS data.", "static": "", "guessedname": "validateFromCSSData", "guessedtype": "function", "params": [{"type": "Element|Node", "name": "e", "description": "  The field to validate."}, {"type": "Map", "name": "msg_list", "description": "  (Optional) Map of message types to custom messages."}]}, "hasMessages": {"return": {"type": "boolean", "description": "<code>true</code> if there are any messages displayed, of any type"}, "guessedname": "hasMessages", "guessedtype": "function"}, "setDefaultValue": {"params": [{"type": "String", "name": "field_name", "description": "  The form element name."}, {"type": "String|Int|Float", "name": "default_value", "description": "  The default value."}], "description": "Set the default values for a single form element.", "guessedname": "setDefaultValue", "guessedtype": "function"}, "validateForm": {"description": "Validate the form.", "guessedname": "validateForm", "guessedtype": "function"}, "getStatusPrecedence": {"return": {"type": "int", "description": "The position in the <code>status_order</code> array."}, "description": "Get the precedence of the given status name.", "static": "", "guessedname": "getStatusPrecedence", "guessedtype": "function", "params": [{"type": "String", "name": "status", "description": "  The name of the status value."}]}, "prePrepareForm": {"return": {"type": "boolean", "description": "<code>false</code> cancels <code>prepareForm()</code>."}, "description": "Hook called before <code>prepareForm()</code> executes.", "guessedname": "prePrepareForm", "guessedtype": "function"}, "postPrepareForm": {"return": {"type": "boolean", "description": "Return value from this function is returned by <code>prepareForm()</code>."}, "description": "Hook called after <code>prepareForm()</code> executes.", "guessedname": "postPrepareForm", "guessedtype": "function"}, "displayFormMessage": {"params": [{"type": "String", "name": "msg", "description": "  The message"}, {"type": "boolean", "name": "error", "description": "  <code>true</code> if the message is an error"}, {"type": "boolean", "name": "scroll", "description": "  <code>true</code> if <code>status_node</code> should be scrolled into view"}], "description": "Display a message in <code>status_node</code>.", "guessedname": "displayFormMessage", "guessedtype": "function"}, "hasErrors": {"return": {"type": "boolean", "description": "<code>true</code> if there are any error messages displayed"}, "guessedname": "hasErrors", "guessedtype": "function"}, "postPopulateForm": {"description": "Hook for performing additional actions after\n<code>populateForm()</code> completes.", "guessedname": "postPopulateForm", "guessedtype": "function"}, "initFocus": {"description": "Set focus to first input field.  If a page contains multiple forms,\nonly call this for one of them.", "guessedname": "initFocus", "guessedtype": "function"}, "cleanValues": {"return": {"type": "boolean", "description": "<code>true</code> if there are any file inputs."}, "description": "Trim leading and trailing whitespace from the specified fields, except\nwhen a field has the CSS class yiv-no-trim.", "static": "", "guessedname": "cleanValues", "guessedtype": "function", "params": [{"type": "Array", "name": "e", "description": "  The fields to clean."}]}, "displayMessage": {"return": {"type": "boolean", "description": "true if the message was displayed, false if a higher precedence message was already there"}, "params": [{"type": "String|Object", "name": "e", "description": "  The selector for the element or the element itself"}, {"type": "String", "name": "msg", "description": "  The message"}, {"type": "String", "name": "type", "description": "  The message type (see Y.FormManager.status_order)"}, {"type": "boolean", "name": "scroll", "description": "  (Optional) <code>true</code> if the form row should be scrolled into view"}], "description": "Display a message for the form row containing the specified element.\nThe message will only be displayed if no message with a higher\nprecedence is already visible. (see Y.FormManager.status_order)", "guessedname": "displayMessage", "guessedtype": "function"}, "getRowStatus": {"return": {"type": "mixed", "description": "The status (String) or <code>false</code>."}, "params": [{"type": "String|Object", "name": "e", "description": "  The selector for the element or the element itself"}], "description": "Get the message type displayed for the row containing the specified element.", "guessedname": "getRowStatus", "guessedtype": "function"}, "statusTakesPrecedence": {"return": {"type": "boolean", "description": "<code>true</code> if <code>new_status</code> takes precedence over <code>orig_status</code>"}, "description": "Compare two status values.", "static": "", "guessedname": "statusTakesPrecedence", "guessedtype": "function", "params": [{"type": "String", "name": "orig_status", "description": "  The name of the original status value."}, {"type": "String", "name": "new_status", "description": "  The name of the new status value."}]}, "addErrorMessage": {"params": [{"type": "String|Object", "name": "id", "description": "  The selector for the element or the element itself"}, {"type": "String", "name": "error_type", "description": "  The error message type.  Refer to setErrorMessages() for details."}, {"type": "String", "name": "msg", "description": "  The error message"}], "description": "Set one particular error message for a form element.", "guessedname": "addErrorMessage", "guessedtype": "function"}, "isChanged": {"return": {"type": "boolean", "description": "<code>false</code> if all form elements have the default values passed to the constructor"}, "description": "Check if form values have been modified.", "guessedname": "isChanged", "guessedtype": "function"}, "disableForm": {"description": "Disable all the registered buttons.", "guessedname": "disableForm", "guessedtype": "function"}, "populateForm": {"description": "Reset all values in the form to the defaults passed to the constructor.", "guessedname": "populateForm", "guessedtype": "function"}, "notifyErrors": {"description": "Displays a generic message in <code>status_node</code> stating that\nthe form data failed to validate.  Override this if you want to get\nfancy.", "guessedname": "notifyErrors", "guessedtype": "function"}, "saveCurrentValuesAsDefault": {"description": "Store the current form values in <code>default_value_map</code>.", "guessedname": "saveCurrentValuesAsDefault", "guessedtype": "function"}}, "file": "CSSValidation.js", "shortname": "FormManager", "properties": {"Y.FormManager.status_none_class": {"type": "{String}", "description": "The CSS class placed on <code>status_node</code> when it is empty.", "guessedname": "status_none_class", "guessedtype": "property"}, "Y.FormManager.integer_value_re": {"type": "{RegExp}", "static": "", "description": "Regular expression used to determine if a value is an integer.\nThis can be localized, e.g., allow for thousands separator.", "guessedname": "integer_value_re", "guessedtype": "property"}, "Y.FormManager.Strings": {"type": "{Object}", "static": "", "description": "<p>Map of localizable strings used by pre-validation.</p>\n<dl>\n<dt>validation_error</dt>\n<dd>Displayed in <code>status_node</code> by <code>notifyErrors()</code> when pre-validation fails.</dd>\n<dt>required_string</dt>\n<dd>Displayed when <code>yiv-required</code> fails on an input field.</dd>\n<dt>required_menu</dt>\n<dd>Displayed when <code>yiv-required</code> fails on a select element.</dd>\n<dt>length_too_short, length_too_long, length_out_of_range</dt>\n<dd>Displayed when <code>yiv-length</code> fails on an input field.</dd>\n<dt>integer, integer_too_small, integer_too_large, integer_out_of_range</dt>\n<dd>Displayed when <code>yiv-integer</code> fails on an input field.</dd>\n<dt>decimal, decimal_too_small, decimal_too_large, decimal_out_of_range</dt>\n<dd>Displayed when <code>yiv-decimal</code> fails on an input field.</dd>\n</dl>", "guessedname": "Strings", "guessedtype": "property"}, "Y.FormManager.field_marker_class": {"type": "{String}", "description": "The CSS class which marks each field in a row of the form.  This enables\nmessaging when multiple fields are in a single row.", "guessedname": "field_marker_class", "guessedtype": "property"}, "Y.FormManager.row_marker_class": {"type": "{String}", "description": "The CSS class which marks each row of the form.  Typically, each field\n(or a very tightly coupled set of fields) is placed in a separate row.", "guessedname": "row_marker_class", "guessedtype": "property"}, "Y.FormManager.row_status_prefix": {"type": "{String}", "description": "The prefix for all CSS classes placed on a form row when pre-validation\nfails.  The full CSS class is formed by appending the value from\n<code>Y.FormManager.status_order</code>.", "guessedname": "row_status_prefix", "guessedtype": "property"}, "Y.FormManager.status_success_class": {"type": "{String}", "description": "The CSS class placed on <code>status_node</code> when\n<code>displayFormMessage()</code> is called with\n<code>error=false</code>.", "guessedname": "status_success_class", "guessedtype": "property"}, "Y.FormManager.status_marker_class": {"type": "{String}", "description": "The CSS class which marks the container for the status message within a\nrow of the form.", "guessedname": "status_marker_class", "guessedtype": "property"}, "Y.FormManager.status_failure_class": {"type": "{String}", "description": "The CSS class placed on <code>status_node</code> when\n<code>displayFormMessage()</code> is called with\n<code>error=true</code>.", "guessedname": "status_failure_class", "guessedtype": "property"}, "Y.FormManager.decimal_value_re": {"type": "{RegExp}", "static": "", "description": "Regular expression used to determine if a value is a decimal number.\nThis can be localized, e.g., use the correct decimal separator.", "guessedname": "decimal_value_re", "guessedtype": "property"}}, "description": "<p>FormManager provides support for initializing a form, pre-validating\nuser input, and displaying messages returned by the server.</p>\n<p>Also see the documentation for gallery-formmgr-css-validation.</p>\n<p><strong>Required Markup Structure</strong></p>\n<p>Each element (or tighly coupled set of elements) must be contained by\nan element that has the CSS class <code>formmgr-row</code>.  Within each\nrow, validation messages are displayed inside the container with CSS\nclass <code>formmgr-message-text</code>.\n<p>When a message is displayed inside a row, the CSS class\n<code>formmgr-has{type}</code> is placed on the row container and the\ncontaining fieldset (if any), where <code>{type}</code> is the message\ntype passed to <code>displayMessage()</code>.</p>\n<p><strong>Initializing the Form</strong></p>\n<p>Default values can be either encoded in the markup or passed to the\nFormManager constructor via <code>config.default_value_map</code>.  (The\nformer method is obviously better for progressive enhancement.)  The\nvalues passed to the constructor override the values encoded in the\nmarkup.</p>\n<p><code>prepareForm()</code> must be called before the form is\ndisplayed.  To initialize focus to the first element in a form, call\n<code>initFocus()</code>.  If the form is in an overlay, you can delay\nthese calls until just before showing the overlay.</p>\n<p>The default values passed to the constructor are inserted by\n<code>populateForm()</code>.  (This is automatically called by\n<code>prepareForm()</code>.)</p>\n<p><strong>Displaying Messages</strong></p>\n<p>To display a message for a single form row, call\n<code>displayMessage()</code>.  To display a message for the form in\ngeneral, call <code>displayFormMessage()</code>.  These functions can be\nused for initializing the error display when the page loads, for\ndisplaying the results of pre-validation, and for displaying the results\nof submitting a form via XHR.</p>\n<p><strong>Specifying Validations</strong></p>\n<p>The following classes can be applied to a form element for\npre-validation:</p>\n<dl>\n<dt><code>yiv-required</code></dt>\n<dd>Value must not be empty.</dd>\n<dt><code>yiv-length:[x,y]</code></dt>\n<dd>String must be at least x characters and at most y characters.\nAt least one of x and y must be specified.</dd>\n<dt><code>yiv-integer:[x,y]</code></dt>\n<dd>The integer value must be at least x and at most y.\nx and y are both optional.</dd>\n<dt><code>yiv-decimal:[x,y]</code></dt>\n<dd>The decimal value must be at least x and at most y.  Exponents are\nnot allowed.  x and y are both optional.</dd>\n</dl>\n<p>If we ever need to allow exponents, we can use yiv-float.</p>\n<p>The following functions allow additional pre-validation to be\nattached to individual form elements:</p>\n<dl>\n<dt><code>setRegex()</code></dt>\n<dd>Sets the regular expression that must match in order for the value\nto be acceptable.</dd>\n<dt><code>setFunction()</code></dt>\n<dd>Sets the function that must return true in order for the value to\nbe acceptable.  The function is called in the scope of the Form\nobject with the arguments:  the form and the element.</dd>\n</dl>\n<p><code>setErrorMessages()</code> specifies the error message to be\ndisplayed when a pre-validation check fails.</p>\n<p>Functions are expected to call <code>displayMessage()</code>\ndirectly.</p>\n<p>More complex pre-validations can be added by overriding\n<code>postValidateForm()</code>, described below.</p>\n<p>Validation normally strips leading and trailing whitespace from every\nvalue.  If you have a special case where this should not be done, add\nthe CSS class <code>yiv-no-trim</code> to the input field.</p>\n<p>Derived classes may also override the following functions:</p>\n<dl>\n<dt><code>prePrepareForm</code>(arguments passed to prepareForm)</dt>\n<dd>Called before filling in default values for the form elements.\nReturn false to cancel dialog.</dd>\n<dt><code>postPrepareForm</code>(arguments passed to prepareForm)</dt>\n<dd>Called after filling in default values for the form elements.</dd>\n<dt><code>postValidateForm</code>(form)</dt>\n<dd>Called after performing the basic pre-validations.  Returns\ntrue if the form contents are acceptable.  Reports error if there\nis a problem.</dd>\n</dl>"}, "MathFunction.Sine": {"name": "MathFunction.Sine", "constructors": [{"params": [{"type": "MathFunction", "name": "f", "description": ""}], "description": "<p>Trigonometric sine.</p>"}], "namespace": "MathFunction", "module": "gallery-mathcanvas", "extends": "MathFunction.FunctionWithArgs", "superclass": "MathFunction.FunctionWithArgs", "file": "Sine.js", "shortname": "Sine", "description": "<p>Trigonometric sine.</p>"}, "Math": {"name": "Math", "namespace": "", "module": "gallery-math", "methods": {"addReciprocals": {"return": {"type": "number", "description": "sum of the reciprocals of all the arguments (either passed separately or as an array)"}, "guessedname": "addReciprocals", "guessedtype": "function"}, "tanh": {"return": {"type": "number", "description": "hyperbolic sine"}, "params": [{"type": "number", "name": "v", "description": ""}], "guessedname": "tanh", "guessedtype": "function"}, "atanh": {"return": {"type": "number", "description": "inverse hyperbolic tangent"}, "params": [{"type": "number", "name": "v", "description": ""}], "guessedname": "atanh", "guessedtype": "function"}, "asinh": {"return": {"type": "number", "description": "inverse hyperbolic sine"}, "params": [{"type": "number", "name": "v", "description": ""}], "guessedname": "asinh", "guessedtype": "function"}, "degreesToRadians": {"return": {"type": "number", "description": "angle in radians"}, "params": [{"type": "number", "name": "a", "description": "  angle in degrees"}], "guessedname": "degreesToRadians", "guessedtype": "function"}, "cosh": {"return": {"type": "number", "description": "hyperbolic cosine"}, "params": [{"type": "number", "name": "v", "description": ""}], "guessedname": "cosh", "guessedtype": "function"}, "add": {"return": {"type": "number", "description": "sum of all the arguments (either passed separately or as an array)"}, "guessedname": "add", "guessedtype": "function"}, "sinh": {"return": {"type": "number", "description": "hyperbolic sine"}, "params": [{"type": "number", "name": "v", "description": ""}], "guessedname": "sinh", "guessedtype": "function"}, "acosh": {"return": {"type": "number", "description": "inverse hyperbolic cosine"}, "params": [{"type": "number", "name": "v", "description": ""}], "guessedname": "acosh", "guessedtype": "function"}, "multiply": {"return": {"type": "number", "description": "product of all the arguments (either passed separately or as an array)"}, "guessedname": "multiply", "guessedtype": "function"}, "radiansToDegrees": {"return": {"type": "number", "description": "angle in degrees"}, "params": [{"type": "number", "name": "a", "description": "  angle in radians"}], "guessedname": "radiansToDegrees", "guessedtype": "function"}, "parallel": {"return": {"type": "number", "description": "net value of N resistors in parallel (either passed separately or as an array)"}, "guessedname": "parallel", "guessedtype": "function"}}, "file": "Math.js", "shortname": "Math", "description": "<p>Augments built-in JavaScript Math namespace with additional\nmathematical functions.</p>"}, "MathCanvas.Parser": {"name": "MathCanvas.Parser", "namespace": "MathCanvas", "module": "gallery-mathcanvas", "methods": {"parse": {"return": {"type": "MathFunction", "description": ""}, "static": "", "params": [{"type": "String", "name": "expr", "description": "  expression to parse"}], "description": "Parses a string into a Y.MathFunction."}}, "file": "MathCanvas.js", "shortname": "Parser", "description": "Parser used to convert a string expression into Y.MathFunction"}, "MathFunction.Variable": {"name": "MathFunction.Variable", "constructors": [{"params": [{"type": "String", "name": "name", "description": ""}], "description": "<p>Variable value</p>"}], "namespace": "MathFunction", "module": "gallery-mathcanvas", "extends": "MathFunction", "superclass": "MathFunction", "file": "Variable.js", "shortname": "Variable", "description": "<p>Variable value</p>"}, "Paginator.ui.CurrentPageInput": {"name": "Paginator.ui.CurrentPageInput", "constructors": [{"params": [{"type": "Pagintor", "name": "p", "description": "  Paginator instance to attach to"}], "description": "Generates an input field for setting the current page."}], "namespace": "", "module": "gallery-paginator", "events": {"pageInputClassChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "pageInputClassChange", "description": "Fires when the value for the configuration attribute 'pageInputClass' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "pageInputTemplateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "pageInputTemplateChange", "description": "Fires when the value for the configuration attribute 'pageInputTemplate' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "CurrentPageInput", "methods": {"destroy": {"private": "", "description": "Removes the span node and clears event listeners.", "guessedname": "destroy", "guessedtype": "function"}, "update": {"params": [{"type": "CustomEvent", "name": "e", "description": "  The calling change event"}], "description": "Swap the link and span nodes if appropriate.", "guessedname": "update", "guessedtype": "function"}, "render": {"return": {"type": "HTMLElement", "description": ""}, "params": [{"type": "string", "name": "id_base", "description": "  used to create unique ids for generated nodes"}], "description": "Generate the nodes and return the appropriate node given the current\npagination state.", "guessedname": "render", "guessedtype": "function"}}, "file": "CurrentPageInput.js", "guessedtype": "function", "shortname": "Paginator.ui.CurrentPageInput", "configs": {"pageInputTemplate": {"default": "'{currentPage} of {totalPages}'", "description": "Used as innerHTML for the span.", "guessedname": "pageInputTemplate", "guessedtype": "property"}, "pageInputClass": {"default": "'yui-paginator-page-input'", "description": "CSS class assigned to the span", "guessedname": "pageInputClass", "guessedtype": "property"}}, "description": "Generates an input field for setting the current page."}, "EnableIfAnyCheckboxGroup": {"name": "EnableIfAnyCheckboxGroup", "constructors": [{"params": [{"type": "String|Node|NodeList", "name": "cb_list", "description": "  The list of checkboxes to manage"}, {"type": "String|NodeList", "name": "nodes", "description": "  The nodes to enable/disable"}], "description": "Enables the given list of nodes if any checkboxes are checked."}], "namespace": "", "module": "gallery-checkboxgroups", "extends": "CheckboxGroup", "superclass": "CheckboxGroup", "file": "EnableIfAnyCheckboxGroup.js", "shortname": "EnableIfAnyCheckboxGroup", "description": "Enables the given list of nodes if any checkboxes are checked."}, "MathFunction.Negate": {"name": "MathFunction.Negate", "constructors": [{"params": [{"type": "MathFunction", "name": "f", "description": ""}], "description": "<p>Negate a number.</p>"}], "namespace": "MathFunction", "module": "gallery-mathcanvas", "extends": "MathFunction.FunctionWithArgs", "superclass": "MathFunction.FunctionWithArgs", "file": "Negate.js", "shortname": "Negate", "description": "<p>Negate a number.</p>"}, "MathFunction.InverseHyperbolicTangent": {"name": "MathFunction.InverseHyperbolicTangent", "constructors": [{"params": [{"type": "MathFunction", "name": "f", "description": ""}], "description": "<p>Inverse hyperbolic tangent.</p>"}], "namespace": "MathFunction", "module": "gallery-mathcanvas", "extends": "MathFunction.FunctionWithArgs", "superclass": "MathFunction.FunctionWithArgs", "file": "InverseHyperbolicTangent.js", "shortname": "InverseHyperbolicTangent", "description": "<p>Inverse hyperbolic tangent.</p>"}, "Node~dimensions": {"name": "Node~dimensions", "namespace": "", "module": "node", "guessedname": "em_div", "methods": {"horizMarginBorderPadding": {"description": "<p>Computes the size of everything surrounding the element's content.</p>", "guessedname": "horizMarginBorderPadding", "guessedtype": "function"}, "vertMarginBorderPadding": {"description": "<p>Computes the size of everything surrounding the element's content.</p>", "guessedname": "vertMarginBorderPadding", "guessedtype": "function"}, "parseDimensionStyle": {"description": "<p>Returns the size of the style in pixels.</p>", "guessedname": "parseDimensionStyle", "guessedtype": "function"}, "emToPx": {"static": "", "description": "<p>Returns the size of one em in pixels.</p>", "guessedname": "emToPx", "guessedtype": "function"}}, "file": "Dimensions.js", "guessedtype": "property", "shortname": "Node~dimensions", "description": "<p>Functions for measuring the size of a node.</p>"}, "MathFunction.Phase": {"name": "MathFunction.Phase", "constructors": [{"params": [{"type": "MathFunction", "name": "f", "description": ""}], "description": "<p>Phase of a complex number.</p>"}], "namespace": "MathFunction", "module": "gallery-mathcanvas", "extends": "MathFunction.FunctionWithArgs", "superclass": "MathFunction.FunctionWithArgs", "file": "Phase.js", "shortname": "Phase", "description": "<p>Phase of a complex number.</p>"}, "MathFunction.SquareRoot": {"name": "MathFunction.SquareRoot", "constructors": [{"params": [{"type": "MathFunction", "name": "f", "description": ""}], "description": "<p>Square root.</p>"}], "namespace": "MathFunction", "module": "gallery-mathcanvas", "extends": "MathFunction.FunctionWithArgs", "superclass": "MathFunction.FunctionWithArgs", "file": "SquareRoot.js", "shortname": "SquareRoot", "description": "<p>Square root.</p>"}, "MathFunction.FunctionWithArgs": {"name": "MathFunction.FunctionWithArgs", "constructors": [{"params": [{"type": "String", "name": "name", "description": "  the name of the function"}, {"type": "MathFunction|Array", "name": "args", "description": "  the arguments"}], "description": "<p>Function that takes one or more arguments.</p>"}], "namespace": "MathFunction", "module": "gallery-mathcanvas", "methods": {"evaluateArgs": {"return": {"type": "", "description": "list of argument values, from calling evaluate()"}, "protected": "", "params": [{"type": "Object", "name": "var_list", "description": "  map of variable names to values or MathFunctions"}], "guessedname": "evaluateArgs", "guessedtype": "function"}, "appendArg": {"params": [{"type": "MathFunction", "name": "f", "description": ""}], "guessedname": "appendArg", "guessedtype": "function"}, "replaceArg": {"params": [{"type": "MathFunction", "name": "origArg", "description": "  original argument"}, {"type": "MathFunction", "name": "newArg", "description": "  new argument"}], "description": "If origArg is an argument, replaces origArg with newArg.", "guessedname": "replaceArg", "guessedtype": "function"}, "_printArg": {"return": {"type": "string", "description": "the string representation of the argument"}, "description": "Print an argument, with parentheses if necessary.", "protected": "", "params": [{"type": "number|MathFunction", "name": "index", "description": "  argument index or MathFunction"}], "guessedname": "_printArg", "guessedtype": "function"}}, "extends": "MathFunction", "superclass": "MathFunction", "file": "FunctionWithArgs.js", "shortname": "FunctionWithArgs", "description": "<p>Function that takes one or more arguments.</p>"}, "MathFunction.HyperbolicCosine": {"name": "MathFunction.HyperbolicCosine", "constructors": [{"params": [{"type": "MathFunction", "name": "f", "description": ""}], "description": "<p>Hyperbolic cosine.</p>"}], "namespace": "MathFunction", "module": "gallery-mathcanvas", "extends": "MathFunction.FunctionWithArgs", "superclass": "MathFunction.FunctionWithArgs", "file": "HyperbolicCosine.js", "shortname": "HyperbolicCosine", "description": "<p>Hyperbolic cosine.</p>"}, "Assert": {"file": "Assert.js", "description": "<p>Additional assertions for unit tests.</p>", "namespace": "", "module": "gallery-test-extras", "methods": {"areWithinEpsilon": {"params": [{"type": "Number", "name": "expected", "description": "  the expected value"}, {"type": "Number", "name": "actual", "description": "  the actual value to test"}, {"type": "Number", "name": "epsilon", "description": "  the maximum allowed difference in the mantissas"}], "description": "Asserts that the mantissas of two values are with epsilon of each\nother.  (The test automatically fails if the exponents are different.)", "guessedname": "areWithinEpsilon", "guessedtype": "function"}, "complexWithinEpsilon": {"params": [{"type": "ComplexNumber", "name": "expected", "description": "  the expected value"}, {"type": "ComplexNumber", "name": "actual", "description": "  the actual value to test"}, {"type": "ComplexNumber", "name": "epsilon", "description": "  the maximum allowed difference in the mantissas"}], "description": "Asserts that both real and imaginary parts of two complex values are\nwith epsilon of each other.  (The test automatically fails if the\nexponents are different.)", "guessedname": "complexWithinEpsilon", "guessedtype": "function"}}, "guessedname": "logToLog10", "guessedtype": "property", "shortname": "Assert", "name": "Assert"}, "MathFunction.HyperbolicSine": {"name": "MathFunction.HyperbolicSine", "constructors": [{"params": [{"type": "MathFunction", "name": "f", "description": ""}], "description": "<p>Hyperbolic sine.</p>"}], "namespace": "MathFunction", "module": "gallery-mathcanvas", "extends": "MathFunction.FunctionWithArgs", "superclass": "MathFunction.FunctionWithArgs", "file": "HyperbolicSine.js", "shortname": "HyperbolicSine", "description": "<p>Hyperbolic sine.</p>"}, "MathFunction.Rotate": {"name": "MathFunction.Rotate", "constructors": [{"params": [{"type": "MathFunction", "name": "f", "description": ""}], "description": "<p>Rotate a complex number around the origin.</p>"}], "namespace": "MathFunction", "module": "gallery-mathcanvas", "extends": "MathFunction.FunctionWithArgs", "superclass": "MathFunction.FunctionWithArgs", "file": "Rotate.js", "shortname": "Rotate", "description": "<p>Rotate a complex number around the origin.</p>"}, "MathFunction.I": {"name": "MathFunction.I", "constructors": [{"description": "<p>i (square root of -1)</p>"}], "namespace": "MathFunction", "module": "gallery-mathcanvas", "extends": "MathFunction", "superclass": "MathFunction", "file": "I.js", "shortname": "I", "description": "<p>i (square root of -1)</p>"}, "CheckboxGroup": {"name": "CheckboxGroup", "constructors": [{"params": [{"type": "String|Node|NodeList", "name": "cb_list", "description": "  The list of checkboxes to manage"}], "description": "<p>Base class for enforcing constraints on groups of checkboxes.</p>\n<p>Derived classes must override <code>enforceConstraints()</code>.</p>"}], "namespace": "", "module": "gallery-checkboxgroups", "methods": {"allUnchecked": {"return": {"type": "boolean", "description": "<code>true</code> if all checkboxes are unchecked"}, "guessedname": "allUnchecked", "guessedtype": "function"}, "getCheckboxList": {"return": {"type": "NodeList", "description": "List of managed checkboxes"}, "guessedname": "getCheckboxList", "guessedtype": "function"}, "allChecked": {"return": {"type": "boolean", "description": "<code>true</code> if all checkboxes are checked"}, "guessedname": "allChecked", "guessedtype": "function"}, "enforceConstraints": {"params": [{"type": "String|Object|Array", "name": "cb_list", "description": "  The list of checkboxes"}, {"type": "Int", "name": "index", "description": "  The index of the checkbox that changed"}], "description": "Derived classes must override this function to implement the desired behavior.", "guessedname": "enforceConstraints", "guessedtype": "function"}, "splice": {"params": [{"type": "Int", "name": "start", "description": "  Insertion index"}, {"type": "Int", "name": "delete_count", "description": "  Number of items to remove, starting from <code>start</code>"}, {"type": "String|Node|NodeList", "name": "cb_list", "description": "  The list of checkboxes to insert at <code>start</code>"}], "description": "Same functionality as <code>Array.splice()</code>.  Operates on the\nlist of managed checkboxes.", "guessedname": "splice", "guessedtype": "function"}, "allDisabled": {"return": {"type": "boolean", "description": "<code>true</code> if all checkboxes are disabled"}, "guessedname": "allDisabled", "guessedtype": "function"}}, "file": "CheckboxGroup.js", "shortname": "CheckboxGroup", "description": "<p>Base class for enforcing constraints on groups of checkboxes.</p>\n<p>Derived classes must override <code>enforceConstraints()</code>.</p>"}, "Plugin.DataTableQuickEdit": {"properties": {"Y.Plugin.QuickEdit.error_text_class": {"type": "{String}", "description": "The CSS class that marks the container for the error message inside a cell.", "guessedname": "error_text_class", "guessedtype": "property"}, "Y.Plugin.QuickEdit.error_display_markup": {"type": "{String}", "description": "The markup for the container for the error message inside a cell.", "guessedname": "error_display_markup", "guessedtype": "property"}}, "name": "Plugin.DataTableQuickEdit", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal to set component configuration."}], "description": "<p>The QuickEdit plugin provides a new mode for DataTable where all\nvalues in the table can be edited simultaneously, controlled by the\ncolumn configuration.  Each editable cell contains an input field.  If\nthe user decides to save the changes, then you can extract the changed\nvalues by calling <code><i>dt</i>.qe.getChanges()</code>.</p>\n<p>For a column to be editable in QuickEdit mode, the column\nconfiguration must include <code>quickEdit</code>.  The contents of\nthis object define the column's behavior in QuickEdit mode.</p>\n<p>To move up or down within a column while in QuickEdit mode, hold down\nthe Ctrl key and press the up or down arrow.</p>\n<p>If a column should not be editable, but needs to be formatted\ndifferently in QuickEdit mode, then you must define qeFormatter in\nthe column configuration. This is simply a normal cell formatter\nfunction that will be used in QuickEdit mode.  The static functions\n<code>readonly*Formatter</code> provide examples.</p>\n<p>The following configuration can be provided as part of\nquickEdit:</p>\n<dl>\n<dt>changed</dt><dd>Optional.  The function to call with the old and new\nvalue.  Should return true if the values are different.</dd>\n<dt>formatter</dt><dd>The cell formatter which will render an\nappropriate form field: &lt;input type=\"text\"&gt;, &lt;textarea&gt;,\nor &lt;select&gt;.</dd>\n<dt>validation</dt><dd>Validation configuration for every field in\nthe column.</dd>\n</dl>\n<p>The following configuration can be provided as part of\nquickEdit.validation:</p>\n<dl>\n<dt>css</dt><dd>CSS classes encoding basic validation rules:\n<dl>\n<dt><code>yiv-required</code></dt>\n<dd>Value must not be empty.</dd>\n<dt><code>yiv-length:[x,y]</code></dt>\n<dd>String must be at least x characters and at most y characters.\nAt least one of x and y must be specified.</dd>\n<dt><code>yiv-integer:[x,y]</code></dt>\n<dd>The integer value must be at least x and at most y.\nx and y are both optional.</dd>\n<dt><code>yiv-decimal:[x,y]</code></dt>\n<dd>The decimal value must be at least x and at most y.  Exponents are\nnot allowed.  x and y are both optional.</dd>\n</dl>\n</dd>\n<dt>fn</dt><dd>A function that will be called with the DataTable as its\nscope and the cell's form element as the argument. Return true if the\nvalue is valid. Otherwise, call this.qe.displayMessage(...) to display\nan error and return false.</dd>\n<dt>msg</dt><dd>A map of types to messages that will be displayed\nwhen a basic or regex validation rule fails. The valid types are:\nrequired, min_length, max_length, integer, decimal, and regex.\nThere is no default for type regex, so you must specify a message if\nyou configure a regex validation.</dd>\n<dt>regex</dt><dd>Regular expression that the value must satisfy in\norder to be considered valid.</dd>\n</dl>"}], "namespace": "Plugin", "module": "gallery-quickedit", "events": {"changesAlwaysIncludeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "changesAlwaysIncludeChange", "description": "Fires when the value for the configuration attribute 'changesAlwaysInclude' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "methods": {"_getElementStatus": {"return": {"type": "String", "description": ""}, "description": "Return the status of the field.", "protected": "", "params": [{"type": "Node", "name": "e", "description": "  form field"}, {"type": "RegExp", "name": "r", "description": "  regex to match against className"}], "guessedname": "_getElementStatus", "guessedtype": "function"}, "displayMessage": {"params": [{"type": "Element", "name": "e", "description": "  form field"}, {"type": "String", "name": "msg", "description": "  message to display"}, {"type": "String", "name": "type", "description": "  message type: error, warn, success, info"}, {"type": "boolean", "name": "scroll", "description": "  If false, does not scroll, even if this is the first message to display."}], "description": "Display a message for a QuickEdit field.  If an existing message with\na higher precedence is already visible, it will not be replaced.", "guessedname": "displayMessage", "guessedtype": "function"}, "readonlyEmailFormatter": {"static": "", "description": "Called with exactly the same arguments as any other cell\nformatter, this function displays an email address without the\nanchor tag.  Use this as the column's qeFormatter if the column\nshould not be editable in QuickEdit mode.", "guessedname": "readonlyEmailFormatter", "guessedtype": "function"}, "textFormatter": {"static": "", "description": "Called with exactly the same arguments as any other cell\nformatter, this function displays an input field.", "guessedname": "textFormatter", "guessedtype": "function"}, "getChanges": {"return": {"type": "mixed", "description": "array of objects if all validations pass, false otherwise"}, "description": "Return the changed values.  For each row, an object is created with\nonly the changed values.  The object keys are the column keys.  If\nyou need values from particular columns to be included always, even\nif the value did not change, include the key \"changesAlwaysInclude\"\nin the plugin configuration and pass an array of column keys.", "guessedname": "getChanges", "guessedtype": "function"}, "_getColumnKey": {"return": {"type": "String", "description": ""}, "description": "Return the column key for the specified field.", "protected": "", "params": [{"type": "Node", "name": "e", "description": "  form field"}], "guessedname": "_getColumnKey", "guessedtype": "function"}, "clearMessages": {"description": "Clear all validation messages in QuickEdit mode.", "guessedname": "clearMessages", "guessedtype": "function"}, "start": {"description": "Switch to QuickEdit mode.  Columns that have quickEdit defined will\nbe editable.  If the table has paginators, you must hide them.", "guessedname": "start", "guessedtype": "function"}, "textareaFormatter": {"static": "", "description": "Called with exactly the same arguments as any other cell\nformatter, this function displays a textarea field.", "guessedname": "textareaFormatter", "guessedtype": "function"}, "cancel": {"description": "Stop QuickEdit mode.  THIS DISCARDS ALL DATA!  If you want to save\nthe data, call getChanges() BEFORE calling this function.  If the\ntable has paginators, you must show them.", "guessedname": "cancel", "guessedtype": "function"}, "validate": {"return": {"type": "boolean", "description": "true if all validation checks pass"}, "description": "Validate the QuickEdit data.", "guessedname": "validate", "guessedtype": "function"}, "readonlyLinkFormatter": {"static": "", "description": "Called with exactly the same arguments as any other cell\nformatter, this function displays a link without the anchor tag.\nUse this as the column's qeFormatter if the column should not be\neditable in QuickEdit mode.", "guessedname": "readonlyLinkFormatter", "guessedtype": "function"}}, "extends": "Plugin.Base", "superclass": "Plugin.Base", "file": "QuickEdit.js", "shortname": "DataTableQuickEdit", "configs": {"changesAlwaysInclude": {"type": "Array", "description": "Record keys to always include in result from getChanges().", "guessedname": "changesAlwaysInclude", "guessedtype": "property"}, "YAHOO.widget.QuickEditDataTable.status_order": {"type": "{Array}", "static": "", "description": "<p>Names of supported status values, highest precedence first.  Default:\n<code>[ 'error', 'warn', 'success', 'info' ]</code></p>\n<p>This is static because it links to CSS rules that define the\nappearance of each status type:  .formmgr-has{status}</p>", "guessedname": "status_order", "guessedtype": "property"}}, "description": "<p>The QuickEdit plugin provides a new mode for DataTable where all\nvalues in the table can be edited simultaneously, controlled by the\ncolumn configuration.  Each editable cell contains an input field.  If\nthe user decides to save the changes, then you can extract the changed\nvalues by calling <code><i>dt</i>.qe.getChanges()</code>.</p>\n<p>For a column to be editable in QuickEdit mode, the column\nconfiguration must include <code>quickEdit</code>.  The contents of\nthis object define the column's behavior in QuickEdit mode.</p>\n<p>To move up or down within a column while in QuickEdit mode, hold down\nthe Ctrl key and press the up or down arrow.</p>\n<p>If a column should not be editable, but needs to be formatted\ndifferently in QuickEdit mode, then you must define qeFormatter in\nthe column configuration. This is simply a normal cell formatter\nfunction that will be used in QuickEdit mode.  The static functions\n<code>readonly*Formatter</code> provide examples.</p>\n<p>The following configuration can be provided as part of\nquickEdit:</p>\n<dl>\n<dt>changed</dt><dd>Optional.  The function to call with the old and new\nvalue.  Should return true if the values are different.</dd>\n<dt>formatter</dt><dd>The cell formatter which will render an\nappropriate form field: &lt;input type=\"text\"&gt;, &lt;textarea&gt;,\nor &lt;select&gt;.</dd>\n<dt>validation</dt><dd>Validation configuration for every field in\nthe column.</dd>\n</dl>\n<p>The following configuration can be provided as part of\nquickEdit.validation:</p>\n<dl>\n<dt>css</dt><dd>CSS classes encoding basic validation rules:\n<dl>\n<dt><code>yiv-required</code></dt>\n<dd>Value must not be empty.</dd>\n<dt><code>yiv-length:[x,y]</code></dt>\n<dd>String must be at least x characters and at most y characters.\nAt least one of x and y must be specified.</dd>\n<dt><code>yiv-integer:[x,y]</code></dt>\n<dd>The integer value must be at least x and at most y.\nx and y are both optional.</dd>\n<dt><code>yiv-decimal:[x,y]</code></dt>\n<dd>The decimal value must be at least x and at most y.  Exponents are\nnot allowed.  x and y are both optional.</dd>\n</dl>\n</dd>\n<dt>fn</dt><dd>A function that will be called with the DataTable as its\nscope and the cell's form element as the argument. Return true if the\nvalue is valid. Otherwise, call this.qe.displayMessage(...) to display\nan error and return false.</dd>\n<dt>msg</dt><dd>A map of types to messages that will be displayed\nwhen a basic or regex validation rule fails. The valid types are:\nrequired, min_length, max_length, integer, decimal, and regex.\nThere is no default for type regex, so you must specify a message if\nyou configure a regex validation.</dd>\n<dt>regex</dt><dd>Regular expression that the value must satisfy in\norder to be considered valid.</dd>\n</dl>"}, "MathFunction.InverseHyperbolicSine": {"name": "MathFunction.InverseHyperbolicSine", "constructors": [{"params": [{"type": "MathFunction", "name": "f", "description": ""}], "description": "<p>Inverse hyperbolic sine.</p>"}], "namespace": "MathFunction", "module": "gallery-mathcanvas", "extends": "MathFunction.FunctionWithArgs", "superclass": "MathFunction.FunctionWithArgs", "file": "InverseHyperbolicSine.js", "shortname": "InverseHyperbolicSine", "description": "<p>Inverse hyperbolic sine.</p>"}, "MathFunction": {"name": "MathFunction", "constructors": [{"description": "<p>Base class for all functions rendered by MathCanvas.</p>\n<p>Derived classes must implement toString() and evaluate().  To override\nthe default rendering which displays the output from toString(), implement\nprepareToRender() and render().</p>"}], "namespace": "", "module": "gallery-mathcanvas", "methods": {"render": {"params": [{"type": "MathCanvas", "name": "canvas", "description": "  the drawing canvas"}, {"type": "RectList", "name": "rect_list", "description": "  layout information"}], "description": "Draw this object and its descendants.", "guessedname": "render", "guessedtype": "function"}, "evaluate": {"return": {"type": "", "description": "the value of the function"}, "params": [{"type": "Object", "name": "var_list", "description": "  map of variable names to values or MathFunctions"}], "description": "Must be implemented by derived classes."}, "parenthesizeForRender": {"return": {"type": "boolean", "description": "true if f needs to parenthesize us"}, "protected": "", "params": [{"type": "MathFunction", "name": "f", "description": ""}], "guessedname": "parenthesizeForRender", "guessedtype": "function"}, "parenthesizeForPrint": {"return": {"type": "boolean", "description": "true if f needs to parenthesize us"}, "protected": "", "params": [{"type": "MathFunction", "name": "f", "description": ""}], "guessedname": "parenthesizeForPrint", "guessedtype": "function"}, "toString": {"return": {"type": "", "description": "text representation of the function"}, "description": "Must be implemented by derived classes."}, "prepareToRender": {"return": {"type": "int", "description": "index of this items info in rect_list"}, "params": [{"type": "MathCanvas", "name": "canvas", "description": "  the drawing canvas"}, {"type": "point", "name": "top_left", "description": "  x,y coordinates of the top left of the bounding box"}, {"type": "float", "name": "font_size", "description": "  percentage of the base font size"}, {"type": "RectList", "name": "rect_list", "description": "  layout information"}], "description": "Add the layout information for this object and its descendants to\nrect_list.", "guessedname": "prepareToRender", "guessedtype": "function"}}, "file": "MathFunction.js", "shortname": "MathFunction", "description": "<p>Base class for all functions rendered by MathCanvas.</p>\n<p>Derived classes must implement toString() and evaluate().  To override\nthe default rendering which displays the output from toString(), implement\nprepareToRender() and render().</p>"}, "MathFunction.HyperbolicTangent": {"name": "MathFunction.HyperbolicTangent", "constructors": [{"params": [{"type": "MathFunction", "name": "f", "description": ""}], "description": "<p>Hyperbolic tangent.</p>"}], "namespace": "MathFunction", "module": "gallery-mathcanvas", "extends": "MathFunction.FunctionWithArgs", "superclass": "MathFunction.FunctionWithArgs", "file": "HyperbolicTangent.js", "shortname": "HyperbolicTangent", "description": "<p>Hyperbolic tangent.</p>"}, "MathFunction.E": {"name": "MathFunction.E", "constructors": [{"description": "<p>e</p>"}], "namespace": "MathFunction", "module": "gallery-mathcanvas", "extends": "MathFunction", "superclass": "MathFunction", "file": "E.js", "shortname": "E", "description": "<p>e</p>"}, "MathFunction.Magnitude": {"name": "MathFunction.Magnitude", "constructors": [{"params": [{"type": "MathFunction", "name": "f", "description": ""}], "description": "<p>Magnitude (absolute value) of a number.</p>"}], "namespace": "MathFunction", "module": "gallery-mathcanvas", "extends": "MathFunction.FunctionWithArgs", "superclass": "MathFunction.FunctionWithArgs", "file": "Magnitude.js", "shortname": "Magnitude", "description": "<p>Magnitude (absolute value) of a number.</p>"}, "AtLeastOneCheckboxGroup": {"name": "AtLeastOneCheckboxGroup", "constructors": [{"params": [{"type": "String|Node|NodeList", "name": "cb_list", "description": "  The list of checkboxes to manage"}], "description": "At least one checkbox must be selected.  If the last one is turned off,\nthe active, adjacent one is turned on.  The exact algorithm is explained\nin \"Tog on Interface\".  The checkboxes are assumed to be ordered in the\norder they were added."}], "namespace": "", "module": "gallery-checkboxgroups", "extends": "CheckboxGroup", "superclass": "CheckboxGroup", "file": "AtLeastOneCheckboxGroup.js", "shortname": "AtLeastOneCheckboxGroup", "description": "At least one checkbox must be selected.  If the last one is turned off,\nthe active, adjacent one is turned on.  The exact algorithm is explained\nin \"Tog on Interface\".  The checkboxes are assumed to be ordered in the\norder they were added."}, "MathFunction.Tangent": {"name": "MathFunction.Tangent", "constructors": [{"params": [{"type": "MathFunction", "name": "f", "description": ""}], "description": "<p>Trigonometric tangent.</p>"}], "namespace": "MathFunction", "module": "gallery-mathcanvas", "extends": "MathFunction.FunctionWithArgs", "superclass": "MathFunction.FunctionWithArgs", "file": "Tangent.js", "shortname": "Tangent", "description": "<p>Trigonometric tangent.</p>"}, "MathFunction.Conjugate": {"name": "MathFunction.Conjugate", "constructors": [{"params": [{"type": "MathFunction", "name": "f", "description": ""}], "description": "<p>Conjugate of a complex number.</p>"}], "namespace": "MathFunction", "module": "gallery-mathcanvas", "extends": "MathFunction.FunctionWithArgs", "superclass": "MathFunction.FunctionWithArgs", "file": "Conjugate.js", "shortname": "Conjugate", "description": "<p>Conjugate of a complex number.</p>"}, "MathFunction.Quotient": {"name": "MathFunction.Quotient", "constructors": [{"params": [{"type": "MathFunction", "name": "n", "description": "  numerator"}, {"type": "MathFunction", "name": "d", "description": "  denominator"}], "description": "<p>Quotient of values.</p>"}], "namespace": "MathFunction", "module": "gallery-mathcanvas", "extends": "MathFunction.FunctionWithArgs", "superclass": "MathFunction.FunctionWithArgs", "file": "Quotient.js", "shortname": "Quotient", "description": "<p>Quotient of values.</p>"}, "MathFunction.Arctangent2": {"name": "MathFunction.Arctangent2", "constructors": [{"params": [{"type": "MathFunction", "name": "y", "description": ""}, {"type": "MathFunction", "name": "x", "description": ""}], "description": "<p>Inverse trigonometric cosine.</p>"}], "namespace": "MathFunction", "module": "gallery-mathcanvas", "extends": "MathFunction.FunctionWithArgs", "superclass": "MathFunction.FunctionWithArgs", "file": "Arctangent2.js", "shortname": "Arctangent2", "description": "<p>Inverse trigonometric cosine.</p>"}, "Column": {"name": "Column", "namespace": "", "module": "gallery-quickedit", "events": {"quickEditChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "quickEditChange", "description": "Fires when the value for the configuration attribute 'quickEdit' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "qeFormatterChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "qeFormatterChange", "description": "Fires when the value for the configuration attribute 'qeFormatter' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "file": "Column.js", "configs": {"quickEdit": {"type": "Object or boolean", "description": "Stores information for QuickEdit mode:  changed, copyDown, formatter, validation, fn, msg, regex.", "guessedname": "quickEdit", "guessedtype": "property"}, "qeFormatter": {"type": "Function", "description": "Formatter to be used during QuickEdit mode for read-only data.", "guessedname": "qeFormatter", "guessedtype": "property"}}, "shortname": "Column", "description": "Extensions to the Column class to support QuickEdit."}, "Plugin.ConsoleTest": {"name": "Plugin.ConsoleTest", "namespace": "Plugin", "module": "gallery-console-test", "extends": "Plugin.Base", "superclass": "Plugin.Base", "file": "console-test.js", "shortname": "ConsoleTest", "description": "<p>Adds a menu of registered unit test suites to the YUI 3 Console.</p>"}, "MathFunction.RealPart": {"name": "MathFunction.RealPart", "constructors": [{"params": [{"type": "MathFunction", "name": "f", "description": ""}], "description": "<p>Real part of a complex number.</p>"}], "namespace": "MathFunction", "module": "gallery-mathcanvas", "extends": "MathFunction.FunctionWithArgs", "superclass": "MathFunction.FunctionWithArgs", "file": "RealPart.js", "shortname": "RealPart", "description": "<p>Real part of a complex number.</p>"}, "ExpressionBuilder": {"name": "ExpressionBuilder", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Widget configuration"}], "description": "<p>Class which helps user to build a query expression.</p>"}], "namespace": "", "module": "gallery-exprbuilder", "methods": {"clear": {"description": "Clears the expression.", "guessedname": "clear", "guessedtype": "function"}, "_field": {"protected": "", "return": {"type": "String", "description": "markup for the textarea and basic buttons"}, "guessedname": "_field", "guessedtype": "function"}, "_validateExpression": {"protected": "", "return": {"type": "boolean", "description": "<code>true</code> if the expression has balanced parens and single quotes"}, "description": "Validate the expression.", "guessedname": "_validateExpression", "guessedtype": "function"}, "_query": {"protected": "", "return": {"type": "String", "description": "markup for the QueryBuilder"}, "guessedname": "_query", "guessedtype": "function"}}, "file": "ExpressionBuilder.js", "shortname": "ExpressionBuilder", "configs": {"orLabel": {"description": "The label for the OR button.", "writeonce": "", "default": "\"OR\"", "guessedname": "orLabel", "guessedtype": "property", "type": "{String}"}, "noVariableSelectedError": {"default": "'Please choose a variable.'", "type": "{String}", "description": "The error message when the user forgets to select a variable for\ninsertion.", "guessedname": "noVariableSelectedError", "guessedtype": "property"}, "formMgr": {"description": "The FormManager to use when validating the constructed expression.", "writeonce": "", "default": "null", "guessedname": "formMgr", "guessedtype": "property", "type": "{Y.FormManager}"}, "tooManyParensError": {"default": "'The expression contains an extra closing parenthesis at \"{context}\".'", "type": "{String}", "description": "The error message for an unclosed parenthesis. <q>context</q> is\nreplaced by the portion of the expression that generated the error.", "guessedname": "tooManyParensError", "guessedtype": "property"}, "combinatorMap": {"default": "null", "type": "{Object}", "description": "A map of QueryBuilder operators to objects defining\n{operator,pattern}.  This is needed if a variable type generates\nmultiple values, and the values must be combined with something\nother than AND.", "guessedname": "combinatorMap", "guessedtype": "property"}, "notLabel": {"description": "The label for the NOT button.", "writeonce": "", "default": "\"NOT\"", "guessedname": "notLabel", "guessedtype": "property", "type": "{String}"}, "parenLabel": {"description": "The label for the Insert Parentheses button.", "writeonce": "", "default": "\"()\"", "guessedname": "parenLabel", "guessedtype": "property", "type": "{String}"}, "queryBuilder": {"description": "The QueryBuilder to help the user construct the expression.  The\nwidget must not be rendered.  For each variable type, the values of\nthe configured operations must be the pattern to be inserted into\nthe expression. {value} will be replaced by the value entered by the\nuser.", "writeonce": "", "default": "null", "guessedname": "queryBuilder", "guessedtype": "property", "type": "{Y.QueryBuilder}"}, "unclosedParenError": {"default": "'The expression contains an unclosed parenthesis.'", "type": "{String}", "description": "The error message for an unclosed parenthesis.", "guessedname": "unclosedParenError", "guessedtype": "property"}, "unmatchedSingleQuoteError": {"default": "'The expression contains an unmatched single quote.'", "type": "{String}", "description": "The error message for an unmatched single quote.", "guessedname": "unmatchedSingleQuoteError", "guessedtype": "property"}, "resetLabel": {"description": "The label for the Reset button.", "writeonce": "", "default": "\"Cancel\"", "guessedname": "resetLabel", "guessedtype": "property", "type": "{String}"}, "andLabel": {"description": "The label for the AND button.", "writeonce": "", "default": "\"AND\"", "guessedname": "andLabel", "guessedtype": "property", "type": "{String}"}, "fieldName": {"description": "The name of the textarea form field.", "writeonce": "", "default": "\"\"", "guessedname": "fieldName", "guessedtype": "property", "type": "{String}"}, "insertLabel": {"description": "The label for the Insert button.", "writeonce": "", "default": "\"Insert\"", "guessedname": "insertLabel", "guessedtype": "property", "type": "{String}"}, "fieldId": {"description": "The id of the textarea form field.", "writeonce": "", "default": "Y.guid()", "guessedname": "fieldId", "guessedtype": "property", "type": "{String}"}, "clearLabel": {"description": "The label for the Clear button.", "writeonce": "", "default": "\"Clear\"", "guessedname": "clearLabel", "guessedtype": "property", "type": "{String}"}}, "description": "<p>Class which helps user to build a query expression.</p>"}, "InstanceManager": {"name": "InstanceManager", "constructors": [{"description": "<p>Stores instances of JavaScript components.  Allows a constructor or\nfactory method to be passed in place of an instance.  This enables lazy\nconstruction on demand.</p>\n<p>One use is to create a global repository of JavaScript components\nattached to DOM id's, e.g., YUI Buttons built on top of HTML\nbuttons.</p>"}], "namespace": "", "module": "gallery-instancemanager", "methods": {"get": {"params": [{"type": "String", "name": "id", "description": "  The id of the object to retrieve."}], "description": "Retrieve an object.", "guessedname": "get", "guessedtype": "function"}, "clear": {"description": "Remove all objects.", "guessedname": "clear", "guessedtype": "function"}, "remove": {"return": {"type": "mixed", "description": "the object that was removed or <code>false</code> if the slot was empty"}, "params": [{"type": "String", "name": "id", "description": "  The id of the object."}], "description": "Remove an object.", "guessedname": "remove", "guessedtype": "function"}, "getIfConstructed": {"params": [{"type": "String", "name": "id", "description": "  The id of the object to retrieve."}], "description": "Retrieve an object only if it has already been constructed.", "guessedname": "getIfConstructed", "guessedtype": "function"}, "put": {"return": {"type": "boolean", "description": "false if the id has already been used"}, "params": [{"type": "String", "name": "id", "description": "  The id of the object."}, {"type": "Object|Function", "name": "objOrCtor", "description": "  The object or the object's constructor or a factory method."}, {"type": "Array", "name": "args", "description": "  The array of arguments to pass to the constructor."}], "description": "Store an object or ctor+args.", "guessedname": "put", "guessedtype": "function"}, "applyToAll": {"params": [{"type": "Function|String|Object} The function to call or the name of the function or an object {fn:,scope:", "name": "behavior", "description": ""}, {"type": "Array", "name": "arguments", "description": "  The arguments to pass to the function."}, {"type": "boolean", "name": "skip_unconstructed", "description": "  Optional.  Pass <code>true</code> to skip unconstructed slots."}], "description": "Call a function on every object.", "guessedname": "applyToAll", "guessedtype": "function"}}, "file": "InstanceManager.js", "shortname": "InstanceManager", "description": "<p>Stores instances of JavaScript components.  Allows a constructor or\nfactory method to be passed in place of an instance.  This enables lazy\nconstruction on demand.</p>\n<p>One use is to create a global repository of JavaScript components\nattached to DOM id's, e.g., YUI Buttons built on top of HTML\nbuttons.</p>"}, "Paginator": {"name": "Paginator", "configs": {"rowsPerPage": {"type": "integer", "description": "REQUIRED. Number of records constituting a &quot;page&quot;", "guessedname": "rowsPerPage", "guessedtype": "property"}, "totalRecords": {"default": "0", "type": "integer", "description": "Total number of records to paginate through", "guessedname": "totalRecords", "guessedtype": "property"}, "recordOffset": {"default": "0", "type": "integer", "description": "Zero based index of the record considered first on the current page.\nFor page based interactions, don't modify this attribute directly;\nuse setPage(n).", "guessedname": "recordOffset", "guessedtype": "property"}, "initialPage": {"default": "1", "type": "integer", "description": "Page to display on initial paint", "guessedname": "initialPage", "guessedtype": "property"}, "template": {"see": "Paginator.TEMPLATE_DEFAULT", "type": "string", "description": "Template used to render controls.  The string will be used as\ninnerHTML on all specified container nodes.  Bracketed keys\n(e.g. {pageLinks}) in the string will be replaced with an instance\nof the so named ui component.", "guessedname": "template", "guessedtype": "property"}, "id": {"final": "", "type": "integer", "description": "Unique id assigned to this instance", "guessedname": "id", "guessedtype": "property"}, "alwaysVisible": {"default": "true", "type": "boolean", "description": "Display pagination controls even when there is only one page.  Set\nto false to forgo rendering and/or hide the containers when there\nis only one page of data.  Note if you are using the rowsPerPage\ndropdown ui component, visibility will be maintained as long as the\nnumber of records exceeds the smallest page size.", "guessedname": "alwaysVisible", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal to set instance and ui component\nconfiguration."}], "description": "The Paginator widget provides a set of controls to navigate through paged\ndata.\nTo instantiate a Paginator, pass a configuration object to the contructor.\nThe configuration object should contain the following properties:\n<ul>\n<li>rowsPerPage : <em>n</em> (int)</li>\n<li>totalRecords : <em>n</em> (int or Paginator.VALUE_UNLIMITED)</li>\n</ul>"}], "namespace": "", "module": "gallery-paginator", "events": {"templateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "templateChange", "description": "Fires when the value for the configuration attribute 'template' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "rowsPerPageChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "rowsPerPageChange", "description": "Fires when the value for the configuration attribute 'rowsPerPage' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "totalRecordsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "totalRecordsChange", "description": "Fires when the value for the configuration attribute 'totalRecords' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "alwaysVisibleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "alwaysVisibleChange", "description": "Fires when the value for the configuration attribute 'alwaysVisible' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "initialPageChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "initialPageChange", "description": "Fires when the value for the configuration attribute 'initialPage' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "recordOffsetChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "recordOffsetChange", "description": "Fires when the value for the configuration attribute 'recordOffset' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "pageChange": {"description": "Event fired when attribute changes have resulted in the calculated\ncurrent page changing."}, "changeRequest": {"description": "Event fired when a change in pagination values is requested,\neither by interacting with the various ui components or via the\nsetStartIndex(n) etc APIs.\nSubscribers will receive the proposed state as the first parameter.\nThe proposed state object will contain the following keys:\n<ul>\n<li>paginator - the Paginator instance</li>\n<li>page</li>\n<li>totalRecords</li>\n<li>recordOffset - index of the first record on the new page</li>\n<li>rowsPerPage</li>\n<li>records - array containing [start index, end index] for the records on the new page</li>\n<li>before - object literal with all these keys for the current state</li>\n</ul>"}, "idChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "idChange", "description": "Fires when the value for the configuration attribute 'id' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "methods": {"getRowsPerPage": {"return": {"type": "number", "description": "the current setting of the rowsPerPage attribute"}, "description": "Get the number of rows per page.", "guessedname": "getRowsPerPage", "guessedtype": "function"}, "getTotalRecords": {"return": {"type": "number", "description": "the current setting of totalRecords attribute"}, "description": "Get the total number of records.", "guessedname": "getTotalRecords", "guessedtype": "function"}, "getPreviousPage": {"return": {"type": "number", "description": ""}, "description": "Get the page number of the previous page, or null if the current page\nis the first page.", "guessedname": "getPreviousPage", "guessedtype": "function"}, "getTotalPages": {"return": {"type": "number", "description": ""}, "description": "Get the total number of pages in the data set according to the current\nrowsPerPage and totalRecords values.  If totalRecords is not set, or\nset to Y.Paginator.VALUE_UNLIMITED, returns Y.Paginator.VALUE_UNLIMITED.", "guessedname": "getTotalPages", "guessedtype": "function"}, "setState": {"params": [{"type": "Object", "name": "state", "description": "  Object literal of attribute:value pairs to set"}], "description": "Convenience method to facilitate setting state attributes rowsPerPage,\ntotalRecords, recordOffset in batch.  Also supports calculating\nrecordOffset from state.page if state.recordOffset is not provided.\nFires only a single pageChange event, if appropriate.\nThis will not fire a changeRequest event.", "guessedname": "setState", "guessedtype": "function"}, "updateVisibility": {"description": "Hides the widget if there is only one page of data and attribute\nalwaysVisible is false.  Conversely, it displays the widget if either\nthere is more than one page worth of data or alwaysVisible is turned on.", "guessedname": "updateVisibility", "guessedtype": "function"}, "_selfSubscribe": {"protected": "", "description": "Subscribes to instance attribute change events to automate certain\nbehaviors.", "guessedname": "_selfSubscribe", "guessedtype": "function"}, "_firePageChange": {"protected": "", "params": [{"type": "Object", "name": "state", "description": "  the result of getState(oldState)"}], "description": "Fires a pageChange event in the form of a standard attribute change\nevent with additional properties prevState and newState.", "guessedname": "_firePageChange", "guessedtype": "function"}, "setStartIndex": {"params": [{"type": "number", "name": "offset", "description": "  the new record offset"}, {"type": "boolean", "name": "silent", "description": "  whether to forcibly avoid firing the changeRequest event"}], "description": "Move the record offset to a new starting index.  This will likely cause\nthe calculated current page to change.  You should probably use setPage.", "guessedname": "setStartIndex", "guessedtype": "function"}, "getState": {"return": {"type": "object", "description": ""}, "params": [{"type": "object", "name": "changes", "description": "  OPTIONAL object literal with proposed values\nSupported change keys include:\n<ul>\n<li>rowsPerPage</li>\n<li>totalRecords</li>\n<li>recordOffset OR</li>\n<li>page</li>\n</ul>"}], "description": "Get an object literal describing the current state of the paginator.  If\nan object literal of proposed values is passed, the proposed state will\nbe returned as an object literal with the following keys:\n<ul>\n<li>paginator - instance of the Paginator</li>\n<li>page - number</li>\n<li>totalRecords - number</li>\n<li>recordOffset - number</li>\n<li>rowsPerPage - number</li>\n<li>records - [ start_index, end_index ]</li>\n<li>before - (OPTIONAL) { state object literal for current state }</li>\n</ul>", "guessedname": "getState", "guessedtype": "function"}, "hasPreviousPage": {"return": {"type": "boolean", "description": ""}, "description": "Is there a page before the current page?", "guessedname": "hasPreviousPage", "guessedtype": "function"}, "getStartIndex": {"return": {"type": "number", "description": "the index of the first record on the current page"}, "description": "Get the index of the first record on the current page", "guessedname": "getStartIndex", "guessedtype": "function"}, "setTotalRecords": {"params": [{"type": "number", "name": "total", "description": "  the new total number of records"}, {"type": "boolean", "name": "silent", "description": "  whether to forcibly avoid firing the changeRequest event"}], "description": "Set the total number of records.", "guessedname": "setTotalRecords", "guessedtype": "function"}, "_handleStateChange": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  the attribute change event"}], "description": "Fires the pageChange event when the state attributes have changed in\nsuch a way as to locate the current recordOffset on a new page.", "guessedname": "_handleStateChange", "guessedtype": "function"}, "hasPage": {"return": {"type": "boolean", "description": ""}, "params": [{"type": "number", "name": "page", "description": "  the page in question"}], "description": "Does the requested page have any records?", "guessedname": "hasPage", "guessedtype": "function"}, "setRowsPerPage": {"params": [{"type": "number", "name": "rpp", "description": "  the new number of rows per page"}, {"type": "boolean", "name": "silent", "description": "  whether to forcibly avoid firing the changeRequest event"}], "description": "Set the number of rows per page.", "guessedname": "setRowsPerPage", "guessedtype": "function"}, "setPage": {"params": [{"type": "number", "name": "newPage", "description": "  the new page number"}, {"type": "boolean", "name": "silent", "description": "  whether to forcibly avoid firing the changeRequest event"}], "description": "Set the current page to the provided page number if possible.", "guessedname": "setPage", "guessedtype": "function"}, "hasNextPage": {"return": {"type": "boolean", "description": ""}, "description": "Are there records on the next page?", "guessedname": "hasNextPage", "guessedtype": "function"}, "getCurrentPage": {"return": {"type": "number", "description": ""}, "description": "Get the page number corresponding to the current record offset.", "guessedname": "getCurrentPage", "guessedtype": "function"}, "_syncRecordOffset": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  totalRecordsChange event"}], "description": "Sets recordOffset to the starting index of the previous page when\ntotalRecords is reduced below the current recordOffset.", "guessedname": "_syncRecordOffset", "guessedtype": "function"}, "_renderTemplate": {"protected": "", "params": [{"type": "HTMLElement", "name": "container", "description": "  where to add the ui components"}, {"type": "String", "name": "template", "description": "  the template to use as a guide for rendering"}, {"type": "String", "name": "id_base", "description": "  id base for the container's ui components"}, {"type": "Boolean", "name": "hide", "description": "  leave the container hidden after assembly"}], "description": "Creates the individual ui components and renders them into a container.", "guessedname": "_renderTemplate", "guessedtype": "function"}, "Paginator.isNumeric": {"description": "Similar to Y.Lang.isNumber, but allows numeric strings.  This is\nis used for attribute validation in conjunction with getters that return\nnumbers.", "returns": "{Boolean} true if the input is coercable into a finite number", "static": "", "guessedname": "isNumeric", "guessedtype": "function", "params": [{"type": "Number|String", "name": "v", "description": "  value to be checked for number or numeric string"}]}, "getPageRecords": {"return": {"type": "Array", "description": "[start_index, end_index]"}, "params": [{"type": "number", "name": "page", "description": "  (optional) The page (current page if not specified)"}], "description": "Get the start and end record indexes of the specified page.", "guessedname": "getPageRecords", "guessedtype": "function"}, "getNextPage": {"return": {"type": "number", "description": ""}, "description": "Get the page number of the next page, or null if the current page is the\nlast page.", "guessedname": "getNextPage", "guessedtype": "function"}, "renderUIComponent": {"params": [{"type": "HTMLElement", "name": "marker", "description": "  the marker node to replace"}, {"type": "String", "name": "id_base", "description": "  string base the component's generated id"}], "description": "Replaces a marker node with a rendered UI component, determined by the\nyui-paginator-ui-(UI component class name) in the marker's className. e.g.\nyui-paginator-ui-PageLinks => new Y.Paginator.ui.PageLinks(this)", "guessedname": "renderUIComponent", "guessedtype": "function"}, "Paginator.toNumber": {"return": {"type": "", "description": "Number"}, "description": "Return a number or null from input", "static": "", "guessedname": "toNumber", "guessedtype": "function", "params": [{"type": "Number|String", "name": "n", "description": "  a number or numeric string"}]}}, "extends": "Widget", "superclass": "Widget", "file": "Paginator.js", "shortname": "Paginator", "properties": {"_pageChanged": {"protected": "", "type": "boolean", "description": "Used by setState to indicate when a page change has occurred", "guessedname": "_pageChanged", "guessedtype": "property"}, "Paginator.TEMPLATE_DEFAULT": {"type": "string", "static": "", "description": "Default template used by Paginator instances.  Update this if you want\nall new Paginators to use a different default template.", "guessedname": "TEMPLATE_DEFAULT", "guessedtype": "property"}, "Paginator.TEMPLATE_ROWS_PER_PAGE": {"type": "string", "static": "", "description": "Common alternate pagination format, including page links, links for\nprevious, next, first and last pages as well as a rows-per-page\ndropdown.  Offered as a convenience.", "guessedname": "TEMPLATE_ROWS_PER_PAGE", "guessedtype": "property"}, "_batch": {"protected": "", "type": "boolean", "description": "Flag used to indicate multiple attributes are being updated via setState", "guessedname": "_batch", "guessedtype": "property"}, "_state": {"protected": "", "type": "Object", "description": "Temporary state cache used by setState to keep track of the previous\nstate for eventual pageChange event firing", "guessedname": "_state", "guessedtype": "property"}, "Paginator.ui": {"static": "", "description": "Storage object for UI Components", "guessedname": "ui", "guessedtype": "property"}, "Paginator.VALUE_UNLIMITED": {"description": "Used to identify unset, optional configurations, or used explicitly in\nthe case of totalRecords to indicate unlimited pagination.", "static": "", "guessedname": "VALUE_UNLIMITED", "guessedtype": "property", "type": "number", "final": ""}, "Paginator.ID_BASE": {"description": "Base of id strings used for ui components.", "private": "", "static": "", "guessedname": "ID_BASE", "guessedtype": "property", "type": "string"}}, "description": "The Paginator widget provides a set of controls to navigate through paged\ndata.\nTo instantiate a Paginator, pass a configuration object to the contructor.\nThe configuration object should contain the following properties:\n<ul>\n<li>rowsPerPage : <em>n</em> (int)</li>\n<li>totalRecords : <em>n</em> (int or Paginator.VALUE_UNLIMITED)</li>\n</ul>"}, "Chipper": {"file": "Chipper.js", "description": "<p>Destroys objects asynchronously.</p>", "namespace": "", "module": "gallery-chipper", "methods": {"Y.Chipper.destroy": {"static": "", "params": [{"type": "Object/Array", "name": "objs", "description": "  The object(s) to destroy."}], "description": "Throw objects into the chipper.  If an object does not implement\ndestroy(), it is ignored.", "guessedname": "destroy", "guessedtype": "function"}}, "guessedname": "list", "guessedtype": "property", "shortname": "Chipper", "name": "Chipper"}, "QueryBuilder.String": {"name": "QueryBuilder.String", "namespace": "QueryBuilder", "module": "gallery-querybuilder", "guessedname": "String", "file": "String.js", "guessedtype": "function", "shortname": "String", "description": "<p>Plugin for accepting a string or number.  All the operators specified\nfor this plugin are displayed on a menu.</p>\n<p>In the <code>var_list</code> configuration, specify\n<code>validation</code> to provide CSS classes that will be interpreted\nby <code>Y.FormManager</code>.</p>\n<p>To enable autocomplete, define <code>autocomplete</code> in the\n<code>var_list</code> configuration.  The object will be used as the\nconfiguration for <code>Y.Plugin.AutoComplete</code>.  If you specify\n<code>autocomplete.containerClassName</code>, this CSS class will be\nadded to the container generated by the autocomplete plugin.</p>"}, "Plugin.OverlayForm": {"name": "Plugin.OverlayForm", "namespace": "Plugin", "module": "gallery-formmgr-overlay-plugin", "extends": "Plugin.Base", "superclass": "Plugin.Base", "file": "OverlayFormPlugin.js", "shortname": "OverlayForm", "configs": {"formmgr": {"writeonce": "", "type": "{Y.FormManager}", "guessedname": "formmgr", "guessedtype": "property"}}, "description": "A simple plugin for Y.Overlay which attaches a Y.FormManager to the\n&lt;form&gt; inside the overlay.  Before the overlay is shown,\nprepareForm() is called to insert the default values.  (If this returns\nfalse, the overlay is not shown.)  After the overlay is shown, focus is\nset to the first field."}, "SelectAllCheckboxGroup": {"name": "SelectAllCheckboxGroup", "constructors": [{"params": [{"type": "String|Object", "name": "select_all_cb", "description": "  The checkbox that triggers \"select all\""}, {"type": "String|Node|NodeList", "name": "cb_list", "description": "  The list of checkboxes to manage"}], "description": "All checkboxes can be selected and a select-all checkbox is available\nto check all. This check-all box is automatically changed if any other\ncheckbox changes state."}], "namespace": "", "module": "gallery-checkboxgroups", "extends": "CheckboxGroup", "superclass": "CheckboxGroup", "file": "SelectAllCheckboxGroup.js", "shortname": "SelectAllCheckboxGroup", "description": "All checkboxes can be selected and a select-all checkbox is available\nto check all. This check-all box is automatically changed if any other\ncheckbox changes state."}, "Plugin.Neon": {"name": "Plugin.Neon", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  configuration"}], "description": "<p>Overrides Y.Node.show() to make it look like a flickering neon\nsign.</p>"}], "namespace": "Plugin", "module": "gallery-neon", "extends": "Plugin.Base", "superclass": "Plugin.Base", "file": "Neon.js", "shortname": "Neon", "configs": {"easing": {"default": "Y.Easing.easeIn", "type": "{Function}", "description": "The easing to apply to the color animation.", "guessedname": "easing", "guessedtype": "property"}, "textColor": {"type": "{String}", "description": "Text (ending) color.  Must be parseable by Y.Color.toRGB().", "guessedname": "textColor", "guessedtype": "property"}, "flickerCount": {"default": "10", "type": "{int}", "description": "The number of flickers before the text stays visible.", "guessedname": "flickerCount", "guessedtype": "property"}, "backgroundColor": {"type": "{String}", "description": "Background (starting) color.  Must be parseable by Y.Color.toRGB().", "guessedname": "backgroundColor", "guessedtype": "property"}, "textShadow": {"type": "{String}", "description": "Text shadow *template* for setting text-shadow CSS3 property.  Use\n{color} to mark where color should be inserted.", "guessedname": "textShadow", "guessedtype": "property"}}, "description": "<p>Overrides Y.Node.show() to make it look like a flickering neon\nsign.</p>"}, "MathFunction.NaturalLog": {"name": "MathFunction.NaturalLog", "constructors": [{"params": [{"type": "MathFunction", "name": "f", "description": ""}], "description": "<p>Natural logarithm.</p>"}], "namespace": "MathFunction", "module": "gallery-mathcanvas", "extends": "MathFunction.FunctionWithArgs", "superclass": "MathFunction.FunctionWithArgs", "file": "NaturalLog.js", "shortname": "NaturalLog", "description": "<p>Natural logarithm.</p>"}, "Canvas.Context2d": {"name": "Canvas.Context2d", "constructors": [{"params": [{"type": "Y.Node", "name": "node", "description": "  the canvas element"}, {"type": "Object", "name": "config", "description": "  configuration\n<dl>\n<dt>pixelAlign<dt>\n<dd>Optional. Default: true. Pass true to get thinner, cleaner strokes.\nPass false to get the default rendering.</dd>\n</dl>"}], "description": "<p>Wrapper for a canvas 2d context.  It exposes the exact same api as\nthe native 2d context, plus some extras, documented below.  Just like\nY.Node, use get() and set() to modify attributes.</p>"}], "namespace": "Canvas", "module": "gallery-canvas", "methods": {"roundedRect": {"params": [{"type": "int", "name": "top", "description": ""}, {"type": "int", "name": "left", "description": ""}, {"type": "int", "name": "bottom", "description": ""}, {"type": "int", "name": "right", "description": ""}, {"type": "int", "name": "radius", "description": "  radius of rounded corners"}], "description": "Define a rectangle with rounded corners.  You must call stroke(),\nfill(), etc. afterwards.", "guessedname": "roundedRect", "guessedtype": "function"}, "set": {"params": [{"type": "String", "name": "name", "description": "  the attribute name"}, {"type": "Mixed", "name": "value", "description": "  the attribute value"}], "description": "Set an attribute.  This accepts all attributes of the context and\nthe special name \"pixelAlign\".", "guessedname": "set", "guessedtype": "function"}, "get": {"return": {"type": "Mixed", "description": "the attribute value"}, "params": [{"type": "String", "name": "name", "description": "  the attribute name"}], "description": "Get an attribute.  This accepts all attributes of the context and\nthe special name \"pixelAlign\".", "guessedname": "get", "guessedtype": "function"}, "move": {"params": [{"type": "int", "name": "dx", "description": ""}, {"type": "int", "name": "dy", "description": ""}], "description": "Move relative to the current pen location (set via moveTo or move).\nThis only works when the transformation matrix is constant!", "guessedname": "move", "guessedtype": "function"}, "poly": {"params": [{"type": "Array", "name": "list", "description": "  List of deltas (dx,dy).  You can omit values that are zero."}], "description": "Draw a polygon from a set of deltas.", "guessedname": "poly", "guessedtype": "function"}, "line": {"params": [{"type": "int", "name": "dx", "description": ""}, {"type": "int", "name": "dy", "description": ""}], "description": "Move relative to the current pen location.\nThis only works when the transformation matrix is constant!", "guessedname": "line", "guessedtype": "function"}}, "file": "Context2d.js", "shortname": "Context2d", "description": "<p>Wrapper for a canvas 2d context.  It exposes the exact same api as\nthe native 2d context, plus some extras, documented below.  Just like\nY.Node, use get() and set() to modify attributes.</p>"}, "Node~scrollIntoView": {"name": "Node~scrollIntoView", "chainable": "", "namespace": "", "module": "node", "guessedname": "scrollIntoView", "file": "ScrollIntoView.js", "guessedtype": "function", "shortname": "Node~scrollIntoView", "method": "scrollIntoView", "description": "<p>Only scrolls the browser if the object is not currently visible.</p>\n<p>This requires that all scrollable elements have position:relative.\nOtherwise, this algorithm will skip over them with unpredictable\nresults.</p>"}, "MathFunction.Exponential": {"name": "MathFunction.Exponential", "constructors": [{"params": [{"type": "MathFunction", "name": "b", "description": "  base"}, {"type": "MathFunction", "name": "e", "description": "  exponent"}], "description": "<p>Exponential.</p>"}], "namespace": "MathFunction", "module": "gallery-mathcanvas", "extends": "MathFunction.FunctionWithArgs", "superclass": "MathFunction.FunctionWithArgs", "file": "Exponential.js", "shortname": "Exponential", "description": "<p>Exponential.</p>"}, "MathFunction.Arcsine": {"name": "MathFunction.Arcsine", "constructors": [{"params": [{"type": "MathFunction", "name": "f", "description": ""}], "description": "<p>Inverse trigonometric sine.</p>"}], "namespace": "MathFunction", "module": "gallery-mathcanvas", "extends": "MathFunction.FunctionWithArgs", "superclass": "MathFunction.FunctionWithArgs", "file": "Arcsine.js", "shortname": "Arcsine", "description": "<p>Inverse trigonometric sine.</p>"}, "QueryBuilder": {"properties": {"Y.QueryBuilder.Env": {"type": "{Object}", "static": "", "description": "<p>Environment information.</p>\n<dl>\n<dt>has_bubble_problem</dt>\n<dd>True if change events from select elements do not bubble.</dd>\n</dl>", "guessedname": "Env", "guessedtype": "property"}, "Y.QueryBuilder.plugin_mapping": {"type": "{Object}", "static": "", "description": "<p>Mapping of variable types to plugin classes.  (Always introduce new\nvariable types rather than changing the existing mappings.)</p>\n<dl>\n<dt>string</dt>\n<dd>Generic string.</dd>\n<dt>number</dt>\n<dd>Generic number.  You must specify appropriate validations, e.g., yiv-integer or yiv-decimal.</dd>\n<dt>select</dt>\n<dd>Generic list of values.</dd>\n</dl>", "guessedname": "plugin_mapping", "guessedtype": "property"}}, "name": "QueryBuilder", "constructors": [{"params": [{"type": "Array", "name": "var_list", "description": "  List of variables that be included in the query.\nEach item in the list is an object containing:\n<dl>\n<dt>name</dt>\n<dd>The name of the variable.  Set as the <code>value</code> for the select option.</dd>\n<dt>type</dt>\n<dd>The variable type.  Used to determine which plugin to instantiate.\nMust match a key in <code>Y.QueryBuilder.plugin_mapping</code>.\n(You can add new plugins to this global mapping.)</dd>\n<dt>text</dt>\n<dd>The text displayed when the variable is selected.</dd>\n<dt>plugin-specific configuration</dt>\n<dd>Plugins may defines additional configuration.</dd>\n</dl>"}, {"type": "Object", "name": "operators", "description": "  Map of variable types to list of operators.\nEach operator is an object defining <code>value</code> and <code>text</code>."}, {"type": "Object", "name": "config", "description": "  Widget configuration"}], "description": "<p>Class which allows user to build a list of query criteria, e.g., for\nsearching.  All the conditions are either AND'ed or OR'ed.  For a more\ngeneral query builder, see gallery-exprbuilder.</p>\n<p>The default package provides two data types:  String (which can also\nbe used for numbers) and Select (which provides a menu of options).  The\nplugin API allows defining additional data types, e.g., date range or\nmulti-select.  Every plugin must be registered in\n<code>Y.QueryBuilder.plugin_mapping</code>.  Plugins must implement the\nfollowing functions:</p>\n<dl>\n<dt><code>constructor(qb, config)</code></dt>\n<dd>The arguments passed to the constructor are the QueryBuilder instance\nand the <code>pluginConfig</code> set on the QueryBuilder instance.\nAt the minimum, this function should initalize form field name patterns\nusing <code>config.field_prefix</code>.</dd>\n<dt><code>create(query_index, var_config, op_list, value)</code><dt>\n<dd>This function must create the additional cells for the query row and\npopulate these cells appropriately.  (The QueryBuilder widget will\ninsert the cells into the table.)  <code>var_config</code> is the\nitem from the QueryBuilder's <code>var_list</code> that the user\nselected.  <code>op_list</code> is the item from the QueryBuilder's\n<code>operators</code> which matches the variable selected by the\nuser.  <code>value</code> is optional.  If specified, it is the\ninitial value(s) to be displayed by the plugin.</dd>\n<dt><code>postCreate(query_index, var_config, op_list, value)</code></dt>\n<dd>Optional.  If it exists, it will be called after the cells returned by\n<code>create()</code> have been inserted into the table.  The arguments\nare the same as <code>create()</code>.</dd>\n<dt><code>destroy()</code></dt>\n<dd>Destroy the plugin.  (The QueryBuilder widget will remove the cells\nand purge all events.)</dd>\n<dt><code>updateName(new_index)</code></dt>\n<dd>Update the names of the form fields managed by the plugin.</dd>\n<dt><code>set(query_index, data)</code></dt>\n<dd>Set the displayed value(s) by extracting values from data (a map)\nbased on the current names of the plugin's form fields.</dd>\n<dt><code>toDatabaseQuery()</code></dt>\n<dd>Return an array of arrays.  Each inner array contains an operation\nand a value.  The default String and Select plugins each return\na single inner array.  A date range plugin would return two inner\narrays, one for the start date and one for the end date.</dd>\n<dt><code>validate()</code></dt>\n<dd>Optional.  If additional validations are required beyond the basic\nvalidations encoded in CSS, this function should check them.  If\nthe input is not valid, call <code>displayFieldMessage()</code>\non the QueryBuilder object and return false.  Otherwise, return\ntrue.</dd>\n</dl>"}], "namespace": "", "module": "gallery-querybuilder", "events": {"queryChanged": {"params": [{"type": "Object", "name": "info", "description": "  <code>remove</code> is <code>true</code> if a row was removed"}], "description": "Fires when the query is modified."}}, "methods": {"reset": {"params": [{"type": "Array", "name": "var_list", "description": "  If specified, the list of available variables is replaced."}, {"type": "Object", "name": "operators", "description": "  If specified, the operators for all variable types will be replaced."}], "description": "Reset the query.", "guessedname": "reset", "guessedtype": "function"}, "displayFieldMessage": {"return": {"type": "boolean", "description": "true if the message was displayed, false if a higher precedence message was already there"}, "params": [{"type": "String|Object", "name": "e", "description": "  The selector for the element or the element itself"}, {"type": "String", "name": "msg", "description": "  The message"}, {"type": "String", "name": "type", "description": "  The message type (see Y.FormManager.status_order)"}, {"type": "boolean", "name": "scroll", "description": "  (Optional) <code>true</code> if the form row should be scrolled into view"}], "description": "Display a message for the specified field.", "guessedname": "displayFieldMessage", "guessedtype": "function"}, "_rowControls": {"protected": "", "return": {"type": "String", "description": "markup for the row controls (insert and remove)"}, "guessedname": "_rowControls", "guessedtype": "function"}, "getPlugin": {"return": {"type": "Object", "description": "the plugin for the row, if any"}, "params": [{"type": "int", "name": "row_index", "description": "  The index of the row"}], "description": "Returns plugin used for the specified row, if any.", "guessedname": "getPlugin", "guessedtype": "function"}, "update": {"params": [{"type": "int", "name": "row_index", "description": "  The index of the row"}, {"type": "String", "name": "value", "description": "  If specified, the value to set"}], "description": "Set the value of the specified row.", "guessedname": "update", "guessedtype": "function"}, "remove": {"return": {"type": "boolean", "description": "<code>true</code> if successful"}, "params": [{"type": "int", "name": "row_index", "description": "  The index of the row"}], "description": "Removes the specified row.", "guessedname": "remove", "guessedtype": "function"}, "toDatabaseQuery": {"return": {"type": "Array", "description": "list of [var, op, value] tuples suitable for a database query"}, "guessedname": "toDatabaseQuery", "guessedtype": "function"}, "_variablesMenu": {"return": {"type": "String", "description": "markup for the query variable menu"}, "protected": "", "params": [{"type": "String", "name": "menu_name", "description": "  name for the select form element"}], "guessedname": "_variablesMenu", "guessedtype": "function"}, "_notifyChanged": {"protected": "", "description": "Fires the queryChanged event.", "guessedname": "_notifyChanged", "guessedtype": "function"}, "_createContainer": {"protected": "", "return": {"type": "DOM element", "description": "container for one piece of a query row"}, "guessedname": "_createContainer", "guessedtype": "function"}, "appendNew": {"return": {"type": "Object", "description": "plugin that was created for the row, if any"}, "params": [{"type": "String", "name": "name", "description": "  If specified, this variable is selected."}, {"type": "String", "name": "value", "description": "  If specified, this value is selected."}], "description": "Append a new query condition to the table.", "guessedname": "appendNew", "guessedtype": "function"}, "variableName": {"return": {"type": "String", "description": "name for the select form element listing the available query variables"}, "params": [{"type": "int", "name": "i", "description": "  query row index"}], "guessedname": "variableName", "guessedtype": "function"}, "validateFields": {"return": {"type": "Boolean", "description": "<code>true</code> if all values are valid"}, "description": "Validate the fields in each row.", "guessedname": "validateFields", "guessedtype": "function"}}, "extends": "Widget", "superclass": "Widget", "file": "Types.js", "shortname": "QueryBuilder", "configs": {"fieldPrefix": {"description": "All generated form field names start with this prefix.  This avoids\nconflicts if you have more than one QueryBuilder on a page.", "writeonce": "", "default": "\"\"", "guessedname": "fieldPrefix", "guessedtype": "property", "type": "{String}"}, "pluginConfig": {"description": "Configuration passed to plugins when they are constructed.", "writeonce": "", "default": "{}", "guessedname": "pluginConfig", "guessedtype": "property", "type": "{Object}"}, "chooseVarPrompt": {"description": "The prompt displayed when a new item is added to the query.", "writeonce": "", "default": "\"Choose a variable\"", "guessedname": "chooseVarPrompt", "guessedtype": "property", "type": "{String}"}}, "description": "<p>Class which allows user to build a list of query criteria, e.g., for\nsearching.  All the conditions are either AND'ed or OR'ed.  For a more\ngeneral query builder, see gallery-exprbuilder.</p>\n<p>The default package provides two data types:  String (which can also\nbe used for numbers) and Select (which provides a menu of options).  The\nplugin API allows defining additional data types, e.g., date range or\nmulti-select.  Every plugin must be registered in\n<code>Y.QueryBuilder.plugin_mapping</code>.  Plugins must implement the\nfollowing functions:</p>\n<dl>\n<dt><code>constructor(qb, config)</code></dt>\n<dd>The arguments passed to the constructor are the QueryBuilder instance\nand the <code>pluginConfig</code> set on the QueryBuilder instance.\nAt the minimum, this function should initalize form field name patterns\nusing <code>config.field_prefix</code>.</dd>\n<dt><code>create(query_index, var_config, op_list, value)</code><dt>\n<dd>This function must create the additional cells for the query row and\npopulate these cells appropriately.  (The QueryBuilder widget will\ninsert the cells into the table.)  <code>var_config</code> is the\nitem from the QueryBuilder's <code>var_list</code> that the user\nselected.  <code>op_list</code> is the item from the QueryBuilder's\n<code>operators</code> which matches the variable selected by the\nuser.  <code>value</code> is optional.  If specified, it is the\ninitial value(s) to be displayed by the plugin.</dd>\n<dt><code>postCreate(query_index, var_config, op_list, value)</code></dt>\n<dd>Optional.  If it exists, it will be called after the cells returned by\n<code>create()</code> have been inserted into the table.  The arguments\nare the same as <code>create()</code>.</dd>\n<dt><code>destroy()</code></dt>\n<dd>Destroy the plugin.  (The QueryBuilder widget will remove the cells\nand purge all events.)</dd>\n<dt><code>updateName(new_index)</code></dt>\n<dd>Update the names of the form fields managed by the plugin.</dd>\n<dt><code>set(query_index, data)</code></dt>\n<dd>Set the displayed value(s) by extracting values from data (a map)\nbased on the current names of the plugin's form fields.</dd>\n<dt><code>toDatabaseQuery()</code></dt>\n<dd>Return an array of arrays.  Each inner array contains an operation\nand a value.  The default String and Select plugins each return\na single inner array.  A date range plugin would return two inner\narrays, one for the start date and one for the end date.</dd>\n<dt><code>validate()</code></dt>\n<dd>Optional.  If additional validations are required beyond the basic\nvalidations encoded in CSS, this function should check them.  If\nthe input is not valid, call <code>displayFieldMessage()</code>\non the QueryBuilder object and return false.  Otherwise, return\ntrue.</dd>\n</dl>"}, "ArrayList": {"name": "ArrayList", "namespace": "", "module": "gallery-algorithms", "methods": {"setComparator": {"params": [{"type": "Function", "name": "compare", "description": "  the -1,0,+1 comparison function to use when sorting and searching"}], "description": "<p>Set comparison function.</p>", "guessedname": "setComparator", "guessedtype": "function"}, "quickSort": {"description": "<p>Quick sort the given list, using the function passed to setComparator().</p>", "guessedname": "quickSort", "guessedtype": "function"}, "swap": {"params": [{"type": "int", "name": "i", "description": "  first index"}, {"type": "int", "name": "j", "description": "  second index"}], "description": "<p>Swap two elements.</p>", "guessedname": "swap", "guessedtype": "function"}, "binarySearch": {"return": {"type": "int", "description": "index of matched item or -1 if no match"}, "params": [{"type": "Mixed", "name": "target", "description": "  the object to search for"}], "description": "<p>Binary search, using the function passed to setComparator().</p>", "guessedname": "binarySearch", "guessedtype": "function"}}, "file": "ArrayList.js", "shortname": "ArrayList", "description": "Useful algorithms that are not provided by browsers.  Available if\nY.ArrayList (collection) is loaded."}, "Paginator.ui.ItemRangeDropdown": {"name": "Paginator.ui.ItemRangeDropdown", "constructors": [{"params": [{"type": "Pagintor", "name": "p", "description": "  Paginator instance to attach to"}], "description": "ui Component to display a menu for selecting the range of items to display."}], "namespace": "", "module": "gallery-paginator", "events": {"itemRangeDropdownClassChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "itemRangeDropdownClassChange", "description": "Fires when the value for the configuration attribute 'itemRangeDropdownClass' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "itemRangeDropdownTemplateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "itemRangeDropdownTemplateChange", "description": "Fires when the value for the configuration attribute 'itemRangeDropdownTemplate' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "ItemRangeDropdown", "methods": {"destroy": {"private": "", "description": "Removes the link/span node and clears event listeners.", "guessedname": "destroy", "guessedtype": "function"}, "update": {"params": [{"type": "CustomEvent", "name": "e", "description": "  The calling change event"}], "description": "Swap the link and span nodes if appropriate.", "guessedname": "update", "guessedtype": "function"}, "render": {"return": {"type": "HTMLElement", "description": ""}, "params": [{"type": "string", "name": "id_base", "description": "  used to create unique ids for generated nodes"}], "description": "Generate the nodes and return the appropriate node given the current\npagination state.", "guessedname": "render", "guessedtype": "function"}}, "file": "ItemRangeDropdown.js", "guessedtype": "function", "shortname": "Paginator.ui.ItemRangeDropdown", "configs": {"itemRangeDropdownTemplate": {"default": "'{currentRange} of {totalItems}'", "description": "Used as innerHTML for the span.", "guessedname": "itemRangeDropdownTemplate", "guessedtype": "property"}, "itemRangeDropdownClass": {"default": "'yui-paginator-ir-dropdown'", "description": "CSS class assigned to the span", "guessedname": "itemRangeDropdownClass", "guessedtype": "property"}}, "description": "ui Component to display a menu for selecting the range of items to display."}, "MathFunction.Product": {"name": "MathFunction.Product", "constructors": [{"description": "<p>Product of values.</p>"}], "namespace": "MathFunction", "module": "gallery-mathcanvas", "extends": "MathFunction.FunctionWithArgs", "superclass": "MathFunction.FunctionWithArgs", "file": "Product.js", "shortname": "Product", "description": "<p>Product of values.</p>"}, "TreebleDataSource": {"name": "TreebleDataSource", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Widget configuration"}], "description": "<p>Hierarchical data source.</p>\n<p>TreebleDataSource converts a tree of DataSources into a flat list of\nvisible items.  The merged list must be paginated if the number of child\nnodes might be very large.  To turn on this feature, set\npaginateChildren:true.</p>\n<p>The tree must be immutable.  The total number of items available from\neach DataSource must remain constant.</p>"}], "namespace": "", "module": "gallery-treeble", "methods": {"toggle": {"return": {"type": "boolean", "description": "false if the path to the node has not yet been fully explored or is not openable, true otherwise"}, "params": [{"type": "Array", "name": "path", "description": "  Path to the node"}, {"type": "Object} {sort,dir,startIndex,resultCount", "name": "request", "description": ""}, {"type": "Function|Object} Function to call when the operation completes.  Can be object: {fn,scope,args", "name": "completion", "description": ""}], "description": "Toggle the specified node between open and closed.  When a node is\nopened for the first time, this requires a request to the\nDataSource.  Any code that assumes the node has been opened must be\npassed in as a completion function.", "guessedname": "toggle", "guessedtype": "function"}, "treebledatasource": {"return": {"type": "DataSource", "description": "The new data source."}, "description": "<p>Converts data to a DataSource.  Data can be an object containing both\n<code>dataType</code> and <code>liveData</code>, or it can be <q>free\nform</q>, e.g., an array of records or an XHR URL.</p>", "static": "", "guessedname": "treebledatasource", "guessedtype": "function", "params": [{"type": "mixed", "name": "oData", "description": "  Data to convert."}]}, "isOpen": {"return": {"type": "boolean", "description": "true if the node is open"}, "params": [{"type": "Array", "name": "path", "description": "  Path to node"}], "guessedname": "isOpen", "guessedtype": "function"}}, "extends": "DataSource.Local", "superclass": "DataSource.Local", "file": "TreebleDataSource.js", "shortname": "TreebleDataSource", "configs": {"uniqueIdKey": {"type": "{String}", "description": "The key in each record that stores an identifier which is unique\nacross the entire tree.  If this is not specified, then all nodes\nwill close when the data is sorted.", "guessedname": "uniqueIdKey", "guessedtype": "property"}, "paginateChildren": {"description": "Pass <code>true</code> to paginate the result after merging child\nnodes into the list.  The default (<code>false</code>) is to\npaginate only root nodes, so all children are visible.", "writeonce": "", "default": "false", "guessedname": "paginateChildren", "guessedtype": "property", "type": "{boolean}"}, "root": {"guessedtype": "property", "type": "{DataSource}", "description": "<p>The root datasource.</p>\n<p>You <em>must</em> directly set a <code>treeble_config</code>\nobject on this datasource.  (You cannot use\n<code>set('treeble_config',...)</code>.) <code>treeble_config</code> can\ncontain the following configuration:</p>\n<dl>\n<dt>generateRequest</dt>\n<dd>(required) The function to convert the initial request into\na request usable by the actual DataSource.  This function takes\ntwo arguments: state (sort,dir,startIndex,resultCount) and path\n(an array of node indices telling how to reach the node).\n</dd>\n<dt>requestCfg</dt>\n<dd>(optional) Configuration object passed as <code>cfg</code> to\n<code>sendRequest</code>.</dd>\n<dt>schemaPluginConfig</dt>\n<dd>(required) Object to pass to <code>plug</code> to install a schema.</dd>\n<dt>cachePluginConfig</dt>\n<dd>(optional) Object to pass to <code>plug</code> to install a cache.</dd>\n<dt>childNodesKey</dt>\n<dd>(semi-optional) The name of the key inside a node which contains\nthe data used to construct the DataSource for retrieving the children.\nThis config is only required if you provide a custom parser.</dd>\n<dt>nodeOpenKey</dt>\n<dd>(optional) The name of the key inside a node which contains\nthe initial open state of the node.  If it is true, the node will\nautomatically be opened the first time it is shown.  (After that,\nit will remember the state set by the user.)</dd>\n<dt>startIndexExpr</dt>\n<dd>(optional) OGNL expression telling how to extract the startIndex\nfrom the received data, e.g., <code>.meta.startIndex</code>.\nIf it is not provided, startIndex is always assumed to be zero.</dd>\n<dt>totalRecordsExpr</dt>\n<dd>(semi-optional) OGNL expression telling how to extract the total number\nof records from the received data, e.g., <code>.meta.totalRecords</code>.\nIf this is not provided, <code>totalRecordsReturnExpr</code> must be\nspecified.</dd>\n<dt>totalRecordsReturnExpr</dt>\n<dd>(semi-optional) OGNL expression telling where in the response to store\nthe total number of records, e.g., <code>.meta.totalRecords</code>.\nThis is only appropriate for DataSources that always return the\nentire data set.  If this is not provided,\n<code>totalRecordsExpr</code> must be specified.  If both are provided,\n<code>totalRecordsExpr</code> takes priority.</dd>\n</dl>", "guessedname": "root", "writeonce": ""}}, "description": "<p>Hierarchical data source.</p>\n<p>TreebleDataSource converts a tree of DataSources into a flat list of\nvisible items.  The merged list must be paginated if the number of child\nnodes might be very large.  To turn on this feature, set\npaginateChildren:true.</p>\n<p>The tree must be immutable.  The total number of items available from\neach DataSource must remain constant.</p>"}, "MathFunction.Sum": {"name": "MathFunction.Sum", "constructors": [{"description": "<p>Sum of values.</p>"}], "namespace": "MathFunction", "module": "gallery-mathcanvas", "extends": "MathFunction.FunctionWithArgs", "superclass": "MathFunction.FunctionWithArgs", "file": "Sum.js", "shortname": "Sum", "description": "<p>Sum of values.</p>"}, "ComplexNumber": {"name": "ComplexNumber", "constructors": [{"params": [{"type": "number", "name": "real", "description": "  the real component (default: 0)"}, {"type": "number", "name": "imag", "description": "  the imaginary component (default: 0)"}], "description": "<p>Class for representing a complex number.</p>"}], "namespace": "", "module": "gallery-complexnumber", "methods": {"real": {"return": {"type": "number", "description": "real component"}, "guessedname": "real", "guessedtype": "function"}, "rotate": {"chainable": "", "params": [{"type": "number", "name": "angle", "description": ""}], "description": "Rotates the number around the origin by the specified angle in radians.", "guessedname": "rotate", "guessedtype": "function"}, "divide": {"chainable": "", "params": [{"type": "number", "name": "v", "description": ""}], "description": "Equivalent of /= operator.", "guessedname": "divide", "guessedtype": "function"}, "imag": {"return": {"type": "number", "description": "imaginary component"}, "guessedname": "imag", "guessedtype": "function"}, "fromPolar": {"return": {"type": "", "description": "ComplexNumber"}, "description": "Construct a ComplexNumber from polar coordinates.", "static": "", "guessedname": "fromPolar", "guessedtype": "function", "params": [{"type": "number", "name": "magnitude", "description": ""}, {"type": "number", "name": "phase", "description": ""}]}, "negate": {"chainable": "", "description": "Equivalent of unary minus operator.", "guessedname": "negate", "guessedtype": "function"}, "multiply": {"chainable": "", "params": [{"type": "number", "name": "v", "description": ""}], "description": "Equivalent of *= operator.", "guessedname": "multiply", "guessedtype": "function"}, "add": {"chainable": "", "params": [{"type": "number", "name": "v", "description": ""}], "description": "Equivalent of += operator.", "guessedname": "add", "guessedtype": "function"}, "magnitude": {"return": {"type": "number", "description": "length of the vector in the complex plane"}, "guessedname": "magnitude", "guessedtype": "function"}, "conjugate": {"chainable": "", "description": "Negates the imaginary part.", "guessedname": "conjugate", "guessedtype": "function"}, "phase": {"return": {"type": "number", "description": "angle of the vector (in radians) in the complex plane relative to the positive real axis"}, "guessedname": "phase", "guessedtype": "function"}, "subtract": {"chainable": "", "params": [{"type": "number", "name": "v", "description": ""}], "description": "Equivalent of -= operator.", "guessedname": "subtract", "guessedtype": "function"}}, "file": "ComplexNumber.js", "shortname": "ComplexNumber", "description": "<p>Class for representing a complex number.</p>"}, "QueryBuilder.Select": {"name": "QueryBuilder.Select", "namespace": "QueryBuilder", "module": "gallery-querybuilder", "guessedname": "Select", "file": "Select.js", "guessedtype": "function", "shortname": "Select", "description": "<p>Plugin for choosing from a list of values.  In the\n<code>var_list</code> configuration, specify <code>value_list</code> as\na list of objects, each defining <code>value</code> and\n<code>text</code>.</p>\n<p>There must be exactly one operator specified for this plugin.</p>"}, "MathFunction.Max": {"name": "MathFunction.Max", "constructors": [{"description": "<p>Maximum.</p>"}], "namespace": "MathFunction", "module": "gallery-mathcanvas", "extends": "MathFunction.FunctionWithArgs", "superclass": "MathFunction.FunctionWithArgs", "file": "Max.js", "shortname": "Max", "description": "<p>Maximum.</p>"}, "Paginator.ui.CurrentPageReport": {"properties": {"span": {"guessedname": "span", "type": "HTMLElement", "description": "Span node containing the formatted info", "private": "", "guessedtype": "property"}}, "name": "Paginator.ui.CurrentPageReport", "constructors": [{"params": [{"type": "Pagintor", "name": "p", "description": "  Paginator instance to attach to"}], "description": "ui Component to generate the textual report of current pagination status.\nE.g. \"Now viewing page 1 of 13\"."}], "namespace": "", "module": "gallery-paginator", "events": {"pageReportValueGenaratorChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "pageReportValueGenaratorChange", "description": "Fires when the value for the configuration attribute 'pageReportValueGenarator' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "pageReportClassChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "pageReportClassChange", "description": "Fires when the value for the configuration attribute 'pageReportClass' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "pageReportTemplateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "pageReportTemplateChange", "description": "Fires when the value for the configuration attribute 'pageReportTemplate' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "CurrentPageReport", "methods": {"destroy": {"private": "", "description": "Removes the link/span node and clears event listeners\nremoval.", "guessedname": "destroy", "guessedtype": "function"}, "sprintf": {"return": {"type": "string", "description": ""}, "description": "Replace place holders in a string with the named values found in an\nobject literal.", "static": "", "guessedname": "sprintf", "guessedtype": "function", "params": [{"type": "string", "name": "template", "description": "  The content string containing place holders"}, {"type": "object", "name": "values", "description": "  The key:value pairs used to replace the place holders"}]}, "render": {"return": {"type": "HTMLElement", "description": ""}, "params": [{"type": "string", "name": "id_base", "description": "  used to create unique ids for generated nodes"}], "description": "Generate the span containing info formatted per the pageReportTemplate\nattribute.", "guessedname": "render", "guessedtype": "function"}, "update": {"params": [{"type": "CustomEvent", "name": "e", "description": "  The calling change event"}], "description": "Regenerate the content of the span if appropriate. Calls\nCurrentPageReport.sprintf with the value of the pageReportTemplate\nattribute and the value map returned from pageReportValueGenerator\nfunction.", "guessedname": "update", "guessedtype": "function"}}, "file": "CurrentPageReport.js", "guessedtype": "function", "shortname": "Paginator.ui.CurrentPageReport", "configs": {"pageReportValueGenarator": {"description": "Function to generate the value map used to populate the\npageReportTemplate.  The function is passed the Paginator instance as a\nparameter.  The default function returns a map with the following keys:\n<ul>\n<li>currentPage</li>\n<li>totalPages</li>\n<li>startIndex</li>\n<li>endIndex</li>\n<li>startRecord</li>\n<li>endRecord</li>\n<li>totalRecords</li>\n</ul>", "guessedname": "pageReportValueGenerator", "guessedtype": "property"}, "pageReportClass": {"default": "'yui-paginator-current'", "description": "CSS class assigned to the span containing the info.", "guessedname": "pageReportClass", "guessedtype": "property"}, "pageReportTemplate": {"default": "'({currentPage} of {totalPages})'", "see": "pageReportValueGenerator attribute", "description": "Used as innerHTML for the span.  Place holders in the form of {name}\nwill be replaced with the so named value from the key:value map\ngenerated by the function held in the pageReportValueGenerator attribute.", "guessedname": "pageReportTemplate", "guessedtype": "property"}}, "description": "ui Component to generate the textual report of current pagination status.\nE.g. \"Now viewing page 1 of 13\"."}, "MathFunction.Min": {"name": "MathFunction.Min", "constructors": [{"description": "<p>Minimum.</p>"}], "namespace": "MathFunction", "module": "gallery-mathcanvas", "extends": "MathFunction.FunctionWithArgs", "superclass": "MathFunction.FunctionWithArgs", "file": "Min.js", "shortname": "Min", "description": "<p>Minimum.</p>"}, "Array": {"name": "Array", "namespace": "", "module": "gallery-algorithms", "methods": {"compareForFind": {"return": {"type": "Function", "description": "function that returns true if the arguments are equal"}, "description": "<p>Converts a -1,0,+1 comparator into a boolean comparator, for use by\nY.Array.find().</p>", "static": "", "guessedname": "compareForFind", "guessedtype": "function", "params": [{"type": "Function", "name": "f", "description": "  -1,0,+1 comparator function"}]}, "compareStringsCaseSensitive": {"return": {"type": "", "description": ""}, "description": "<p>A -1,0,+1 comparator for case-sensitive string comparison.</p>", "static": "", "guessedname": "compareStringsCaseSensitive", "guessedtype": "function", "params": [{"type": "String", "name": "s1", "description": "  first string"}, {"type": "String", "name": "s2", "description": "  second string"}]}, "quickSort": {"static": "", "params": [{"type": "Array", "name": "list", "description": "  the list to search (sorted on the compare function)"}, {"type": "Function", "name": "compare", "description": "  the comparison function (default: Y.Array.compareStringsCaseSensitive)"}], "description": "<p>Quick sort the given list.</p>", "guessedname": "quickSort", "guessedtype": "function"}, "binarySearch": {"return": {"type": "int", "description": "index of matched item or -1 if no match"}, "description": "<p>Binary search.</p>", "static": "", "guessedname": "binarySearch", "guessedtype": "function", "params": [{"type": "Array", "name": "list", "description": "  the list to search (sorted on the compare function)"}, {"type": "Mixed", "name": "target", "description": "  the object to search for"}, {"type": "Function", "name": "compare", "description": "  the comparison function (default: Y.Array.compareStringsCaseSensitive)"}]}, "compareStringsCaseInsensitive": {"return": {"type": "", "description": ""}, "description": "<p>A -1,0,+1 comparator for case-insensitive string comparison.</p>", "static": "", "guessedname": "compareStringsCaseInsensitive", "guessedtype": "function", "params": [{"type": "String", "name": "s1", "description": "  first string"}, {"type": "String", "name": "s2", "description": "  second string"}]}, "swap": {"static": "", "params": [{"type": "Array", "name": "list", "description": "  the list on which to operate"}, {"type": "int", "name": "i", "description": "  first index"}, {"type": "int", "name": "j", "description": "  second index"}], "description": "<p>Swaps two elements.</p>", "guessedname": "swap", "guessedtype": "function"}}, "file": "Array.js", "shortname": "Array", "description": "<p>Useful algorithms not provided by browsers.</p>"}, "Paginator.ui.PageLinks": {"properties": {"current": {"guessedname": "current", "type": "number", "description": "Current page", "private": "", "guessedtype": "property"}, "container": {"guessedname": "container", "type": "HTMLElement", "description": "Span node containing the page links", "private": "", "guessedtype": "property"}}, "name": "Paginator.ui.PageLinks", "constructors": [{"params": [{"type": "Pagintor", "name": "p", "description": "  Paginator instance to attach to"}], "description": "ui Component to generate the page links"}], "namespace": "", "module": "gallery-paginator", "events": {"pageLinkClassChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "pageLinkClassChange", "description": "Fires when the value for the configuration attribute 'pageLinkClass' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "currentPageClassChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "currentPageClassChange", "description": "Fires when the value for the configuration attribute 'currentPageClass' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "pageLinksContainerClassChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "pageLinksContainerClassChange", "description": "Fires when the value for the configuration attribute 'pageLinksContainerClass' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "pageLinksChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "pageLinksChange", "description": "Fires when the value for the configuration attribute 'pageLinks' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "pageLabelBuilderChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "pageLabelBuilderChange", "description": "Fires when the value for the configuration attribute 'pageLabelBuilder' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "PageLinks", "methods": {"render": {"return": {"type": "HTMLElement", "description": ""}, "params": [{"type": "string", "name": "id_base", "description": "  used to create unique ids for generated nodes"}], "description": "Generate the nodes and return the container node containing page links\nappropriate to the current pagination state.", "guessedname": "render", "guessedtype": "function"}, "rebuild": {"params": [{"type": "CustomEvent", "name": "e", "description": "  The calling change event"}], "description": "Force a rebuild of the page links.", "guessedname": "rebuild", "guessedtype": "function"}, "update": {"params": [{"type": "CustomEvent", "name": "e", "description": "  The calling change event"}], "description": "Update the links if appropriate", "guessedname": "update", "guessedtype": "function"}, "onClick": {"params": [{"type": "DOMEvent", "name": "e", "description": "  The click event"}], "description": "Listener for the container's onclick event.  Looks for qualifying link\nclicks, and pulls the page number from the link's page attribute.\nSends link's page attribute to the Paginator's setPage method.", "guessedname": "onClick", "guessedtype": "function"}, "destroy": {"private": "", "description": "Removes the page links container node and clears event listeners", "guessedname": "destroy", "guessedtype": "function"}, "calculateRange": {"return": {"type": "Array", "description": "[start_page_number, end_page_number]"}, "description": "Calculates start and end page numbers given a current page, attempting\nto keep the current page in the middle", "static": "", "guessedname": "calculateRange", "guessedtype": "function", "params": [{"type": "int", "name": "currentPage", "description": "  The current page"}, {"type": "int", "name": "totalPages", "description": "   (optional) Maximum number of pages"}, {"type": "int", "name": "numPages", "description": "     (optional) Preferred number of pages in range"}]}}, "file": "PageLinks.js", "guessedtype": "function", "shortname": "Paginator.ui.PageLinks", "configs": {"pageLinksContainerClass": {"default": "'yui-paginator-pages'", "description": "CSS class assigned to the span containing the page links.", "guessedname": "pageLinksContainerClass", "guessedtype": "property"}, "currentPageClass": {"default": "'yui-paginator-current-page'", "description": "CSS class assigned to the current page span.", "guessedname": "currentPageClass", "guessedtype": "property"}, "pageLabelBuilder": {"default": "function (page, paginator) { return page; }", "description": "Function used generate the innerHTML for each page link/span.  The\nfunction receives as parameters the page number and a reference to the\npaginator object.", "guessedname": "pageLabelBuilder", "guessedtype": "property"}, "pageLinks": {"default": "10", "description": "Maximum number of page links to display at one time.", "guessedname": "pageLinks", "guessedtype": "property"}, "pageLinkClass": {"default": "'yui-paginator-page'", "description": "CSS class assigned to each page link/span.", "guessedname": "pageLinkClass", "guessedtype": "property"}}, "description": "ui Component to generate the page links"}, "AtMostOneCheckboxGroup": {"name": "AtMostOneCheckboxGroup", "constructors": [{"params": [{"type": "String|Node|NodeList", "name": "cb_list", "description": "  The list of checkboxes to manage"}], "description": "At most one checkbox can be selected.  If one is turned on, the active\none is turned off."}], "namespace": "", "module": "gallery-checkboxgroups", "extends": "CheckboxGroup", "superclass": "CheckboxGroup", "file": "AtMostOneCheckboxGroup.js", "shortname": "AtMostOneCheckboxGroup", "description": "At most one checkbox can be selected.  If one is turned on, the active\none is turned off."}, "MathFunction.ImaginaryPart": {"name": "MathFunction.ImaginaryPart", "constructors": [{"params": [{"type": "MathFunction", "name": "f", "description": ""}], "description": "<p>Imaginary part of a complex number.</p>"}], "namespace": "MathFunction", "module": "gallery-mathcanvas", "extends": "MathFunction.FunctionWithArgs", "superclass": "MathFunction.FunctionWithArgs", "file": "ImaginaryPart.js", "shortname": "ImaginaryPart", "description": "<p>Imaginary part of a complex number.</p>"}, "Treeble": {"name": "Treeble", "namespace": "", "module": "gallery-treeble", "file": "Treeble.js", "shortname": "Treeble", "methods": {"treeValueFormatter": {"static": "", "description": "<p>Default formatter for indented column.</p>", "guessedname": "treeValueFormatter", "guessedtype": "function"}, "twistdownFormatter": {"static": "", "params": [{"type": "Function", "name": "sendRequest", "description": "  Function that reloads DataTable"}], "description": "<p>Formatter for open/close twistdown.</p>", "guessedname": "buildTwistdownFormatter", "guessedtype": "function"}}}}, "version": "1.0.0", "namespaces": ["Canvas", "Plugin", "MathFunction", "", "MathCanvas", "QueryBuilder", "Parsers"]}