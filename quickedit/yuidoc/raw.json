{"majorversion": 3, "filemap": {"Column.js": {"classlist": ["Column"], "name": "Column.js", "module": "gallery-quickedit"}, "QuickEdit.js": {"classlist": ["Plugin.DataTableQuickEdit"], "name": "QuickEdit.js", "module": "gallery-quickedit"}}, "modules": {"gallery-quickedit": {"description": "<p>The QuickEdit plugin provides a new mode for DataTable where all\nvalues in the table can be edited simultaneously, controlled by the\ncolumn configuration.  Each editable cell contains an input field.  If\nthe user decides to save the changes, then you can extract the changed\nvalues by calling <code><i>dt</i>.qe.getChanges()</code>.</p>\n<p>For a column to be editable in QuickEdit mode, the column\nconfiguration must include <code>quickEdit</code>.  The contents of\nthis object define the column's behavior in QuickEdit mode.</p>\n<p>To move up or down within a column while in QuickEdit mode, hold down\nthe Ctrl key and press the up or down arrow.</p>\n<p>If a column should not be editable, but needs to be formatted\ndifferently in QuickEdit mode, then you must define qeFormatter in\nthe column configuration. This is simply a normal cell formatter\nfunction that will be used in QuickEdit mode.  The static functions\n<code>readonly*Formatter</code> provide examples.</p>\n<p>The following configuration can be provided as part of\nquickEdit:</p>\n<dl>\n<dt>changed</dt><dd>Optional.  The function to call with the old and new\nvalue.  Should return true if the values are different.</dd>\n<dt>formatter</dt><dd>The cell formatter which will render an\nappropriate form field: &lt;input type=\"text\"&gt;, &lt;textarea&gt;,\nor &lt;select&gt;.</dd>\n<dt>validation</dt><dd>Validation configuration for every field in\nthe column.</dd>\n</dl>\n<p>The following configuration can be provided as part of\nquickEdit.validation:</p>\n<dl>\n<dt>css</dt><dd>CSS classes encoding basic validation rules:\n<dl>\n<dt><code>yiv-required</code></dt>\n<dd>Value must not be empty.</dd>\n<dt><code>yiv-length:[x,y]</code></dt>\n<dd>String must be at least x characters and at most y characters.\nAt least one of x and y must be specified.</dd>\n<dt><code>yiv-integer:[x,y]</code></dt>\n<dd>The integer value must be at least x and at most y.\nx and y are both optional.</dd>\n<dt><code>yiv-decimal:[x,y]</code></dt>\n<dd>The decimal value must be at least x and at most y.  Exponents are\nnot allowed.  x and y are both optional.</dd>\n</dl>\n</dd>\n<dt>fn</dt><dd>A function that will be called with the DataTable as its\nscope and the cell's form element as the argument. Return true if the\nvalue is valid. Otherwise, call this.qe.displayMessage(...) to display\nan error and return false.</dd>\n<dt>msg</dt><dd>A map of types to messages that will be displayed\nwhen a basic or regex validation rule fails. The valid types are:\nrequired, min_length, max_length, integer, decimal, and regex.\nThere is no default for type regex, so you must specify a message if\nyou configure a regex validation.</dd>\n<dt>regex</dt><dd>Regular expression that the value must satisfy in\norder to be considered valid.</dd>\n</dl>", "submodules": [], "classlist": ["Column", "Plugin.DataTableQuickEdit"], "filelist": ["Column.js", "QuickEdit.js"], "subdata": {}, "name": "gallery-quickedit"}}, "classmap": {"Column": {"name": "Column", "namespace": "", "module": "gallery-quickedit", "events": {"quickEditChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "quickEditChange", "description": "Fires when the value for the configuration attribute 'quickEdit' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "qeFormatterChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "qeFormatterChange", "description": "Fires when the value for the configuration attribute 'qeFormatter' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "file": "Column.js", "configs": {"quickEdit": {"type": "Object or boolean", "description": "Stores information for QuickEdit mode:  changed, copyDown, formatter, validation, fn, msg, regex.", "guessedname": "quickEdit", "guessedtype": "property"}, "qeFormatter": {"type": "Function", "description": "Formatter to be used during QuickEdit mode for read-only data.", "guessedname": "qeFormatter", "guessedtype": "property"}}, "shortname": "Column", "description": "Extensions to the Column class to support QuickEdit."}, "Plugin.DataTableQuickEdit": {"properties": {"Y.Plugin.QuickEdit.error_text_class": {"type": "{String}", "description": "The CSS class that marks the container for the error message inside a cell.", "guessedname": "error_text_class", "guessedtype": "property"}, "Y.Plugin.QuickEdit.error_display_markup": {"type": "{String}", "description": "The markup for the container for the error message inside a cell.", "guessedname": "error_display_markup", "guessedtype": "property"}}, "name": "Plugin.DataTableQuickEdit", "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal to set component configuration."}], "description": "<p>The QuickEdit plugin provides a new mode for DataTable where all\nvalues in the table can be edited simultaneously, controlled by the\ncolumn configuration.  Each editable cell contains an input field.  If\nthe user decides to save the changes, then you can extract the changed\nvalues by calling <code><i>dt</i>.qe.getChanges()</code>.</p>\n<p>For a column to be editable in QuickEdit mode, the column\nconfiguration must include <code>quickEdit</code>.  The contents of\nthis object define the column's behavior in QuickEdit mode.</p>\n<p>To move up or down within a column while in QuickEdit mode, hold down\nthe Ctrl key and press the up or down arrow.</p>\n<p>If a column should not be editable, but needs to be formatted\ndifferently in QuickEdit mode, then you must define qeFormatter in\nthe column configuration. This is simply a normal cell formatter\nfunction that will be used in QuickEdit mode.  The static functions\n<code>readonly*Formatter</code> provide examples.</p>\n<p>The following configuration can be provided as part of\nquickEdit:</p>\n<dl>\n<dt>changed</dt><dd>Optional.  The function to call with the old and new\nvalue.  Should return true if the values are different.</dd>\n<dt>formatter</dt><dd>The cell formatter which will render an\nappropriate form field: &lt;input type=\"text\"&gt;, &lt;textarea&gt;,\nor &lt;select&gt;.</dd>\n<dt>validation</dt><dd>Validation configuration for every field in\nthe column.</dd>\n</dl>\n<p>The following configuration can be provided as part of\nquickEdit.validation:</p>\n<dl>\n<dt>css</dt><dd>CSS classes encoding basic validation rules:\n<dl>\n<dt><code>yiv-required</code></dt>\n<dd>Value must not be empty.</dd>\n<dt><code>yiv-length:[x,y]</code></dt>\n<dd>String must be at least x characters and at most y characters.\nAt least one of x and y must be specified.</dd>\n<dt><code>yiv-integer:[x,y]</code></dt>\n<dd>The integer value must be at least x and at most y.\nx and y are both optional.</dd>\n<dt><code>yiv-decimal:[x,y]</code></dt>\n<dd>The decimal value must be at least x and at most y.  Exponents are\nnot allowed.  x and y are both optional.</dd>\n</dl>\n</dd>\n<dt>fn</dt><dd>A function that will be called with the DataTable as its\nscope and the cell's form element as the argument. Return true if the\nvalue is valid. Otherwise, call this.qe.displayMessage(...) to display\nan error and return false.</dd>\n<dt>msg</dt><dd>A map of types to messages that will be displayed\nwhen a basic or regex validation rule fails. The valid types are:\nrequired, min_length, max_length, integer, decimal, and regex.\nThere is no default for type regex, so you must specify a message if\nyou configure a regex validation.</dd>\n<dt>regex</dt><dd>Regular expression that the value must satisfy in\norder to be considered valid.</dd>\n</dl>"}], "namespace": "Plugin", "module": "gallery-quickedit", "events": {"changesAlwaysIncludeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "changesAlwaysIncludeChange", "description": "Fires when the value for the configuration attribute 'changesAlwaysInclude' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "methods": {"_getElementStatus": {"return": {"type": "String", "description": ""}, "description": "Return the status of the field.", "protected": "", "params": [{"type": "Node", "name": "e", "description": "  form field"}, {"type": "RegExp", "name": "r", "description": "  regex to match against className"}], "guessedname": "_getElementStatus", "guessedtype": "function"}, "displayMessage": {"params": [{"type": "Element", "name": "e", "description": "  form field"}, {"type": "String", "name": "msg", "description": "  message to display"}, {"type": "String", "name": "type", "description": "  message type: error, warn, success, info"}, {"type": "boolean", "name": "scroll", "description": "  If false, does not scroll, even if this is the first message to display."}], "description": "Display a message for a QuickEdit field.  If an existing message with\na higher precedence is already visible, it will not be replaced.", "guessedname": "displayMessage", "guessedtype": "function"}, "readonlyEmailFormatter": {"static": "", "description": "Called with exactly the same arguments as any other cell\nformatter, this function displays an email address without the\nanchor tag.  Use this as the column's qeFormatter if the column\nshould not be editable in QuickEdit mode.", "guessedname": "readonlyEmailFormatter", "guessedtype": "function"}, "textFormatter": {"static": "", "description": "Called with exactly the same arguments as any other cell\nformatter, this function displays an input field.", "guessedname": "textFormatter", "guessedtype": "function"}, "getChanges": {"return": {"type": "mixed", "description": "array of objects if all validations pass, false otherwise"}, "description": "Return the changed values.  For each row, an object is created with\nonly the changed values.  The object keys are the column keys.  If\nyou need values from particular columns to be included always, even\nif the value did not change, include the key \"changesAlwaysInclude\"\nin the plugin configuration and pass an array of column keys.", "guessedname": "getChanges", "guessedtype": "function"}, "_getColumnKey": {"return": {"type": "String", "description": ""}, "description": "Return the column key for the specified field.", "protected": "", "params": [{"type": "Node", "name": "e", "description": "  form field"}], "guessedname": "_getColumnKey", "guessedtype": "function"}, "clearMessages": {"description": "Clear all validation messages in QuickEdit mode.", "guessedname": "clearMessages", "guessedtype": "function"}, "start": {"description": "Switch to QuickEdit mode.  Columns that have quickEdit defined will\nbe editable.  If the table has paginators, you must hide them.", "guessedname": "start", "guessedtype": "function"}, "textareaFormatter": {"static": "", "description": "Called with exactly the same arguments as any other cell\nformatter, this function displays a textarea field.", "guessedname": "textareaFormatter", "guessedtype": "function"}, "cancel": {"description": "Stop QuickEdit mode.  THIS DISCARDS ALL DATA!  If you want to save\nthe data, call getChanges() BEFORE calling this function.  If the\ntable has paginators, you must show them.", "guessedname": "cancel", "guessedtype": "function"}, "validate": {"return": {"type": "boolean", "description": "true if all validation checks pass"}, "description": "Validate the QuickEdit data.", "guessedname": "validate", "guessedtype": "function"}, "readonlyLinkFormatter": {"static": "", "description": "Called with exactly the same arguments as any other cell\nformatter, this function displays a link without the anchor tag.\nUse this as the column's qeFormatter if the column should not be\neditable in QuickEdit mode.", "guessedname": "readonlyLinkFormatter", "guessedtype": "function"}}, "extends": "Plugin.Base", "superclass": "Plugin.Base", "file": "QuickEdit.js", "shortname": "DataTableQuickEdit", "configs": {"changesAlwaysInclude": {"type": "Array", "description": "Record keys to always include in result from getChanges().", "guessedname": "changesAlwaysInclude", "guessedtype": "property"}, "YAHOO.widget.QuickEditDataTable.status_order": {"type": "{Array}", "static": "", "description": "<p>Names of supported status values, highest precedence first.  Default:\n<code>[ 'error', 'warn', 'success', 'info' ]</code></p>\n<p>This is static because it links to CSS rules that define the\nappearance of each status type:  .formmgr-has{status}</p>", "guessedname": "status_order", "guessedtype": "property"}}, "description": "<p>The QuickEdit plugin provides a new mode for DataTable where all\nvalues in the table can be edited simultaneously, controlled by the\ncolumn configuration.  Each editable cell contains an input field.  If\nthe user decides to save the changes, then you can extract the changed\nvalues by calling <code><i>dt</i>.qe.getChanges()</code>.</p>\n<p>For a column to be editable in QuickEdit mode, the column\nconfiguration must include <code>quickEdit</code>.  The contents of\nthis object define the column's behavior in QuickEdit mode.</p>\n<p>To move up or down within a column while in QuickEdit mode, hold down\nthe Ctrl key and press the up or down arrow.</p>\n<p>If a column should not be editable, but needs to be formatted\ndifferently in QuickEdit mode, then you must define qeFormatter in\nthe column configuration. This is simply a normal cell formatter\nfunction that will be used in QuickEdit mode.  The static functions\n<code>readonly*Formatter</code> provide examples.</p>\n<p>The following configuration can be provided as part of\nquickEdit:</p>\n<dl>\n<dt>changed</dt><dd>Optional.  The function to call with the old and new\nvalue.  Should return true if the values are different.</dd>\n<dt>formatter</dt><dd>The cell formatter which will render an\nappropriate form field: &lt;input type=\"text\"&gt;, &lt;textarea&gt;,\nor &lt;select&gt;.</dd>\n<dt>validation</dt><dd>Validation configuration for every field in\nthe column.</dd>\n</dl>\n<p>The following configuration can be provided as part of\nquickEdit.validation:</p>\n<dl>\n<dt>css</dt><dd>CSS classes encoding basic validation rules:\n<dl>\n<dt><code>yiv-required</code></dt>\n<dd>Value must not be empty.</dd>\n<dt><code>yiv-length:[x,y]</code></dt>\n<dd>String must be at least x characters and at most y characters.\nAt least one of x and y must be specified.</dd>\n<dt><code>yiv-integer:[x,y]</code></dt>\n<dd>The integer value must be at least x and at most y.\nx and y are both optional.</dd>\n<dt><code>yiv-decimal:[x,y]</code></dt>\n<dd>The decimal value must be at least x and at most y.  Exponents are\nnot allowed.  x and y are both optional.</dd>\n</dl>\n</dd>\n<dt>fn</dt><dd>A function that will be called with the DataTable as its\nscope and the cell's form element as the argument. Return true if the\nvalue is valid. Otherwise, call this.qe.displayMessage(...) to display\nan error and return false.</dd>\n<dt>msg</dt><dd>A map of types to messages that will be displayed\nwhen a basic or regex validation rule fails. The valid types are:\nrequired, min_length, max_length, integer, decimal, and regex.\nThere is no default for type regex, so you must specify a message if\nyou configure a regex validation.</dd>\n<dt>regex</dt><dd>Regular expression that the value must satisfy in\norder to be considered valid.</dd>\n</dl>"}}, "version": "1.0.0", "namespaces": ["Plugin"]}