{"majorversion": 3, "classmap": {"Paginator.ui.FirstPageLink": {"properties": {"current": {"guessedname": "current", "type": "HTMLElement", "description": "The currently placed HTMLElement node", "private": "", "guessedtype": "property"}, "span": {"guessedname": "span", "type": "HTMLElement", "description": "Span node (inactive link)", "private": "", "guessedtype": "property"}, "link": {"guessedname": "link", "type": "HTMLElement", "description": "Link node", "private": "", "guessedtype": "property"}}, "name": "Paginator.ui.FirstPageLink", "constructors": [{"params": [{"type": "Pagintor", "name": "p", "description": "  Paginator instance to attach to"}], "description": "ui Component to generate the link to jump to the first page."}], "namespace": "", "module": "gallery-paginator", "events": {"firstPageLinkLabelChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "firstPageLinkLabelChange", "description": "Fires when the value for the configuration attribute 'firstPageLinkLabel' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "firstPageLinkClassChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "firstPageLinkClassChange", "description": "Fires when the value for the configuration attribute 'firstPageLinkClass' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "FirstPageLink", "methods": {"onClick": {"params": [{"type": "DOMEvent", "name": "e", "description": "  The click event"}], "description": "Listener for the link's onclick event.  Pass new value to setPage method.", "guessedname": "onClick", "guessedtype": "function"}, "destroy": {"private": "", "description": "Removes the link/span node and clears event listeners.", "guessedname": "destroy", "guessedtype": "function"}, "rebuild": {"params": [{"type": "CustomEvent", "name": "e", "description": "  The calling change event"}], "description": "Rebuild the markup.", "guessedname": "rebuild", "guessedtype": "function"}, "update": {"params": [{"type": "CustomEvent", "name": "e", "description": "  The calling change event"}], "description": "Swap the link and span nodes if appropriate.", "guessedname": "update", "guessedtype": "function"}, "render": {"return": {"type": "HTMLElement", "description": ""}, "params": [{"type": "string", "name": "id_base", "description": "  used to create unique ids for generated nodes"}], "description": "Generate the nodes and return the appropriate node given the current\npagination state.", "guessedname": "render", "guessedtype": "function"}}, "file": "FirstPageLink.js", "guessedtype": "function", "shortname": "Paginator.ui.FirstPageLink", "configs": {"firstPageLinkLabel": {"default": "'&lt;&lt; first'", "description": "Used as innerHTML for the first page link/span.", "guessedname": "firstPageLinkLabel", "guessedtype": "property"}, "firstPageLinkClass": {"default": "'yui-paginator-first'", "description": "CSS class assigned to the link/span", "guessedname": "firstPageLinkClass", "guessedtype": "property"}}, "description": "ui Component to generate the link to jump to the first page."}, "Paginator.ui.NextPageLink": {"properties": {"current": {"guessedname": "current", "type": "HTMLElement", "description": "Currently placed HTMLElement node", "private": "", "guessedtype": "property"}, "span": {"guessedname": "span", "type": "HTMLElement", "description": "Span node (inactive link)", "private": "", "guessedtype": "property"}, "link": {"guessedname": "link", "type": "HTMLElement", "description": "Link node", "private": "", "guessedtype": "property"}}, "name": "Paginator.ui.NextPageLink", "constructors": [{"params": [{"type": "Pagintor", "name": "p", "description": "  Paginator instance to attach to"}], "description": "ui Component to generate the link to jump to the next page."}], "namespace": "", "module": "gallery-paginator", "events": {"nextPageLinkClassChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nextPageLinkClassChange", "description": "Fires when the value for the configuration attribute 'nextPageLinkClass' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "nextPageLinkLabelChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "nextPageLinkLabelChange", "description": "Fires when the value for the configuration attribute 'nextPageLinkLabel' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "NextPageLink", "methods": {"onClick": {"params": [{"type": "DOMEvent", "name": "e", "description": "  The click event"}], "description": "Listener for the link's onclick event.  Passes to setPage method.", "guessedname": "onClick", "guessedtype": "function"}, "destroy": {"private": "", "description": "Removes the link/span node and clears event listeners", "guessedname": "destroy", "guessedtype": "function"}, "rebuild": {"params": [{"type": "CustomEvent", "name": "e", "description": "  The calling change event"}], "description": "Rebuild the markup.", "guessedname": "rebuild", "guessedtype": "function"}, "update": {"params": [{"type": "CustomEvent", "name": "e", "description": "  The calling change event"}], "description": "Swap the link and span nodes if appropriate.", "guessedname": "update", "guessedtype": "function"}, "render": {"return": {"type": "HTMLElement", "description": ""}, "params": [{"type": "string", "name": "id_base", "description": "  used to create unique ids for generated nodes"}], "description": "Generate the nodes and return the appropriate node given the current\npagination state.", "guessedname": "render", "guessedtype": "function"}}, "file": "NextPageLink.js", "guessedtype": "function", "shortname": "Paginator.ui.NextPageLink", "configs": {"nextPageLinkLabel": {"default": "'next &gt;'", "description": "Used as innerHTML for the next page link/span.", "guessedname": "nextPageLinkLabel", "guessedtype": "property"}, "nextPageLinkClass": {"default": "'yui-paginator-next'", "description": "CSS class assigned to the link/span", "guessedname": "nextPageLinkClass", "guessedtype": "property"}}, "description": "ui Component to generate the link to jump to the next page."}, "Paginator.ui.LastPageLink": {"properties": {"current": {"guessedname": "current", "type": "HTMLElement", "description": "Currently placed HTMLElement node", "private": "", "guessedtype": "property"}, "span": {"guessedname": "span", "type": "HTMLElement", "description": "Span node (inactive link)", "private": "", "guessedtype": "property"}, "link": {"guessedname": "link", "type": "HTMLElement", "description": "Link HTMLElement node", "private": "", "guessedtype": "property"}, "na": {"guessedname": "na", "type": "HTMLElement", "description": "Empty place holder node for when the last page link is inappropriate to\ndisplay in any form (unlimited paging).", "private": "", "guessedtype": "property"}}, "name": "Paginator.ui.LastPageLink", "constructors": [{"params": [{"type": "Pagintor", "name": "p", "description": "  Paginator instance to attach to"}], "description": "ui Component to generate the link to jump to the last page."}], "namespace": "", "module": "gallery-paginator", "events": {"lastPageLinkClassChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "lastPageLinkClassChange", "description": "Fires when the value for the configuration attribute 'lastPageLinkClass' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "lastPageLinkLabelChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "lastPageLinkLabelChange", "description": "Fires when the value for the configuration attribute 'lastPageLinkLabel' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "LastPageLink", "methods": {"onClick": {"params": [{"type": "DOMEvent", "name": "e", "description": "  The click event"}], "description": "Listener for the link's onclick event.  Passes to setPage method.", "guessedname": "onClick", "guessedtype": "function"}, "destroy": {"private": "", "description": "Removes the link/span node and clears event listeners", "guessedname": "destroy", "guessedtype": "function"}, "rebuild": {"params": [{"type": "CustomEvent", "name": "e", "description": "  The calling change event (ignored)"}], "description": "Rebuild the markup.", "guessedname": "rebuild", "guessedtype": "function"}, "update": {"params": [{"type": "CustomEvent", "name": "e", "description": "  The calling change event (ignored)"}], "description": "Swap the link, span, and na nodes if appropriate.", "guessedname": "update", "guessedtype": "function"}, "render": {"return": {"type": "HTMLElement", "description": ""}, "params": [{"type": "string", "name": "id_base", "description": "  used to create unique ids for generated nodes"}], "description": "Generate the nodes and return the appropriate node given the current\npagination state.", "guessedname": "render", "guessedtype": "function"}}, "file": "LastPageLink.js", "guessedtype": "function", "shortname": "Paginator.ui.LastPageLink", "configs": {"lastPageLinkClass": {"default": "'yui-paginator-last'", "description": "CSS class assigned to the link/span", "guessedname": "lastPageLinkClass", "guessedtype": "property"}, "lastPageLinkLabel": {"default": "'last &gt;&gt;'", "description": "Used as innerHTML for the last page link/span.", "guessedname": "lastPageLinkLabel", "guessedtype": "property"}}, "description": "ui Component to generate the link to jump to the last page."}, "Paginator.ui.CurrentPageInput": {"name": "Paginator.ui.CurrentPageInput", "constructors": [{"params": [{"type": "Pagintor", "name": "p", "description": "  Paginator instance to attach to"}], "description": "Generates an input field for setting the current page."}], "namespace": "", "module": "gallery-paginator", "events": {"pageInputClassChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "pageInputClassChange", "description": "Fires when the value for the configuration attribute 'pageInputClass' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "pageInputTemplateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "pageInputTemplateChange", "description": "Fires when the value for the configuration attribute 'pageInputTemplate' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "CurrentPageInput", "methods": {"destroy": {"private": "", "description": "Removes the span node and clears event listeners.", "guessedname": "destroy", "guessedtype": "function"}, "update": {"params": [{"type": "CustomEvent", "name": "e", "description": "  The calling change event"}], "description": "Swap the link and span nodes if appropriate.", "guessedname": "update", "guessedtype": "function"}, "render": {"return": {"type": "HTMLElement", "description": ""}, "params": [{"type": "string", "name": "id_base", "description": "  used to create unique ids for generated nodes"}], "description": "Generate the nodes and return the appropriate node given the current\npagination state.", "guessedname": "render", "guessedtype": "function"}}, "file": "CurrentPageInput.js", "guessedtype": "function", "shortname": "Paginator.ui.CurrentPageInput", "configs": {"pageInputTemplate": {"default": "'{currentPage} of {totalPages}'", "description": "Used as innerHTML for the span.", "guessedname": "pageInputTemplate", "guessedtype": "property"}, "pageInputClass": {"default": "'yui-paginator-page-input'", "description": "CSS class assigned to the span", "guessedname": "pageInputClass", "guessedtype": "property"}}, "description": "Generates an input field for setting the current page."}, "Paginator.ui.PreviousPageLink": {"properties": {"current": {"guessedname": "current", "type": "HTMLElement", "description": "Currently placed HTMLElement node", "private": "", "guessedtype": "property"}, "span": {"guessedname": "span", "type": "HTMLElement", "description": "Span node (inactive link)", "private": "", "guessedtype": "property"}, "link": {"guessedname": "link", "type": "HTMLElement", "description": "Link node", "private": "", "guessedtype": "property"}}, "name": "Paginator.ui.PreviousPageLink", "constructors": [{"params": [{"type": "Pagintor", "name": "p", "description": "  Paginator instance to attach to"}], "description": "ui Component to generate the link to jump to the previous page."}], "namespace": "", "module": "gallery-paginator", "events": {"previousPageLinkClassChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "previousPageLinkClassChange", "description": "Fires when the value for the configuration attribute 'previousPageLinkClass' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "previousPageLinkLabelChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "previousPageLinkLabelChange", "description": "Fires when the value for the configuration attribute 'previousPageLinkLabel' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "PreviousPageLink", "methods": {"onClick": {"params": [{"type": "DOMEvent", "name": "e", "description": "  The click event"}], "description": "Listener for the link's onclick event.  Passes to setPage method.", "guessedname": "onClick", "guessedtype": "function"}, "destroy": {"private": "", "description": "Removes the link/span node and clears event listeners", "guessedname": "destroy", "guessedtype": "function"}, "update": {"params": [{"type": "CustomEvent", "name": "e", "description": "  The calling change event"}], "description": "Swap the link and span nodes if appropriate.", "guessedname": "update", "guessedtype": "function"}, "render": {"return": {"type": "HTMLElement", "description": ""}, "params": [{"type": "string", "name": "id_base", "description": "  used to create unique ids for generated nodes"}], "description": "Generate the nodes and return the appropriate node given the current\npagination state.", "guessedname": "render", "guessedtype": "function"}}, "file": "PreviousPageLink.js", "guessedtype": "function", "shortname": "Paginator.ui.PreviousPageLink", "configs": {"previousPageLinkLabel": {"default": "'&lt; prev'", "description": "Used as innerHTML for the previous page link/span.", "guessedname": "previousPageLinkLabel", "guessedtype": "property"}, "previousPageLinkClass": {"default": "'yui-paginator-previous'", "description": "CSS class assigned to the link/span", "guessedname": "previousPageLinkClass", "guessedtype": "property"}}, "description": "ui Component to generate the link to jump to the previous page."}, "Paginator.ui.ItemRangeDropdown": {"name": "Paginator.ui.ItemRangeDropdown", "constructors": [{"params": [{"type": "Pagintor", "name": "p", "description": "  Paginator instance to attach to"}], "description": "ui Component to display a menu for selecting the range of items to display."}], "namespace": "", "module": "gallery-paginator", "events": {"itemRangeDropdownClassChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "itemRangeDropdownClassChange", "description": "Fires when the value for the configuration attribute 'itemRangeDropdownClass' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "itemRangeDropdownTemplateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "itemRangeDropdownTemplateChange", "description": "Fires when the value for the configuration attribute 'itemRangeDropdownTemplate' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "ItemRangeDropdown", "methods": {"destroy": {"private": "", "description": "Removes the link/span node and clears event listeners.", "guessedname": "destroy", "guessedtype": "function"}, "update": {"params": [{"type": "CustomEvent", "name": "e", "description": "  The calling change event"}], "description": "Swap the link and span nodes if appropriate.", "guessedname": "update", "guessedtype": "function"}, "render": {"return": {"type": "HTMLElement", "description": ""}, "params": [{"type": "string", "name": "id_base", "description": "  used to create unique ids for generated nodes"}], "description": "Generate the nodes and return the appropriate node given the current\npagination state.", "guessedname": "render", "guessedtype": "function"}}, "file": "ItemRangeDropdown.js", "guessedtype": "function", "shortname": "Paginator.ui.ItemRangeDropdown", "configs": {"itemRangeDropdownTemplate": {"default": "'{currentRange} of {totalItems}'", "description": "Used as innerHTML for the span.", "guessedname": "itemRangeDropdownTemplate", "guessedtype": "property"}, "itemRangeDropdownClass": {"default": "'yui-paginator-ir-dropdown'", "description": "CSS class assigned to the span", "guessedname": "itemRangeDropdownClass", "guessedtype": "property"}}, "description": "ui Component to display a menu for selecting the range of items to display."}, "Paginator.ui.RowsPerPageDropdown": {"properties": {"all": {"protected": "", "type": "HTMLElement", "description": "option node for the optional All value", "guessedname": "all", "guessedtype": "property"}, "select": {"guessedname": "select", "type": "HTMLElement", "description": "select node", "private": "", "guessedtype": "property"}}, "name": "Paginator.ui.RowsPerPageDropdown", "constructors": [{"params": [{"type": "Pagintor", "name": "p", "description": "  Paginator instance to attach to"}], "description": "ui Component to generate the rows-per-page dropdown"}], "namespace": "", "module": "gallery-paginator", "events": {"rowsPerPageDropdownClassChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "rowsPerPageDropdownClassChange", "description": "Fires when the value for the configuration attribute 'rowsPerPageDropdownClass' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "rowsPerPageOptionsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "rowsPerPageOptionsChange", "description": "Fires when the value for the configuration attribute 'rowsPerPageOptions' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "rowsPerPageDropdownTitleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "rowsPerPageDropdownTitleChange", "description": "Fires when the value for the configuration attribute 'rowsPerPageDropdownTitle' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "RowsPerPageDropdown", "methods": {"render": {"return": {"type": "HTMLElement", "description": ""}, "params": [{"type": "string", "name": "id_base", "description": "  used to create unique ids for generated nodes"}], "description": "Generate the select and option nodes and returns the select node.", "guessedname": "render", "guessedtype": "function"}, "rebuild": {"description": "(Re)generate the select options.", "guessedname": "rebuild", "guessedtype": "function"}, "update": {"params": [{"type": "CustomEvent", "name": "e", "description": "  The calling change event"}], "description": "Select the appropriate option if changed.", "guessedname": "update", "guessedtype": "function"}, "destroy": {"private": "", "description": "Removes the select node and clears event listeners", "guessedname": "destroy", "guessedtype": "function"}, "onChange": {"params": [{"type": "DOMEvent", "name": "e", "description": "  The change event"}], "description": "Listener for the select's onchange event.  Sent to setRowsPerPage method.", "guessedname": "onChange", "guessedtype": "function"}, "_handleTotalRecordsChange": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  attribute change event"}], "description": "Updates the all option value (and Paginator's rowsPerPage attribute if\nnecessary) in response to a change in the Paginator's totalRecords.", "guessedname": "_handleTotalRecordsChange", "guessedtype": "function"}}, "file": "RowsPerPageDropdown.js", "guessedtype": "function", "shortname": "Paginator.ui.RowsPerPageDropdown", "configs": {"rowsPerPageDropdownTitle": {"default": "'Rows per page'", "description": "CSS class assigned to the select node", "guessedname": "rowsPerPageDropdownTitle", "guessedtype": "property"}, "rowsPerPageDropdownClass": {"default": "'yui-paginator-rpp-options'", "description": "CSS class assigned to the select node", "guessedname": "rowsPerPageDropdownClass", "guessedtype": "property"}, "rowsPerPageOptions": {"default": "[]", "description": "Array of available rows-per-page sizes.  Converted into select options.\nArray values may be positive integers or object literals in the form<br>\n{ value : NUMBER, text : STRING }", "guessedname": "rowsPerPageOptions", "guessedtype": "property"}}, "description": "ui Component to generate the rows-per-page dropdown"}, "Paginator.ui.ValidationPageLinks": {"name": "Paginator.ui.ValidationPageLinks", "constructors": [{"params": [{"type": "Pagintor", "name": "p", "description": "  Paginator instance to attach to"}], "description": "Adds per-page error notification to Paginator.ui.PageLinks."}], "namespace": "", "module": "gallery-paginator", "events": {"pageStatusChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "pageStatusChange", "description": "Fires when the value for the configuration attribute 'pageStatus' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "ValidationPageLinks", "file": "ValidationPageLinks.js", "guessedtype": "function", "shortname": "Paginator.ui.ValidationPageLinks", "configs": {"pageStatus": {"description": "Array of status strings for each page.  If the status value for a page\nis not empty, it is used to build a CSS class for the page:\nyui3-has&lt;status&gt;", "guessedname": "pageStatus", "guessedtype": "property"}}, "description": "Adds per-page error notification to Paginator.ui.PageLinks."}, "Paginator.ui.CurrentPageReport": {"properties": {"span": {"guessedname": "span", "type": "HTMLElement", "description": "Span node containing the formatted info", "private": "", "guessedtype": "property"}}, "name": "Paginator.ui.CurrentPageReport", "constructors": [{"params": [{"type": "Pagintor", "name": "p", "description": "  Paginator instance to attach to"}], "description": "ui Component to generate the textual report of current pagination status.\nE.g. \"Now viewing page 1 of 13\"."}], "namespace": "", "module": "gallery-paginator", "events": {"pageReportValueGenaratorChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "pageReportValueGenaratorChange", "description": "Fires when the value for the configuration attribute 'pageReportValueGenarator' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "pageReportClassChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "pageReportClassChange", "description": "Fires when the value for the configuration attribute 'pageReportClass' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "pageReportTemplateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "pageReportTemplateChange", "description": "Fires when the value for the configuration attribute 'pageReportTemplate' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "CurrentPageReport", "methods": {"destroy": {"private": "", "description": "Removes the link/span node and clears event listeners\nremoval.", "guessedname": "destroy", "guessedtype": "function"}, "sprintf": {"return": {"type": "string", "description": ""}, "description": "Replace place holders in a string with the named values found in an\nobject literal.", "static": "", "guessedname": "sprintf", "guessedtype": "function", "params": [{"type": "string", "name": "template", "description": "  The content string containing place holders"}, {"type": "object", "name": "values", "description": "  The key:value pairs used to replace the place holders"}]}, "render": {"return": {"type": "HTMLElement", "description": ""}, "params": [{"type": "string", "name": "id_base", "description": "  used to create unique ids for generated nodes"}], "description": "Generate the span containing info formatted per the pageReportTemplate\nattribute.", "guessedname": "render", "guessedtype": "function"}, "update": {"params": [{"type": "CustomEvent", "name": "e", "description": "  The calling change event"}], "description": "Regenerate the content of the span if appropriate. Calls\nCurrentPageReport.sprintf with the value of the pageReportTemplate\nattribute and the value map returned from pageReportValueGenerator\nfunction.", "guessedname": "update", "guessedtype": "function"}}, "file": "CurrentPageReport.js", "guessedtype": "function", "shortname": "Paginator.ui.CurrentPageReport", "configs": {"pageReportValueGenarator": {"description": "Function to generate the value map used to populate the\npageReportTemplate.  The function is passed the Paginator instance as a\nparameter.  The default function returns a map with the following keys:\n<ul>\n<li>currentPage</li>\n<li>totalPages</li>\n<li>startIndex</li>\n<li>endIndex</li>\n<li>startRecord</li>\n<li>endRecord</li>\n<li>totalRecords</li>\n</ul>", "guessedname": "pageReportValueGenerator", "guessedtype": "property"}, "pageReportClass": {"default": "'yui-paginator-current'", "description": "CSS class assigned to the span containing the info.", "guessedname": "pageReportClass", "guessedtype": "property"}, "pageReportTemplate": {"default": "'({currentPage} of {totalPages})'", "see": "pageReportValueGenerator attribute", "description": "Used as innerHTML for the span.  Place holders in the form of {name}\nwill be replaced with the so named value from the key:value map\ngenerated by the function held in the pageReportValueGenerator attribute.", "guessedname": "pageReportTemplate", "guessedtype": "property"}}, "description": "ui Component to generate the textual report of current pagination status.\nE.g. \"Now viewing page 1 of 13\"."}, "Paginator": {"name": "Paginator", "configs": {"rowsPerPage": {"type": "integer", "description": "REQUIRED. Number of records constituting a &quot;page&quot;", "guessedname": "rowsPerPage", "guessedtype": "property"}, "totalRecords": {"default": "0", "type": "integer", "description": "Total number of records to paginate through", "guessedname": "totalRecords", "guessedtype": "property"}, "recordOffset": {"default": "0", "type": "integer", "description": "Zero based index of the record considered first on the current page.\nFor page based interactions, don't modify this attribute directly;\nuse setPage(n).", "guessedname": "recordOffset", "guessedtype": "property"}, "initialPage": {"default": "1", "type": "integer", "description": "Page to display on initial paint", "guessedname": "initialPage", "guessedtype": "property"}, "template": {"see": "Paginator.TEMPLATE_DEFAULT", "type": "string", "description": "Template used to render controls.  The string will be used as\ninnerHTML on all specified container nodes.  Bracketed keys\n(e.g. {pageLinks}) in the string will be replaced with an instance\nof the so named ui component.", "guessedname": "template", "guessedtype": "property"}, "id": {"final": "", "type": "integer", "description": "Unique id assigned to this instance", "guessedname": "id", "guessedtype": "property"}, "alwaysVisible": {"default": "true", "type": "boolean", "description": "Display pagination controls even when there is only one page.  Set\nto false to forgo rendering and/or hide the containers when there\nis only one page of data.  Note if you are using the rowsPerPage\ndropdown ui component, visibility will be maintained as long as the\nnumber of records exceeds the smallest page size.", "guessedname": "alwaysVisible", "guessedtype": "property"}}, "constructors": [{"params": [{"type": "Object", "name": "config", "description": "  Object literal to set instance and ui component\nconfiguration."}], "description": "The Paginator widget provides a set of controls to navigate through paged\ndata.\nTo instantiate a Paginator, pass a configuration object to the contructor.\nThe configuration object should contain the following properties:\n<ul>\n<li>rowsPerPage : <em>n</em> (int)</li>\n<li>totalRecords : <em>n</em> (int or Paginator.VALUE_UNLIMITED)</li>\n</ul>"}], "namespace": "", "module": "gallery-paginator", "events": {"templateChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "templateChange", "description": "Fires when the value for the configuration attribute 'template' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "rowsPerPageChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "rowsPerPageChange", "description": "Fires when the value for the configuration attribute 'rowsPerPage' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "totalRecordsChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "totalRecordsChange", "description": "Fires when the value for the configuration attribute 'totalRecords' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "alwaysVisibleChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "alwaysVisibleChange", "description": "Fires when the value for the configuration attribute 'alwaysVisible' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "initialPageChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "initialPageChange", "description": "Fires when the value for the configuration attribute 'initialPage' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "recordOffsetChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "recordOffsetChange", "description": "Fires when the value for the configuration attribute 'recordOffset' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "pageChange": {"description": "Event fired when attribute changes have resulted in the calculated\ncurrent page changing."}, "changeRequest": {"description": "Event fired when a change in pagination values is requested,\neither by interacting with the various ui components or via the\nsetStartIndex(n) etc APIs.\nSubscribers will receive the proposed state as the first parameter.\nThe proposed state object will contain the following keys:\n<ul>\n<li>paginator - the Paginator instance</li>\n<li>page</li>\n<li>totalRecords</li>\n<li>recordOffset - index of the first record on the new page</li>\n<li>rowsPerPage</li>\n<li>records - array containing [start index, end index] for the records on the new page</li>\n<li>before - object literal with all these keys for the current state</li>\n</ul>"}, "idChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "idChange", "description": "Fires when the value for the configuration attribute 'id' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "methods": {"getRowsPerPage": {"return": {"type": "number", "description": "the current setting of the rowsPerPage attribute"}, "description": "Get the number of rows per page.", "guessedname": "getRowsPerPage", "guessedtype": "function"}, "getTotalRecords": {"return": {"type": "number", "description": "the current setting of totalRecords attribute"}, "description": "Get the total number of records.", "guessedname": "getTotalRecords", "guessedtype": "function"}, "getPreviousPage": {"return": {"type": "number", "description": ""}, "description": "Get the page number of the previous page, or null if the current page\nis the first page.", "guessedname": "getPreviousPage", "guessedtype": "function"}, "getTotalPages": {"return": {"type": "number", "description": ""}, "description": "Get the total number of pages in the data set according to the current\nrowsPerPage and totalRecords values.  If totalRecords is not set, or\nset to Y.Paginator.VALUE_UNLIMITED, returns Y.Paginator.VALUE_UNLIMITED.", "guessedname": "getTotalPages", "guessedtype": "function"}, "setState": {"params": [{"type": "Object", "name": "state", "description": "  Object literal of attribute:value pairs to set"}], "description": "Convenience method to facilitate setting state attributes rowsPerPage,\ntotalRecords, recordOffset in batch.  Also supports calculating\nrecordOffset from state.page if state.recordOffset is not provided.\nFires only a single pageChange event, if appropriate.\nThis will not fire a changeRequest event.", "guessedname": "setState", "guessedtype": "function"}, "updateVisibility": {"description": "Hides the widget if there is only one page of data and attribute\nalwaysVisible is false.  Conversely, it displays the widget if either\nthere is more than one page worth of data or alwaysVisible is turned on.", "guessedname": "updateVisibility", "guessedtype": "function"}, "_selfSubscribe": {"protected": "", "description": "Subscribes to instance attribute change events to automate certain\nbehaviors.", "guessedname": "_selfSubscribe", "guessedtype": "function"}, "_firePageChange": {"protected": "", "params": [{"type": "Object", "name": "state", "description": "  the result of getState(oldState)"}], "description": "Fires a pageChange event in the form of a standard attribute change\nevent with additional properties prevState and newState.", "guessedname": "_firePageChange", "guessedtype": "function"}, "setStartIndex": {"params": [{"type": "number", "name": "offset", "description": "  the new record offset"}, {"type": "boolean", "name": "silent", "description": "  whether to forcibly avoid firing the changeRequest event"}], "description": "Move the record offset to a new starting index.  This will likely cause\nthe calculated current page to change.  You should probably use setPage.", "guessedname": "setStartIndex", "guessedtype": "function"}, "getState": {"return": {"type": "object", "description": ""}, "params": [{"type": "object", "name": "changes", "description": "  OPTIONAL object literal with proposed values\nSupported change keys include:\n<ul>\n<li>rowsPerPage</li>\n<li>totalRecords</li>\n<li>recordOffset OR</li>\n<li>page</li>\n</ul>"}], "description": "Get an object literal describing the current state of the paginator.  If\nan object literal of proposed values is passed, the proposed state will\nbe returned as an object literal with the following keys:\n<ul>\n<li>paginator - instance of the Paginator</li>\n<li>page - number</li>\n<li>totalRecords - number</li>\n<li>recordOffset - number</li>\n<li>rowsPerPage - number</li>\n<li>records - [ start_index, end_index ]</li>\n<li>before - (OPTIONAL) { state object literal for current state }</li>\n</ul>", "guessedname": "getState", "guessedtype": "function"}, "hasPreviousPage": {"return": {"type": "boolean", "description": ""}, "description": "Is there a page before the current page?", "guessedname": "hasPreviousPage", "guessedtype": "function"}, "getStartIndex": {"return": {"type": "number", "description": "the index of the first record on the current page"}, "description": "Get the index of the first record on the current page", "guessedname": "getStartIndex", "guessedtype": "function"}, "setTotalRecords": {"params": [{"type": "number", "name": "total", "description": "  the new total number of records"}, {"type": "boolean", "name": "silent", "description": "  whether to forcibly avoid firing the changeRequest event"}], "description": "Set the total number of records.", "guessedname": "setTotalRecords", "guessedtype": "function"}, "_handleStateChange": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  the attribute change event"}], "description": "Fires the pageChange event when the state attributes have changed in\nsuch a way as to locate the current recordOffset on a new page.", "guessedname": "_handleStateChange", "guessedtype": "function"}, "hasPage": {"return": {"type": "boolean", "description": ""}, "params": [{"type": "number", "name": "page", "description": "  the page in question"}], "description": "Does the requested page have any records?", "guessedname": "hasPage", "guessedtype": "function"}, "setRowsPerPage": {"params": [{"type": "number", "name": "rpp", "description": "  the new number of rows per page"}, {"type": "boolean", "name": "silent", "description": "  whether to forcibly avoid firing the changeRequest event"}], "description": "Set the number of rows per page.", "guessedname": "setRowsPerPage", "guessedtype": "function"}, "setPage": {"params": [{"type": "number", "name": "newPage", "description": "  the new page number"}, {"type": "boolean", "name": "silent", "description": "  whether to forcibly avoid firing the changeRequest event"}], "description": "Set the current page to the provided page number if possible.", "guessedname": "setPage", "guessedtype": "function"}, "hasNextPage": {"return": {"type": "boolean", "description": ""}, "description": "Are there records on the next page?", "guessedname": "hasNextPage", "guessedtype": "function"}, "getCurrentPage": {"return": {"type": "number", "description": ""}, "description": "Get the page number corresponding to the current record offset.", "guessedname": "getCurrentPage", "guessedtype": "function"}, "_syncRecordOffset": {"protected": "", "params": [{"type": "Event", "name": "e", "description": "  totalRecordsChange event"}], "description": "Sets recordOffset to the starting index of the previous page when\ntotalRecords is reduced below the current recordOffset.", "guessedname": "_syncRecordOffset", "guessedtype": "function"}, "_renderTemplate": {"protected": "", "params": [{"type": "HTMLElement", "name": "container", "description": "  where to add the ui components"}, {"type": "String", "name": "template", "description": "  the template to use as a guide for rendering"}, {"type": "String", "name": "id_base", "description": "  id base for the container's ui components"}, {"type": "Boolean", "name": "hide", "description": "  leave the container hidden after assembly"}], "description": "Creates the individual ui components and renders them into a container.", "guessedname": "_renderTemplate", "guessedtype": "function"}, "Paginator.isNumeric": {"description": "Similar to Y.Lang.isNumber, but allows numeric strings.  This is\nis used for attribute validation in conjunction with getters that return\nnumbers.", "returns": "{Boolean} true if the input is coercable into a finite number", "static": "", "guessedname": "isNumeric", "guessedtype": "function", "params": [{"type": "Number|String", "name": "v", "description": "  value to be checked for number or numeric string"}]}, "getPageRecords": {"return": {"type": "Array", "description": "[start_index, end_index]"}, "params": [{"type": "number", "name": "page", "description": "  (optional) The page (current page if not specified)"}], "description": "Get the start and end record indexes of the specified page.", "guessedname": "getPageRecords", "guessedtype": "function"}, "getNextPage": {"return": {"type": "number", "description": ""}, "description": "Get the page number of the next page, or null if the current page is the\nlast page.", "guessedname": "getNextPage", "guessedtype": "function"}, "renderUIComponent": {"params": [{"type": "HTMLElement", "name": "marker", "description": "  the marker node to replace"}, {"type": "String", "name": "id_base", "description": "  string base the component's generated id"}], "description": "Replaces a marker node with a rendered UI component, determined by the\nyui-paginator-ui-(UI component class name) in the marker's className. e.g.\nyui-paginator-ui-PageLinks => new Y.Paginator.ui.PageLinks(this)", "guessedname": "renderUIComponent", "guessedtype": "function"}, "Paginator.toNumber": {"return": {"type": "", "description": "Number"}, "description": "Return a number or null from input", "static": "", "guessedname": "toNumber", "guessedtype": "function", "params": [{"type": "Number|String", "name": "n", "description": "  a number or numeric string"}]}}, "file": "Paginator.js", "shortname": "Paginator", "properties": {"_pageChanged": {"protected": "", "type": "boolean", "description": "Used by setState to indicate when a page change has occurred", "guessedname": "_pageChanged", "guessedtype": "property"}, "Paginator.TEMPLATE_DEFAULT": {"type": "string", "static": "", "description": "Default template used by Paginator instances.  Update this if you want\nall new Paginators to use a different default template.", "guessedname": "TEMPLATE_DEFAULT", "guessedtype": "property"}, "Paginator.TEMPLATE_ROWS_PER_PAGE": {"type": "string", "static": "", "description": "Common alternate pagination format, including page links, links for\nprevious, next, first and last pages as well as a rows-per-page\ndropdown.  Offered as a convenience.", "guessedname": "TEMPLATE_ROWS_PER_PAGE", "guessedtype": "property"}, "_batch": {"protected": "", "type": "boolean", "description": "Flag used to indicate multiple attributes are being updated via setState", "guessedname": "_batch", "guessedtype": "property"}, "_state": {"protected": "", "type": "Object", "description": "Temporary state cache used by setState to keep track of the previous\nstate for eventual pageChange event firing", "guessedname": "_state", "guessedtype": "property"}, "Paginator.ui": {"static": "", "description": "Storage object for UI Components", "guessedname": "ui", "guessedtype": "property"}, "Paginator.VALUE_UNLIMITED": {"description": "Used to identify unset, optional configurations, or used explicitly in\nthe case of totalRecords to indicate unlimited pagination.", "static": "", "guessedname": "VALUE_UNLIMITED", "guessedtype": "property", "type": "number", "final": ""}, "Paginator.ID_BASE": {"description": "Base of id strings used for ui components.", "private": "", "static": "", "guessedname": "ID_BASE", "guessedtype": "property", "type": "string"}}, "description": "The Paginator widget provides a set of controls to navigate through paged\ndata.\nTo instantiate a Paginator, pass a configuration object to the contructor.\nThe configuration object should contain the following properties:\n<ul>\n<li>rowsPerPage : <em>n</em> (int)</li>\n<li>totalRecords : <em>n</em> (int or Paginator.VALUE_UNLIMITED)</li>\n</ul>"}, "Paginator.ui.PageLinks": {"properties": {"current": {"guessedname": "current", "type": "number", "description": "Current page", "private": "", "guessedtype": "property"}, "container": {"guessedname": "container", "type": "HTMLElement", "description": "Span node containing the page links", "private": "", "guessedtype": "property"}}, "name": "Paginator.ui.PageLinks", "constructors": [{"params": [{"type": "Pagintor", "name": "p", "description": "  Paginator instance to attach to"}], "description": "ui Component to generate the page links"}], "namespace": "", "module": "gallery-paginator", "events": {"pageLinkClassChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "pageLinkClassChange", "description": "Fires when the value for the configuration attribute 'pageLinkClass' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "currentPageClassChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "currentPageClassChange", "description": "Fires when the value for the configuration attribute 'currentPageClass' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "pageLinksContainerClassChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "pageLinksContainerClassChange", "description": "Fires when the value for the configuration attribute 'pageLinksContainerClass' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "pageLinksChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "pageLinksChange", "description": "Fires when the value for the configuration attribute 'pageLinks' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "pageLabelBuilderChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "pageLabelBuilderChange", "description": "Fires when the value for the configuration attribute 'pageLabelBuilder' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}}, "guessedname": "PageLinks", "methods": {"render": {"return": {"type": "HTMLElement", "description": ""}, "params": [{"type": "string", "name": "id_base", "description": "  used to create unique ids for generated nodes"}], "description": "Generate the nodes and return the container node containing page links\nappropriate to the current pagination state.", "guessedname": "render", "guessedtype": "function"}, "rebuild": {"params": [{"type": "CustomEvent", "name": "e", "description": "  The calling change event"}], "description": "Force a rebuild of the page links.", "guessedname": "rebuild", "guessedtype": "function"}, "update": {"params": [{"type": "CustomEvent", "name": "e", "description": "  The calling change event"}], "description": "Update the links if appropriate", "guessedname": "update", "guessedtype": "function"}, "onClick": {"params": [{"type": "DOMEvent", "name": "e", "description": "  The click event"}], "description": "Listener for the container's onclick event.  Looks for qualifying link\nclicks, and pulls the page number from the link's page attribute.\nSends link's page attribute to the Paginator's setPage method.", "guessedname": "onClick", "guessedtype": "function"}, "destroy": {"private": "", "description": "Removes the page links container node and clears event listeners", "guessedname": "destroy", "guessedtype": "function"}, "calculateRange": {"return": {"type": "Array", "description": "[start_page_number, end_page_number]"}, "description": "Calculates start and end page numbers given a current page, attempting\nto keep the current page in the middle", "static": "", "guessedname": "calculateRange", "guessedtype": "function", "params": [{"type": "int", "name": "currentPage", "description": "  The current page"}, {"type": "int", "name": "totalPages", "description": "   (optional) Maximum number of pages"}, {"type": "int", "name": "numPages", "description": "     (optional) Preferred number of pages in range"}]}}, "file": "PageLinks.js", "guessedtype": "function", "shortname": "Paginator.ui.PageLinks", "configs": {"pageLinksContainerClass": {"default": "'yui-paginator-pages'", "description": "CSS class assigned to the span containing the page links.", "guessedname": "pageLinksContainerClass", "guessedtype": "property"}, "currentPageClass": {"default": "'yui-paginator-current-page'", "description": "CSS class assigned to the current page span.", "guessedname": "currentPageClass", "guessedtype": "property"}, "pageLabelBuilder": {"default": "function (page, paginator) { return page; }", "description": "Function used generate the innerHTML for each page link/span.  The\nfunction receives as parameters the page number and a reference to the\npaginator object.", "guessedname": "pageLabelBuilder", "guessedtype": "property"}, "pageLinks": {"default": "10", "description": "Maximum number of page links to display at one time.", "guessedname": "pageLinks", "guessedtype": "property"}, "pageLinkClass": {"default": "'yui-paginator-page'", "description": "CSS class assigned to each page link/span.", "guessedname": "pageLinkClass", "guessedtype": "property"}}, "description": "ui Component to generate the page links"}}, "version": "1.0.0", "modules": {"gallery-paginator": {"description": "Adds per-page error notification to Paginator.ui.PageLinks.", "submodules": [], "classlist": ["Paginator.ui.CurrentPageInput", "Paginator.ui.CurrentPageReport", "Paginator.ui.FirstPageLink", "Paginator.ui.ItemRangeDropdown", "Paginator.ui.LastPageLink", "Paginator.ui.NextPageLink", "Paginator.ui.PageLinks", "Paginator", "Paginator.ui.PreviousPageLink", "Paginator.ui.RowsPerPageDropdown", "Paginator.ui.ValidationPageLinks"], "filelist": ["CurrentPageInput.js", "CurrentPageReport.js", "FirstPageLink.js", "ItemRangeDropdown.js", "LastPageLink.js", "NextPageLink.js", "PageLinks.js", "Paginator.js", "PreviousPageLink.js", "RowsPerPageDropdown.js", "ValidationPageLinks.js"], "subdata": {}, "name": "gallery-paginator"}}, "filemap": {"Paginator.js": {"classlist": ["Paginator"], "name": "Paginator.js", "module": "gallery-paginator"}, "CurrentPageInput.js": {"classlist": ["Paginator.ui.CurrentPageInput"], "name": "CurrentPageInput.js", "module": "gallery-paginator"}, "RowsPerPageDropdown.js": {"classlist": ["Paginator.ui.RowsPerPageDropdown"], "name": "RowsPerPageDropdown.js", "module": "gallery-paginator"}, "LastPageLink.js": {"classlist": ["Paginator.ui.LastPageLink"], "name": "LastPageLink.js", "module": "gallery-paginator"}, "CurrentPageReport.js": {"classlist": ["Paginator.ui.CurrentPageReport"], "name": "CurrentPageReport.js", "module": "gallery-paginator"}, "FirstPageLink.js": {"classlist": ["Paginator.ui.FirstPageLink"], "name": "FirstPageLink.js", "module": "gallery-paginator"}, "ValidationPageLinks.js": {"classlist": ["Paginator.ui.ValidationPageLinks"], "name": "ValidationPageLinks.js", "module": "gallery-paginator"}, "ItemRangeDropdown.js": {"classlist": ["Paginator.ui.ItemRangeDropdown"], "name": "ItemRangeDropdown.js", "module": "gallery-paginator"}, "PageLinks.js": {"classlist": ["Paginator.ui.PageLinks"], "name": "PageLinks.js", "module": "gallery-paginator"}, "PreviousPageLink.js": {"classlist": ["Paginator.ui.PreviousPageLink"], "name": "PreviousPageLink.js", "module": "gallery-paginator"}, "NextPageLink.js": {"classlist": ["Paginator.ui.NextPageLink"], "name": "NextPageLink.js", "module": "gallery-paginator"}}}