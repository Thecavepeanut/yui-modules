{"majorversion": 3, "classmap": {"AtLeastOneCheckboxGroup": {"name": "AtLeastOneCheckboxGroup", "constructors": [{"params": [{"type": "String|Node|NodeList", "name": "cb_list", "description": "  The list of checkboxes to manage"}], "description": "At least one checkbox must be selected.  If the last one is turned off,\nthe active, adjacent one is turned on.  The exact algorithm is explained\nin \"Tog on Interface\".  The checkboxes are assumed to be ordered in the\norder they were added."}], "namespace": "", "module": "gallery-checkboxgroups", "extends": "CheckboxGroup", "superclass": "CheckboxGroup", "file": "AtLeastOneCheckboxGroup.js", "shortname": "AtLeastOneCheckboxGroup", "description": "At least one checkbox must be selected.  If the last one is turned off,\nthe active, adjacent one is turned on.  The exact algorithm is explained\nin \"Tog on Interface\".  The checkboxes are assumed to be ordered in the\norder they were added."}, "NodeList": {"shortname": "NodeList", "namespace": "", "name": "NodeList", "methods": {"slice": {"return": {"type": "NodeList", "description": "A new NodeList comprised of this NodeList joined with the input."}, "params": [{"type": "Number", "name": "begin", "description": " Zero-based index at which to begin extraction.\nAs a negative index, start indicates an offset from the end of the sequence. slice(-2) extracts the second-to-last element and the last element in the sequence."}, {"type": "Number", "name": "end", "description": " Zero-based index at which to end extraction. slice extracts up to but not including end.\nslice(1,4) extracts the second element through the fourth element (elements indexed 1, 2, and 3).\nAs a negative index, end indicates an offset from the end of the sequence. slice(2,-1) extracts the third element through the second-to-last element in the sequence.\nIf end is omitted, slice extracts to the end of the sequence."}], "description": "Returns a new NodeList comprising the Nodes in the given range."}, "shift": {"return": {"type": "Node", "description": "The first item in the NodeList."}, "description": "Removes the first item from the NodeList and returns it."}, "pop": {"return": {"type": "Node", "description": "The last item in the NodeList."}, "description": "Removes the first last from the NodeList and returns it."}, "splice": {"return": {"type": "NodeList", "description": "The element(s) removed."}, "params": [{"type": "Number", "name": "index", "description": " Index at which to start changing the array. If negative, will begin that many elements from the end."}, {"type": "Number", "name": "howMany", "description": " An integer indicating the number of old array elements to remove. If howMany is 0, no elements are removed. In this case, you should specify at least one new element. If no howMany parameter is specified (second syntax above, which is a SpiderMonkey extension), all elements after index are removed.\n{Node | DOMNode| element1, ..., elementN \nThe elements to add to the array. If you don't specify any elements, splice simply removes elements from the array."}], "description": "Changes the content of the NodeList, adding new elements while removing old elements."}, "push": {"params": [{"type": "Node | DOMNode", "name": "nodeN", "description": " One or more nodes to add to the end of the NodeList."}], "description": "Adds the given Node(s) to the end of the NodeList.", "param": "{Node | DOMNode} nodeN One or more nodes to add to the NodeList."}, "concat": {"return": {"type": "NodeList", "description": "A new NodeList comprised of this NodeList joined with the input."}, "params": [{"type": "NodeList | Array", "name": "valueN", "description": " Arrays/NodeLists and/or values to\nconcatenate to the resulting NodeList"}], "description": "Returns a new NodeList combining the given NodeList(s)"}}}, "EnableIfAnyCheckboxGroup": {"name": "EnableIfAnyCheckboxGroup", "constructors": [{"params": [{"type": "String|Node|NodeList", "name": "cb_list", "description": "  The list of checkboxes to manage"}, {"type": "String|NodeList", "name": "nodes", "description": "  The nodes to enable/disable"}], "description": "Enables the given list of nodes if any checkboxes are checked."}], "namespace": "", "module": "gallery-checkboxgroups", "extends": "CheckboxGroup", "superclass": "CheckboxGroup", "file": "EnableIfAnyCheckboxGroup.js", "shortname": "EnableIfAnyCheckboxGroup", "description": "Enables the given list of nodes if any checkboxes are checked."}, "CheckboxGroup": {"name": "CheckboxGroup", "constructors": [{"params": [{"type": "String|Node|NodeList", "name": "cb_list", "description": "  The list of checkboxes to manage"}], "description": "<p>Base class for enforcing constraints on groups of checkboxes.</p>\n<p>Derived classes must override <code>enforceConstraints()</code>.</p>"}], "namespace": "", "module": "gallery-checkboxgroups", "methods": {"allUnchecked": {"return": {"type": "boolean", "description": "<code>true</code> if all checkboxes are unchecked"}, "guessedname": "allUnchecked", "guessedtype": "function"}, "getCheckboxList": {"return": {"type": "NodeList", "description": "List of managed checkboxes"}, "guessedname": "getCheckboxList", "guessedtype": "function"}, "allChecked": {"return": {"type": "boolean", "description": "<code>true</code> if all checkboxes are checked"}, "guessedname": "allChecked", "guessedtype": "function"}, "enforceConstraints": {"params": [{"type": "String|Object|Array", "name": "cb_list", "description": "  The list of checkboxes"}, {"type": "Int", "name": "index", "description": "  The index of the checkbox that changed"}], "description": "Derived classes must override this function to implement the desired behavior.", "guessedname": "enforceConstraints", "guessedtype": "function"}, "splice": {"params": [{"type": "Int", "name": "start", "description": "  Insertion index"}, {"type": "Int", "name": "delete_count", "description": "  Number of items to remove, starting from <code>start</code>"}, {"type": "String|Node|NodeList", "name": "cb_list", "description": "  The list of checkboxes to insert at <code>start</code>"}], "description": "Same functionality as <code>Array.splice()</code>.  Operates on the\nlist of managed checkboxes.", "guessedname": "splice", "guessedtype": "function"}, "allDisabled": {"return": {"type": "boolean", "description": "<code>true</code> if all checkboxes are disabled"}, "guessedname": "allDisabled", "guessedtype": "function"}}, "file": "CheckboxGroup.js", "shortname": "CheckboxGroup", "description": "<p>Base class for enforcing constraints on groups of checkboxes.</p>\n<p>Derived classes must override <code>enforceConstraints()</code>.</p>"}, "SelectAllCheckboxGroup": {"name": "SelectAllCheckboxGroup", "constructors": [{"params": [{"type": "String|Object", "name": "select_all_cb", "description": "  The checkbox that triggers \"select all\""}, {"type": "String|Node|NodeList", "name": "cb_list", "description": "  The list of checkboxes to manage"}], "description": "All checkboxes can be selected and a select-all checkbox is available\nto check all. This check-all box is automatically changed if any other\ncheckbox changes state."}], "namespace": "", "module": "gallery-checkboxgroups", "extends": "CheckboxGroup", "superclass": "CheckboxGroup", "file": "SelectAllCheckboxGroup.js", "shortname": "SelectAllCheckboxGroup", "description": "All checkboxes can be selected and a select-all checkbox is available\nto check all. This check-all box is automatically changed if any other\ncheckbox changes state."}, "AtMostOneCheckboxGroup": {"name": "AtMostOneCheckboxGroup", "constructors": [{"params": [{"type": "String|Node|NodeList", "name": "cb_list", "description": "  The list of checkboxes to manage"}], "description": "At most one checkbox can be selected.  If one is turned on, the active\none is turned off."}], "namespace": "", "module": "gallery-checkboxgroups", "extends": "CheckboxGroup", "superclass": "CheckboxGroup", "file": "AtMostOneCheckboxGroup.js", "shortname": "AtMostOneCheckboxGroup", "description": "At most one checkbox can be selected.  If one is turned on, the active\none is turned off."}}, "version": "1.0.0", "modules": {"gallery-checkboxgroups": {"description": "All checkboxes can be selected and a select-all checkbox is available\nto check all. This check-all box is automatically changed if any other\ncheckbox changes state.", "submodules": [], "classlist": ["AtLeastOneCheckboxGroup", "AtMostOneCheckboxGroup", "CheckboxGroup", "EnableIfAnyCheckboxGroup", "SelectAllCheckboxGroup"], "filelist": ["AtLeastOneCheckboxGroup.js", "AtMostOneCheckboxGroup.js", "CheckboxGroup.js", "EnableIfAnyCheckboxGroup.js", "NodeList-patch.js", "SelectAllCheckboxGroup.js"], "subdata": {}, "name": "gallery-checkboxgroups"}}, "filemap": {"AtLeastOneCheckboxGroup.js": {"classlist": ["AtLeastOneCheckboxGroup"], "name": "AtLeastOneCheckboxGroup.js", "module": "gallery-checkboxgroups"}, "AtMostOneCheckboxGroup.js": {"classlist": ["AtMostOneCheckboxGroup"], "name": "AtMostOneCheckboxGroup.js", "module": "gallery-checkboxgroups"}, "NodeList-patch.js": {"name": "NodeList-patch.js", "classlist": [], "module": "gallery-checkboxgroups", "guessedname": "Y_NodeList", "guessedtype": "property", "property": "Y_NodeList"}, "EnableIfAnyCheckboxGroup.js": {"classlist": ["EnableIfAnyCheckboxGroup"], "name": "EnableIfAnyCheckboxGroup.js", "module": "gallery-checkboxgroups"}, "CheckboxGroup.js": {"classlist": ["CheckboxGroup"], "name": "CheckboxGroup.js", "module": "gallery-checkboxgroups"}, "SelectAllCheckboxGroup.js": {"classlist": ["SelectAllCheckboxGroup"], "name": "SelectAllCheckboxGroup.js", "module": "gallery-checkboxgroups"}}}