{"majorversion": 3, "classmap": {"QueryBuilder": {"name": "QueryBuilder", "constructors": [{"params": [{"type": "Array", "name": "var_list", "description": "  List of variables that be included in the query.\nEach item in the list is an object containing:\n<dl>\n<dt>name</dt>\n<dd>The name of the variable.  Set as the <code>value</code> for the select option.</dd>\n<dt>type</dt>\n<dd>The variable type.  Used to determine which plugin to instantiate.\nMust match a key in <code>Y.QueryBuilder.plugin_mapping</code>.\n(You can add new plugins to this global mapping.)</dd>\n<dt>text</dt>\n<dd>The text displayed when the variable is selected.</dd>\n<dt>plugin-specific configuration</dt>\n<dd>Plugins may defines additional configuration.</dd>\n</dl>"}, {"type": "Object", "name": "operators", "description": "  Map of variable types to list of operators.\nEach operator is an object defining <code>value</code> and <code>text</code>."}, {"type": "Object", "name": "config", "description": "  Widget configuration"}], "description": "<p>Class which allows user to build a list of query criteria, e.g., for\nsearching.  All the conditions are either AND'ed or OR'ed.  For a more\ngeneral query builder, see gallery-exprbuilder.</p>\n<p>The default package provides two data types:  String (which can also\nbe used for numbers) and Select (which provides a menu of options).  The\nplugin API allows defining additional data types, e.g., date range or\nmulti-select.  Every plugin must be registered in\n<code>Y.QueryBuilder.plugin_mapping</code>.  Plugins must implement the\nfollowing functions:</p>\n<dl>\n<dt><code>constructor(qb, config)</code></dt>\n<dd>The arguments passed to the constructor are the QueryBuilder instance\nand the <code>pluginConfig</code> set on the QueryBuilder instance.\nAt the minimum, this function should initalize form field name patterns\nusing <code>config.field_prefix</code>.</dd>\n<dt><code>create(query_index, var_config, op_list, value)</code><dt>\n<dd>This function must create the additional cells for the query row and\npopulate these cells appropriately.  (The QueryBuilder widget will\ninsert the cells into the table.)  <code>var_config</code> is the\nitem from the QueryBuilder's <code>var_list</code> that the user\nselected.  <code>op_list</code> is the item from the QueryBuilder's\n<code>operators</code> which matches the variable selected by the\nuser.  <code>value</code> is optional.  If specified, it is the\ninitial value(s) to be displayed by the plugin.</dd>\n<dt><code>postCreate(query_index, var_config, op_list, value)</code></dt>\n<dd>Optional.  If it exists, it will be called after the cells returned by\n<code>create()</code> have been inserted into the table.  The arguments\nare the same as <code>create()</code>.</dd>\n<dt><code>destroy()</code></dt>\n<dd>Destroy the plugin.  (The QueryBuilder widget will remove the cells\nand purge all events.)</dd>\n<dt><code>updateName(new_index)</code></dt>\n<dd>Update the names of the form fields managed by the plugin.</dd>\n<dt><code>set(query_index, data)</code></dt>\n<dd>Set the displayed value(s) by extracting values from data (a map)\nbased on the current names of the plugin's form fields.</dd>\n<dt><code>toDatabaseQuery()</code></dt>\n<dd>Return an array of arrays.  Each inner array contains an operation\nand a value.  The default String and Select plugins each return\na single inner array.  A date range plugin would return two inner\narrays, one for the start date and one for the end date.</dd>\n</dl>"}], "namespace": "", "module": "gallery-querybuilder", "events": {"queryChanged": {"params": [{"type": "Object", "name": "info", "description": "  <code>remove</code> is <code>true</code> if a row was removed"}], "description": "Fires when the query is modified."}}, "methods": {"reset": {"params": [{"type": "Array", "name": "var_list", "description": "  If specified, the list of available variables is replaced."}, {"type": "Object", "name": "operators", "description": "  If specified, the operators for all variable types will be replaced."}], "description": "Reset the query.", "guessedname": "reset", "guessedtype": "function"}, "_rowControls": {"protected": "", "return": {"type": "String", "description": "markup for the row controls (insert and remove)"}, "guessedname": "_rowControls", "guessedtype": "function"}, "getPlugin": {"return": {"type": "Object", "description": "the plugin for the row, if any"}, "params": [{"type": "int", "name": "row_index", "description": "  The index of the row"}], "description": "Returns plugin used for the specified row, if any.", "guessedname": "getPlugin", "guessedtype": "function"}, "update": {"params": [{"type": "int", "name": "row_index", "description": "  The index of the row"}, {"type": "String", "name": "value", "description": "  If specified, the value to set"}], "description": "Set the value of the specified row.", "guessedname": "update", "guessedtype": "function"}, "remove": {"return": {"type": "boolean", "description": "<code>true</code> if successful"}, "params": [{"type": "int", "name": "row_index", "description": "  The index of the row"}], "description": "Removes the specified row.", "guessedname": "remove", "guessedtype": "function"}, "toDatabaseQuery": {"return": {"type": "Array", "description": "list of [var, op, value] tuples suitable for a database query"}, "guessedname": "toDatabaseQuery", "guessedtype": "function"}, "_variablesMenu": {"return": {"type": "String", "description": "markup for the query variable menu"}, "protected": "", "params": [{"type": "String", "name": "menu_name", "description": "  name for the select form element"}], "guessedname": "_variablesMenu", "guessedtype": "function"}, "_notifyChanged": {"protected": "", "description": "Fires the queryChanged event.", "guessedname": "_notifyChanged", "guessedtype": "function"}, "_createContainer": {"protected": "", "return": {"type": "DOM element", "description": "container for one piece of a query row"}, "guessedname": "_createContainer", "guessedtype": "function"}, "appendNew": {"return": {"type": "Object", "description": "plugin that was created for the row, if any"}, "params": [{"type": "String", "name": "name", "description": "  If specified, this variable is selected."}, {"type": "String", "name": "value", "description": "  If specified, this value is selected."}], "description": "Append a new query condition to the table.", "guessedname": "appendNew", "guessedtype": "function"}, "variableName": {"return": {"type": "String", "description": "name for the select form element listing the available query variables"}, "params": [{"type": "int", "name": "i", "description": "  query row index"}], "guessedname": "variableName", "guessedtype": "function"}}, "file": "QueryBuilder.js", "shortname": "QueryBuilder", "configs": {"fieldPrefix": {"description": "All generated form field names start with this prefix.  This avoids\nconflicts if you have more than one QueryBuilder on a page.", "writeonce": "", "default": "\"\"", "guessedname": "fieldPrefix", "guessedtype": "property", "type": "{String}"}, "pluginConfig": {"description": "Configuration passed to plugins when they are constructed.", "writeonce": "", "default": "{}", "guessedname": "pluginConfig", "guessedtype": "property", "type": "{Object}"}, "chooseVarPrompt": {"description": "The prompt displayed when a new item is added to the query.", "writeonce": "", "default": "\"Choose a variable\"", "guessedname": "chooseVarPrompt", "guessedtype": "property", "type": "{String}"}}, "description": "<p>Class which allows user to build a list of query criteria, e.g., for\nsearching.  All the conditions are either AND'ed or OR'ed.  For a more\ngeneral query builder, see gallery-exprbuilder.</p>\n<p>The default package provides two data types:  String (which can also\nbe used for numbers) and Select (which provides a menu of options).  The\nplugin API allows defining additional data types, e.g., date range or\nmulti-select.  Every plugin must be registered in\n<code>Y.QueryBuilder.plugin_mapping</code>.  Plugins must implement the\nfollowing functions:</p>\n<dl>\n<dt><code>constructor(qb, config)</code></dt>\n<dd>The arguments passed to the constructor are the QueryBuilder instance\nand the <code>pluginConfig</code> set on the QueryBuilder instance.\nAt the minimum, this function should initalize form field name patterns\nusing <code>config.field_prefix</code>.</dd>\n<dt><code>create(query_index, var_config, op_list, value)</code><dt>\n<dd>This function must create the additional cells for the query row and\npopulate these cells appropriately.  (The QueryBuilder widget will\ninsert the cells into the table.)  <code>var_config</code> is the\nitem from the QueryBuilder's <code>var_list</code> that the user\nselected.  <code>op_list</code> is the item from the QueryBuilder's\n<code>operators</code> which matches the variable selected by the\nuser.  <code>value</code> is optional.  If specified, it is the\ninitial value(s) to be displayed by the plugin.</dd>\n<dt><code>postCreate(query_index, var_config, op_list, value)</code></dt>\n<dd>Optional.  If it exists, it will be called after the cells returned by\n<code>create()</code> have been inserted into the table.  The arguments\nare the same as <code>create()</code>.</dd>\n<dt><code>destroy()</code></dt>\n<dd>Destroy the plugin.  (The QueryBuilder widget will remove the cells\nand purge all events.)</dd>\n<dt><code>updateName(new_index)</code></dt>\n<dd>Update the names of the form fields managed by the plugin.</dd>\n<dt><code>set(query_index, data)</code></dt>\n<dd>Set the displayed value(s) by extracting values from data (a map)\nbased on the current names of the plugin's form fields.</dd>\n<dt><code>toDatabaseQuery()</code></dt>\n<dd>Return an array of arrays.  Each inner array contains an operation\nand a value.  The default String and Select plugins each return\na single inner array.  A date range plugin would return two inner\narrays, one for the start date and one for the end date.</dd>\n</dl>"}, "QueryBuilder.Select": {"name": "QueryBuilder.Select", "constructors": [{"description": "<p>Plugin for choosing from a list of values.  In the\n<code>var_list</code> configuration, specify <code>value_list</code> as\na list of objects, each defining <code>value</code> and\n<code>text</code>.</p>\n<p>There must be exactly one operator specified for this plugin.</p>"}], "namespace": "", "module": "gallery-querybuilder", "guessedname": "Select", "methods": {"valueName": {"description": "Form element names.", "guessedname": "valueName", "guessedtype": "function"}}, "file": "Select.js", "guessedtype": "function", "shortname": "QueryBuilder.Select", "description": "<p>Plugin for choosing from a list of values.  In the\n<code>var_list</code> configuration, specify <code>value_list</code> as\na list of objects, each defining <code>value</code> and\n<code>text</code>.</p>\n<p>There must be exactly one operator specified for this plugin.</p>"}, "QueryBuilder.String": {"name": "QueryBuilder.String", "constructors": [{"description": "<p>Plugin for accepting a string or number.  In the <code>var_list</code>\nconfiguration, specify <code>validation</code> to CSS classes that will\nbe interpreted by <code>Y.FormManager</code>.</p>\n<p>All the operators specified for this plugin are displayed on a\nmenu.</p>"}], "namespace": "", "module": "gallery-querybuilder", "guessedname": "String", "methods": {"operationName": {"description": "Form element names.", "guessedname": "operationName", "guessedtype": "function"}}, "file": "String.js", "guessedtype": "function", "shortname": "QueryBuilder.String", "description": "<p>Plugin for accepting a string or number.  In the <code>var_list</code>\nconfiguration, specify <code>validation</code> to CSS classes that will\nbe interpreted by <code>Y.FormManager</code>.</p>\n<p>All the operators specified for this plugin are displayed on a\nmenu.</p>"}}, "version": "1.0.0", "modules": {"gallery-querybuilder": {"description": "<p>Plugin for accepting a string or number.  In the <code>var_list</code>\nconfiguration, specify <code>validation</code> to CSS classes that will\nbe interpreted by <code>Y.FormManager</code>.</p>\n<p>All the operators specified for this plugin are displayed on a\nmenu.</p>", "submodules": [], "classlist": ["QueryBuilder", "QueryBuilder.Select", "QueryBuilder.String"], "filelist": ["QueryBuilder.js", "Select.js", "String.js", "Types.js"], "subdata": {}, "name": "gallery-querybuilder"}}, "filemap": {"Select.js": {"classlist": ["QueryBuilder.Select"], "name": "Select.js", "module": "gallery-querybuilder"}, "QueryBuilder.js": {"classlist": ["QueryBuilder"], "name": "QueryBuilder.js", "module": "gallery-querybuilder"}, "Types.js": {"classlist": [], "name": "Types.js", "module": "gallery-querybuilder"}, "String.js": {"classlist": ["QueryBuilder.String"], "name": "String.js", "module": "gallery-querybuilder"}}}