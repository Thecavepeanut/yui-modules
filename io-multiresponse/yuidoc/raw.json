{"majorversion": 3, "classmap": {"io~multiresponse": {"name": "io~multiresponse", "namespace": "", "module": "io", "guessedname": "w", "methods": {"_create": {"return": {"type": "void", "description": ""}, "static": "", "params": [{"type": "object", "name": "o", "description": " Transaction object generated by _create()."}, {"type": "object", "name": "c", "description": " Configuration object passed to YUI.io()."}], "description": "Creates the iframe used in file upload\ntransactions, and binds the response event handler.", "private": ""}, "_startTimeout": {"return": {"type": "void", "description": ""}, "static": "", "params": [{"type": "object", "name": "o", "description": " Transaction object generated by _create()."}, {"type": "object", "name": "c", "description": " Configuration object passed to YUI.io()."}], "description": "Starts timeout count if the configuration object\nhas a defined timeout property.", "private": ""}, "_addData": {"return": {"type": "array", "description": "Array of created fields."}, "static": "", "params": [{"type": "object", "name": "f", "description": " HTML form object."}, {"type": "string", "name": "s", "description": " The key-value POST data."}], "description": "Parses the POST data object and creates hidden form elements\nfor each key-value, and appends them to the HTML form object.", "private": ""}, "_send": {"return": {"type": "void", "description": ""}, "static": "", "params": [{"type": "o", "name": "o", "description": " The transaction object"}, {"type": "object", "name": "uri", "description": " Qualified path to transaction resource."}, {"type": "object", "name": "c", "description": " Configuration object for the transaction."}], "description": "Uploads HTML form data, inclusive of files/attachments,\nusing the iframe created in _create to facilitate the transaction.", "private": ""}, "_clearTimeout": {"return": {"type": "void", "description": ""}, "static": "", "params": [{"type": "number", "name": "id", "description": " - Transaction ID."}], "description": "Clears the timeout interval started by _startTimeout().", "private": ""}, "_handle": {"return": {"type": "void", "description": ""}, "static": "", "params": [{"type": "o", "name": "o", "description": " The transaction object"}, {"type": "object", "name": "c", "description": " Configuration object for the transaction."}], "description": "Bound to the iframe's Load event and processes\nthe response data.", "private": ""}, "_addJSON": {"return": {"type": "array", "description": "created fields."}, "static": "", "params": [{"type": "object", "name": "f", "description": " HTML form object."}, {"type": "string|object", "name": "s", "description": " The JSON data or object to serialize."}], "description": "Adds JSON encoded data to the form.", "private": ""}, "_resetAttrs": {"return": {"type": "void", "description": ""}, "static": "", "params": [{"type": "object", "name": "f", "description": " HTML form object."}, {"type": "object", "name": "a", "description": " Object of original attributes."}], "description": "Reset the HTML form attributes to their original values.", "private": ""}, "_createForm": {"return": {"type": "string", "description": "form id"}, "static": "", "params": [{"type": "object", "name": "c", "description": " Configuration object passed to YUI.io()."}], "description": "Creates a temporary form, if the caller doesn't provide one.", "private": ""}, "_destroy": {"return": {"type": "void", "description": ""}, "static": "", "params": [{"type": "number", "name": "id", "description": " Transaction id."}, {"type": "object", "name": "c", "description": " Configuration object for the transaction."}], "description": "Destroy the iframe and temp form, if any.", "private": ""}, "_removeData": {"return": {"type": "void", "description": ""}, "static": "", "params": [{"type": "object", "name": "f", "description": " HTML form object."}, {"type": "object", "name": "o", "description": " HTML form fields created from configuration.data."}], "description": "Removes the custom fields created to pass additional POST\ndata, along with the HTML form fields.", "private": ""}, "_tE": {"return": {"type": "void", "description": ""}, "static": "", "params": [{"type": "string", "name": "e", "description": " - event to be published"}, {"type": "object", "name": "c", "description": " - configuration data subset for event subscription."}], "description": "Method for creating and subscribing transaction events.", "private": ""}, "_setAttrs": {"return": {"type": "void", "description": ""}, "static": "", "params": [{"type": "object", "name": "f", "description": " HTML form object."}, {"type": "object", "name": "id", "description": " The Transaction ID."}, {"type": "object", "name": "uri", "description": " Qualified path to transaction resource."}, {"type": "string", "name": "method", "description": " POST or GET."}], "description": "Sets the appropriate attributes and values to the HTML\nform, in preparation of a file upload transaction.", "private": ""}}, "file": "multi-response.js", "guessedtype": "property", "shortname": "io~multiresponse", "description": "<p>Extends the IO base class to enable multiple responses using an\niframe as the transport medium.  Each response fires the response event.\nThe only events that are fired are the start and end events.</p>\n<p>All the YUI 3 IO features are supported, so the request can be sent\nas either GET (for simple query args) or POST (for anything, even file\nuploads).  The module uses an iframe to send the request and includes a\ncallback parameter.  (So you cannot include a parameter named\n<q>callback</q>.)  For each response, the server must send a script\nblock invoking the callback, similar to JSONP.  Unlike JSONP, however,\nrequests can only be made to your own server because the callback will\nreference <code>window.parent</code>.  In order to trigger script\nparsing in all browsers, the first chunk of data that the server writes\nto the connection must be at least 1024 bytes, and it must be part of\nthe body, so you will need to explicitly send an empty head.</p>\n<p>Due to the way that the request data is parsed, it is not safe to\nsend JSON-encoded data using the standard YUI 3 IO methods.  However, if\nyou define <code>json</code> in the configuration passed to\n<code>Y.io()</code>, then the data will be passed to the server under\nthe <code>json</code> parameter.  (If you pass an object, it will be\nserialized with <code>Y.JSON.stringify()</code>.)\n<p>To keep the iframe after it has finished loading, set\n<code>debug:true</code> in the configuration passed to\n<code>Y.io()</code>.</p>"}}, "version": "1.0.0", "modules": {"io": {"description": "<p>Extends the IO base class to enable multiple responses using an\niframe as the transport medium.</p>", "submodules": ["io-multiresponse"], "classlist": ["io~multiresponse"], "filelist": ["multi-response.js"], "subdata": {"io-multiresponse": {"name": "io~multiresponse", "description": "<p>Extends the IO base class to enable multiple responses using an\niframe as the transport medium.</p>"}}, "name": "io"}}, "filemap": {"multi-response.js": {"classlist": ["io~multiresponse"], "name": "multi-response.js", "module": "io"}}}